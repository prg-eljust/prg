{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Informaci\u00f3 del m\u00f2dul","text":""},{"location":"#modul-didactic-programacio","title":"Modul Did\u00e0ctic Programaci\u00f3","text":"<ul> <li>1r Desenvolupament d'Aplicacions Multiplataforma (DAM)</li> <li>1r Desenvolupament d'Aplicacions Web - Semipresencial (DAWsp)</li> <li>IES Jaume II el Just</li> <li>Tavernes de la Valldigna</li> <li>La programaci\u00f3 did\u00e0ctica est\u00e0 en desenvolupamnet. En breu la tindreu enlla\u00e7ada</li> <li>AULES FP </li> <li>AULES SEMIPRESENCIAL</li> </ul>"},{"location":"#professorat","title":"Professorat","text":"<ul> <li>Paco Galera</li> <li>Joan Gerard Camarena</li> </ul>"},{"location":"#continguts-del-modul","title":"Continguts del m\u00f2dul","text":"<ol> <li>Dades simples. Instruccions seq\u00fcencials.</li> <li>Programaci\u00f3 estructurada. Disseny d'algorismes en Python.</li> <li>Introducci\u00f3 a Python.</li> <li>Estructures de control en Python.</li> <li>Introducci\u00f3 a Java.</li> <li>Arrays en Java.</li> <li>Programaci\u00f3 modular. Funcions.</li> <li>Programaci\u00f3 Orientada a Objectes. Classes amb atributs.</li> <li>Programaci\u00f3 Orientada a Objectes. Classes amb m\u00e8todes.</li> <li>Interf\u00edcies.</li> <li>Acc\u00e9s a Fitxers.</li> <li>Acc\u00e9s a Bases de Dades</li> </ol>"},{"location":"#temporitzacio","title":"Temporitzaci\u00f3","text":"DAM PresencialDAW Semipresencial <p>La temporitzaci\u00f3 \u00e9s un instrument din\u00e0mic, que pot sofrir modificacions degut al flu\u00efr de les classes i altres imprevistos, per\u00f2 pot servir-nos per a guia del que hem de treballar i quan al llarg del curs</p> <p></p> <p></p>"},{"location":"#avaluacio","title":"Avaluaci\u00f3","text":"DAM PresencialDAW Semipresencial <p>L'avaluaci\u00f3 \u00e9s el mecanisme que far\u00e9 servir per a avaluar els vostres coneixements. I hem de considerar diferents aspectes:</p> <ul> <li>El cicle \u00e9s presencial per la qual cosa l'assist\u00e8ncia \u00e9s obligat\u00f2ria.</li> </ul> <p>Tipus d'activitats</p> <ul> <li>S'avaluar\u00e0 el comportament i la participaci\u00f3 en classe (ponderar\u00e0 el 5%)</li> <li>Es desenvoluparan una serie d'exercicis pr\u00e0ctics que haureu de lliurar i entregar. Aquestes pr\u00e0ctiques podran anar acompanyades d'una part oral on haureu de demostrar que enteneu el que heu entregat i que sou els autors de la pr\u00e0ctica. Si el professor te dubtes raonables que no ho heu fet vosaltres, la pr\u00e0ctica puntuar\u00e0 com un zero. Aquest exercicis ponderar\u00e0n el 10%.</li> <li> <p>Examens de cada tema o bloc tem\u00e0tic. Dins de cada examen, podran apar\u00e8ixer exercicis de tres tipus: </p> <ul> <li>test, amb preguntes de 3 o 4 opcions, descontant puntaci\u00f3 les preguntes err\u00f2nies</li> <li>preguntes de teoria o pr\u00e0ctica a resoldre en paper</li> <li>exercicis a resoldre amb el ordinador </li> </ul> <p>Els examens ponderar\u00e0n el 85% de la nota</p> </li> <li> <p>L'\u00fas d'eines de Intel\u00b7lig\u00e8ncia Artificial (ChatGPT, Copilot o similat) est\u00e0 terminatment prohibit en la elaboraci\u00f3 de pr\u00e0ctiques i examens. La detecci\u00f3 o sospita raonable de qualssel \u00fas implica un zero en dita pr\u00e0ctica i/o examen.</p> </li> </ul> <p>Per a aprovar l'assignatura, podr\u00e0s fer-ho de 3 maneres distintes:</p> <p>A. Avaluaci\u00f3 cont\u00ednua</p> <p>Al llarg del curs l'alumnat anir\u00e0 presentant els treballs obligatoris i examinant-se de cadascuna de les avaluacions.</p> <p>Per poder examinar-se del m\u00f2dul en cada avaluaci\u00f3, caldr\u00e0 haver presentat els exercicis obligatoris i haver-los aprovat.</p> <p>Nota avaluaci\u00f3: 5% participaci\u00f3 + 10% nota pr\u00e0ctiques +  85% nota ex\u00e0mens</p> <p>Consideracions:</p> Text Only<pre><code>- Cal haver entregat totes les pr\u00e0ctiques i activitats obligat\u00f2ries\n- Cal haver tret almenys un 4 en cada examen per a fer mitja\n</code></pre> <p>NO hi han examens de recuperaci\u00f3 parcial de cada tema/bloc tem\u00e0tic. Al final de curs es faran les recuperacions pertinents de cada avaluaci\u00f3 suspesa.</p> <p>Si a final de curs l'alumne o alumna ha aprovat l'avaluaci\u00f3 cont\u00ednua (ha presentat tots els treballs i ha aprovat les 3 avaluacios al llarg del curs), no caldr\u00e0 que es presente a la convocat\u00f2ria ordin\u00e0ria ni extraordin\u00e0ria.</p> <p>B. Convocat\u00f2ria ordin\u00e0ria (principis de juny habitualment)</p> <p>2 possibles opcions:</p> <ol> <li>Si un alumne o alumna no ha aprovat alguna avaluaci\u00f3, abans de la convocat\u00f2ria de juny haur\u00e0 de lliurar els treballs que li falten i nom\u00e9s s'examinar\u00e0 de la part suspesa en l'avaluaci\u00f3 cont\u00ednua al llarg del curs.</li> <li>Independentment de l'assist\u00e8ncia a classe i dels treballs lliurats, un alumne o alumna podr\u00e0 examinar-se en la convocat\u00f2ria ordin\u00e0ria, per\u00f2 de tot el curs sencer. La nota d'aquest examen ser\u00e0 la nota final del curs</li> </ol> <p>C. Convocat\u00f2ria extraordin\u00e0ria (finals de juny habitualment)</p> <p>Qui no haja aprovat el curs ni en l'avaluaci\u00f3 cont\u00ednua ni en l'ordin\u00e0ria de juny, hauria d'anar a la convocat\u00f2ria extraordin\u00e0ria amb tot el temari de l'assignatura (encara que haguera aprovat alguna avaluaci\u00f3).</p> <p>Professor: Paco Galera</p> <p>Com que el cicle \u00e9s semipresencial, no es requerir\u00e0 l'assist\u00e8ncia a les tutories col\u00b7lectives, encara que s\u00f3n recomanades.</p> <p>Els ex\u00e0mens seran presencials.</p> <p>Hi ha tres formes d'aprovar l'assignatura:</p> <p>A. Avaluaci\u00f3 cont\u00ednua</p> <p>Al llarg del curs l'alumnat anir\u00e0 presentant els treballs i examinant-se de cadascuna de les avaluacions.</p> <p>Per poder examinar-se del m\u00f2dul en cada avaluaci\u00f3, caldr\u00e0 haver presentat els exercicis obligatoris i haver-los aprovat.</p> <p>Nota avaluaci\u00f3: 80% nota ex\u00e0men + 20% nota pr\u00e0ctiques</p> <p>Es podran fer proves per a comprovar que les pr\u00e0ctiques i/o l'examen no han sigut copiats total o parcialment (d'alg\u00fa o usant eines com ChatGPT o similar). Si es detecta que est\u00e0 copiat, es qualificaria l'avaluaci\u00f3 amb un 0.</p> <p>No hi haur\u00e0 ex\u00e0mens de recuperaci\u00f3 en cada trimestre, sin\u00f3 que a juny es recuperaria cada avaluaci\u00f3 suspesa, presentant, si calguera, els treballs obligatoris dels trimestres corresponents.</p> <p>Si a final de curs l'alumne o alumna ha aprovat l'avaluaci\u00f3 cont\u00ednua (ha presentat tots els treballs i ha aprovat les 3 avaluacios al llarg del curs), no caldr\u00e0 que es presente a la convocat\u00f2ria ordin\u00e0ria ni extraordin\u00e0ria.</p> <p>B. Convocat\u00f2ria ordin\u00e0ria (principis de juny habitualment)</p> <p>2 possibles opcions:</p> <p>a. Si un alumne o alumna no ha aprovat alguna avaluaci\u00f3, abans de la convocat\u00f2ria de juny haur\u00e0 de lliurar els treballs que li falten i nom\u00e9s s'examinar\u00e0 de la part suspesa en l'avaluaci\u00f3 cont\u00ednua al llarg del curs.</p> <p>b. Independentment de l'assist\u00e8ncia a classe i dels treballs lliurats, un alumne o alumna podr\u00e0 examinar-se en la convocat\u00f2ria ordin\u00e0ria, per\u00f2 de tot el curs sencer.</p> <p>C. Convocat\u00f2ria extraordin\u00e0ria (finals de juny habitualment)</p> <p>Qui no haja aprovat el curs ni en l'avaluaci\u00f3 cont\u00ednua ni en l'ordin\u00e0ria de juny, hauria d'anar a la convocat\u00f2ria extraordin\u00e0ria amb tot el temari de l'assignatura (encara que haguera aprovat alguna avaluaci\u00f3).</p>"},{"location":"PRG01/","title":"UD1. Dades simples. Instruccions seq\u00fcencials","text":""},{"location":"PRG01/#1-introduccio","title":"1. Introducci\u00f3","text":"<p>Un programa \u00e9s una seq\u00fc\u00e8ncia d\u2019instruccions que manipulen unes dades per a obtindre uns resultats.</p> <p>Eixes instruccions s\u00f3n ordres que li fem a l\u2019ordinador. Per a aix\u00f2 cal dir-li-ho en el llenguatge que ent\u00e9n, que \u00e9s el llenguatge m\u00e0quina, compost per seq\u00fc\u00e8ncies de 0s i 1s, igual que tota la informaci\u00f3 que es guarda en un ordinador (n\u00fameros, text, fotos, m\u00fasica, jocs, pel\u00b7l\u00edcules...):</p> <p>Per\u00f2 com per a nosaltres (els humans) ens resulta molt dif\u00edcil, li ho direm en altre llenguatge. Comen\u00e7arem amb Python i m\u00e9s avant vorem Java.</p> <p>En este tema vorem les dades que s\u00f3n manipulades pels programes.</p>"},{"location":"PRG01/#2-dades-simples","title":"2. Dades simples","text":"<p>Una dada \u00e9s qualsevol informaci\u00f3 amb la qual treballa un algorisme.</p> <p>Cada dada \u00e9s d'un tipus determinat que, b\u00e0sicament, ser\u00e0 enter, real, car\u00e0cter o l\u00f2gic, per\u00f2 que dependr\u00e0 del llenguatge de programaci\u00f3 en qu\u00e8 estem treballant.</p> <p>Les dades apareixen en un programa en una de les seg\u00fcents formes:</p> <ul> <li>variables</li> <li>constants (simb\u00f2liques i literals)</li> </ul>"},{"location":"PRG01/#21-variables","title":"2.1. Variables","text":"<p>Una variable \u00e9s un lloc on podem guardar una dada.</p> <p></p> <p>La imatge representa la variable edat, que guarda el valor 17. Cada variable es caracteritza per tindre:</p> <ul> <li>Un nom (edat) i un tipus (enter), que s'han d'especificar quan es defineix la variable en un programa, amb una instrucci\u00f3 declarativa (encara que hi ha llenguatges, com Python, que no cal indicar el tipus).</li> <li>Un valor (17), que li s'assignar\u00e0 en alguna instrucci\u00f3 d'assignaci\u00f3 (o b\u00e9 en la mateixa instrucci\u00f3 declarativa) i que podr\u00e0 ser canviat per altre valor les voltes que calga.</li> </ul> <p>Les variables s'emmagatzemen a la mem\u00f2ria RAM, de forma que:</p> <p></p> <ul> <li>El nom (edat) representa l'adre\u00e7a de la RAM on est\u00e0 el valor.</li> <li>El tipus (enter) especifica la quantitat de bytes necessaris per guardar un valor (4).</li> <li>El valor \u00e9s el contingut (17).</li> </ul> Exemple<pre><code>// instrucci\u00f3 declarativa\nint edat; // Definim una variable, de nom 'edat' i de tipus 'enter'     \n\n// instruccions d'assignaci\u00f3\nedat = 17;          // Donem valor '17' a la variable edat\nllig(edat);         // Assignem per teclat un valor a edat. Per exemple 19\nedat = edat + 3;    // Tornem a canviar el valor. Ara valdr\u00e0 22\nedat = 23.5;        // ERROR! Per qu\u00e8?\n\n// utilitzaci\u00f3 de la variable\nescriu(edat);       // Escrivim en pantalla el valor de la variable edat\n</code></pre> <p>Nota</p> <p>M\u00e9s endavant veurem estes instruccions detalladament</p>"},{"location":"PRG01/#22-constants","title":"2.2. Constants","text":"<p>Una constant \u00e9s com una variable per\u00f2 que el valor no canvia durant l'execuci\u00f3 del programa.</p> <p>Les constants poden apar\u00e9ixer en forma de literals o b\u00e9 amb nom (constants simb\u00f2liques):</p> SIMB\u00d2LIQUES LITERALS MAX_EDAT 99 PI 3.1416 VALOR_EURO 166.386 NOM_INSTITUT \"Jaume II el Just\" CICLES_INFORMATICA true MAJORIA_EDAT 18 <p>Les constants simb\u00f2liques, igual que les variables, tenen un valor concret que se li d\u00f3na al principi del programa per\u00f2, com ja hem dit, no poden canviar de valor.</p> <p>Les constants literals alfanum\u00e8riques han d'expressar-se tancades entre cometes.</p>"},{"location":"PRG01/#3-expressions","title":"3. Expressions","text":"<p>Les constants i variables no apareixen a\u00efllades, sin\u00f3 formant part d'expressions. Una expressi\u00f3 \u00e9s un c\u00e0lcul necessari per a obtindre un resultat.</p> <p>Una expressi\u00f3 \u00e9s una combinaci\u00f3 d'operands units mitjan\u00e7ant operadors.</p> <ul> <li>Els operands poden ser de diferents tipus:<ul> <li>Literals: \"Jaume II el Just\", 100</li> <li>Constants: PI</li> <li>Variables: edat</li> <li>Funcions: arrel(100), longitut(nom)</li> </ul> </li> <li>Els operadors els vorem en altre apartat</li> </ul> Exemples d'expressions <ul> <li> <p>Num\u00e8riques:</p> <ul> <li>edat</li> <li>5</li> <li>2 * PI * quadrat(radi)</li> <li>(-b+arrel(quadrat(b)-(4ac)))/(2*a)</li> </ul> </li> <li> <p>Alfanum\u00e8riques:</p> <ul> <li>\"Neus\"</li> <li>\"Miquel\" + \"Garcia\" + \"Marqu\u00e9s\"</li> </ul> </li> <li> <p>L\u00f2giques:</p> <ul> <li>true</li> <li>false</li> <li>valor1 &lt; valor2</li> <li>(valor1 &lt; valor2)&amp;&amp;(valor2 &lt;valor3)</li> </ul> </li> </ul>"},{"location":"PRG01/#4-operadors","title":"4. Operadors","text":"<p>S\u00f3n els s\u00edmbols de les operacions amb els quals es construeixen les expressions.</p> <p>Depenent del tipus de dades dels operands o del tipus del resultat, tenim uns tipus d'operadors: aritm\u00e8tics, l\u00f2gics, relacionals i alfanum\u00e8rics.</p>"},{"location":"PRG01/#41-operadors-aritmetics","title":"4.1. Operadors aritm\u00e8tics","text":"<p>S\u00f3n les operacions matem\u00e0tiques. Les variables o constants que hi intervenen s\u00f3n num\u00e8riques (enters o reals) i el resultat tamb\u00e9. Els m\u00e9s usuals s\u00f3n:</p> OPERADOR SIGNIFICAT ^ Exponenciaci\u00f3 * Producte / Divisi\u00f3 % Residu de divisi\u00f3 entera + Suma - Resta"},{"location":"PRG01/#411-regles-de-prioritat","title":"4.1.1. Regles de prioritat","text":"<p>Les expressions que tenen 2 o m\u00e9s operands necessiten unes regles que permeten determinar en quin ordre s'avaluen. Per exemple, si escrivim <code>escriu(2*5-3);</code> qu\u00e8 mostrar\u00e0? 7 o 4? La resposta \u00e9s 7, ja que les regles de prioritat indiquen que l'operador del producte t\u00e9 m\u00e9s prioritat que el de la resta, com veiem a la taula:</p> OPERADOR PRIORITAT ^ ALTA *  /  % | +  - BAIXA <p>Si dos operadors d'igual prioritat coincideixen en una mateixa expressi\u00f3, s'avaluen d'esquerra a dreta. Per\u00f2 si volgu\u00e8rem canviar l'ordre d'avaluaci\u00f3 en una expressi\u00f3, utilitzarem els par\u00e8ntesi necessaris. A banda, \u00e9s recomanable l'\u00fas de par\u00e8ntesis davant del dubte.</p>"},{"location":"PRG01/#42-operadors-relacionals","title":"4.2. Operadors relacionals","text":"<p>Serveixen per a comparar 2 expressions, retornant un valor l\u00f2gic: vertader o fals.</p> OPERADOR SIGNIFICAT &lt; Menor &gt; Major == Igual != Distint &lt;= Menor o igual &gt;= Major o igual Exemples d'expressions l\u00f2giques <p>Si x = 10 i y = 20:</p> EXPRESSI\u00d3 VALOR (x + y) &lt; 20 false (y - x) &lt;= x true (y - x) &gt;= x true x == y false x != y true 'c' &lt; 'f' true * <p>* Tamb\u00e9 podem comparar car\u00e0cters (van entre cometes)</p>"},{"location":"PRG01/#43-operadors-logics","title":"4.3. Operadors l\u00f2gics","text":"<p>Els operadors l\u00f2gics s\u00f3n NO, I i O. Per\u00f2 per seguir la nomenclatura est\u00e0ndard dels algorismes utilitzarem els noms anglesos: NOT, AND i OR. Act\u00faen sobre operands o expressions l\u00f2giques i el resultat tamb\u00e9 \u00e9s un valor l\u00f2gic, que ve donat per les corresponents taules de veritat*, on V \u00e9s Vertader (true) i F \u00e9s Fals (false):</p> x NOT x F V V F x y x AND y F F F F V F V F F V V V x y x OR y F F F F V V V F V V V V Exemples <p><code>NOT (3 &lt; 5)</code> -&gt; F</p> <p><code>(3 &lt; 5) AND (4 &lt; 2)</code> -&gt; F</p> <p><code>(3 &lt; 5) OR (4 &lt; 2)</code> -&gt; V</p> <p>Expressions sin\u00f2nimes</p> NOT(a &lt; b) a &gt;= b NOT(a &lt;= b) a &gt; b NOT(a + b == 0) a + b != 0 Compte! No canvien els operandors aritm\u00e8tics NOT(true) false NOT(false) true NOT(jubilat == true) NOT(jubilat) jubilat == false NOT(jubilat == false) jubiat == true jubilat"},{"location":"PRG01/#431-lleis-de-de-morgan","title":"4.3.1. Lleis de De Morgan","text":"<p>S\u00f3n regles que permeten transformar expressions l\u00f2giques en altres equivalents. S\u00f3n molt \u00fatils per a simplificar expressions condicionals. Concretament, transformen expressions formades amb un NOT sobre alguna expressi\u00f3 que t\u00e9 dins algun AND, OR o NOT.</p>"},{"location":"PRG01/#4311-1a-llei-de-de-morgan","title":"4.3.1.1. 1a llei de De Morgan","text":"<p><code>NOT(A AND B)</code> \u00e9s equivalent a <code>NOT(A) OR NOT(B)</code></p> Exemple <p>Si A \u00e9s Plou, i B \u00e9s Fa fred:</p> <p><code>NOT(A AND B)</code> significa No \u00e9s cert que ploga i fa\u00e7a fred alhora. Aix\u00f2, segons esta llei, \u00e9s equivalent a dir: <code>NOT(A) OR NOT(B)</code>, que significa No plou o no fa fred. Veiem-ho d'una altra forma, amb les variables plou i fred:</p> <p><code>NOT(plou AND fred) -&gt; NOT(plou) OR NOT(fred)</code></p> <p>\u00c9s a dir, tinguen els valors que tinguen plou i fred (verdader o fals), sempre tindrem el mateix resultat en les 2 expressions equivalents. Comprovem-ho amb la taula de veritat:</p> p(plou) f(fred) p AND f NOT(p AND f) NOT(p) NOT(f) NOT(p) OR NOT(f) V V V F F F F V F F V F V V F V F V V F V F F F V V V V"},{"location":"PRG01/#4312-2a-llei-de-de-morgan","title":"4.3.1.2. 2a llei de De Morgan","text":"<p><code>NOT(A OR B)</code> \u00e9s equivalent a <code>NOT(A) AND NOT(B)</code></p> Exemple <p>Si A \u00e9s Plou, i B \u00e9s Fa fred:</p> <p><code>NOT(A OR B)</code> significa No \u00e9s cert que: ploga o fa\u00e7ca fred. Aix\u00f2, segons esta llei, \u00e9s equivalent a dir: <code>NOT(A) AND NOT(B)</code>, que significa No plou i no fa fred. Veiem-ho ara amb les variables plou i fred:</p> <p><code>NOT(plou OR fred) -&gt; NOT(plou) AND NOT(fred)</code></p> <p>\u00c9s a dir, tinguen els valors que tinguen plou i fred (verdader o fals), sempre tindrem el mateix resultat en les 2 expressions equivalents. Comprovem-ho amb la taula de veritat:</p> p(plou) f(fred) p OR f NOT(p OR f) NOT(p) NOT(f) NOT(p) AND NOT(f) V V V F F F F V F V F F V F F V V F V F F F F F V V V V"},{"location":"PRG01/#4313-3a-llei-de-de-morgan","title":"4.3.1.3. 3a llei de De Morgan","text":"<p><code>NOT(NOT(A))</code> \u00e9s equivalent a <code>A</code></p> Exemple <p>Dir que No \u00e9s cert que no plou \u00e9s el mateix que dir que plou.</p> <p>Com aplicar estes lleis quan el NOT act\u00faa sobre m\u00e9s d'un operador l\u00f2gic?</p> <p>Per exemple:</p> <p><code>NOT(plou AND NOT(fred) AND sol AND humitat)</code></p> <p>Caldria:</p> <ul> <li>Llevar el NOT que abarca tota l'expressi\u00f3.</li> <li>Canviar els AND per OR i al rev\u00e9s.</li> <li>Posar un NOT a cada part.</li> </ul> <p>\u00c9s a dir:</p> <p><code>(NOT(plou) OR NOT(NOT(fred)) OR NOT(sol) OR NOT(humanitat))</code></p> <p>I, aplicant la llei de la doble negaci\u00f3, quedaria:</p> <p><code>NOT(plou) OR fred OR NOT(sol) OR NOT(humitat)</code></p> <p>Compte! Si en l'expressi\u00f3 que abarca el NOT hi ha ORs i ANDs (les 2 coses alhora), cal anar en compte en transformaci\u00f3, ja que, com anem a vore a continuaci\u00f3, l'AND \u00e9s m\u00e9s prioritari que l'OR. La soluci\u00f3 seria, abans de fer la transformaci\u00f3, posar els par\u00e8ntesis que calguen, i despr\u00e9s ja fer la transformaci\u00f3 conservant els par\u00e8ntesis.</p> <p>Per exemple, si tenim:</p> <p><code>NOT(plou AND fred OR sol)</code></p> <p>Primer posarem par\u00e8ntesis per tindre una soluci\u00f3 equivalent. Com l'AND \u00e9s m\u00e9s prioritari que l'OR, posarem els par\u00e9ntesi aix\u00ed:</p> <p><code>NOT((plou AND fred) OR sol)</code></p> <p>Ara ja apliquem les lleis de De Morgan, conservant els par\u00e8ntesis de dins:</p> <p><code>(NOT(plou) OR NOT(fred)) AND NOT(sol)</code></p>"},{"location":"PRG01/#432-regles-de-prioritat","title":"4.3.2. Regles de prioritat","text":"<p>Com els operadors l\u00f2gics i relacionals poden formar expressions juntament amb els aritm\u00e8tics, tamb\u00e9 necessitem unes regles de prioritat per a saber quins operadors s'avaluen primer.</p> OPERADOR PRIORITAT NOT ALTA ^ | *, /, % | +, - | &lt;, &gt;, &lt;=, &gt;= | ==, != | AND V OR BAIXA <p>Estes regles s\u00f3n bastant est\u00e0ndards per\u00f2 podria dependre de cada llenguatge de programaci\u00f3.</p> <p>No obstant, davant el dubte, sempre podem (i devem) emprar els par\u00e8ntesis.</p>"},{"location":"PRG01/#5-funcions","title":"5. Funcions","text":"<p>S\u00f3n trossos de codi que podem utilitzar en els nostres programes. Hi ha de 2 tipus: predefinides i definides per l'usuari.</p>"},{"location":"PRG01/#51-funcions-predefinides","title":"5.1. Funcions predefinides","text":"<p>Els llenguatges de programaci\u00f3 tenen funcions predefinides amb les quals podem dur a terme les tasques m\u00e9s usuals. Les funcions (igual que en les de les matem\u00e0tiques) solen rebre un o m\u00e9s arguments i retornen un valor que anoomenem resultat.</p> <p>Per exemple, per a mostrar coses per pantalla tenim:</p> <ul> <li><code>printf(\"Hola\");</code> en llenguatge C</li> <li><code>System.out.println(\"Hola\");</code> en llenguatge Java</li> <li><code>escriu(\"Hola\")</code> forma que emprarem en algorismes</li> </ul>"},{"location":"PRG01/#52-funcions-definides-per-lusuari","title":"5.2. Funcions definides per l'usuari","text":"<p>Podem crear funcions i usar-les en diferens parts del programa:</p> Exemple de funci\u00f3<pre><code>    Programa principal{\n        escriu(\"L'\u00e0rea del  triangle de base 2 i altura 4 \u00e9s:\");\n        area = areaTriangle(2, 4);\n        escriu(area);\n        escriu(\"L'\u00e0rea del triangle de base 3 i altura 6 \u00e9s:\" + areaTriangle(3, 6));\n    }\n\n    // -------------------------------------------------\n\n    funci\u00f3 areaTriangle(base: enter, altura: enter){\n        area real;\n        area = base * altura / 2;\n        retorna area;\n    }\n</code></pre> <p>Ja vorem en detall l'\u00fas de funcions m\u00e9s endavat...</p>"},{"location":"PRG01/#6-activitats","title":"6. Activitats","text":"Activitat 1 <p>Calcula el valor de cada expressi\u00f3 si \u00e9s v\u00e0lida. Si no \u00e9s v\u00e0lida, indica el motiu.</p> <p>a. 10 * 3 + 5 * 2</p> <p>b. 15 % 4</p> <p>c. 2 + 7 / 3</p> <p>d. 4 + \"preu\"</p> <p>e. (5 + 2) &lt; 8</p> <p>f. 4 &gt;= 4</p> <p>g. true OR false</p> <p>h. 5 OR (2 &lt; 3)</p> <p>i. (6 &gt;= 2) OR (3 &lt;= 5)</p> <p>j. NOT(NOT(NOT(4 &lt; 10)))</p> <p>k. 4 + false</p> <p>l. 4 + 2 * 4 / 2</p> <p>m. ((5 &lt; 0) AND (6 &gt;= 7)) OR (45 % 5 &lt;= 0)</p> <p>n. ((10 - 4) &gt; 0) OR true</p> <p>o. ((10 - 4) &lt; 0) OR true</p> Activitat 2 <p>Donats els seg\u00fcents valors de les variables X = 1, Y = 4, Z = 10 i la constant PI = 3.14, avalua les expressions seg\u00fcents:</p> <p>a. <code>2 * X + 0.5 * Y - 1 / 5 * Z</code></p> <p>b. <code>((PI * X ^ 2) &gt; Y) OR ((2 * PI * X) &lt;= Z)</code></p> <p>c. <code>\"Hola, m\u00f3n!\" == \"Hola,\" + \"m\u00f3n!\"</code></p> <p>d. <code>'a' == 'A'</code></p> Activitat 3 <p>Construeix expressions correctes per a les f\u00f3rmules seg\u00fcents:</p> <p></p> Activitat 4 <p>A partir de les seg\u00fcents constants:</p> <ul> <li>gran = fals</li> <li>red\u00f3 = cert</li> <li>suau = fals</li> </ul> <p>...indica quin ser\u00e0 el valor de les seg\u00fcents expressions:</p> <p>a. gran i red\u00f3 i suau;</p> <p>b. gran o red\u00f3 o suau;</p> <p>c. gran i red\u00f3 o suau;</p> <p>d. gran o red\u00f3 i suau;</p> <p>e. gran i (red\u00f3 o suau);</p> <p>f. (gran o red\u00f3) i suau;</p> Activitat 5 <p>Indica amb par\u00e8ntesis l'ordre en qu\u00e8 l'ordinador executaria les diferents operacions:</p> <p>a. x + y + z</p> <p>b. x * y + z</p> <p>c. x + y * z</p> <p>d. x - y * z</p> <p>e. x + y / z</p> <p>f. x * y / z</p> <p>g. x / y / z</p> <p>h. x / y * y + x % y</p> <p>i. x / y + z + x</p> Activitat 6 <p>Tranforma les seg\u00fcents expressions en altres equivalents utilitzant les lleis de De Morgan. Cal tindre en compte que a, b, c s\u00f3n variables enteres i p, q, r s\u00f3n variables booleanes (l\u00f2giques).</p> <p>a. <code>NOT((p AND q) OR r)</code></p> <p>b. <code>NOT((a == b) OR (a == 0))</code></p> <p>c. <code>NOT(NOT p OR NOT q OR (a == b + c))</code></p> <p>d. <code>NOT(p AND (q OR r))</code></p> <p>e. <code>NOT((a &lt; b) AND (b &lt; c))</code></p> <p>f. <code>NOT(NOT p AND q OR NOT r)</code></p> <p>g. <code>NOT(NOT(a != b) OR (a + b == 7))</code></p> <p>h. <code>NOT((a / b == 0) OR (a == c))</code></p> Activitat 7 <p>Donats els valors inicials de les seg\u00fcents variables enteres i l\u00f2giques:</p> <p><code>a = 3; b = 5; c = 7; p = cert; q = fals;</code></p> <p>... indica els valors que tindran estes variables despr\u00e9s de les seg\u00fcents assignacions.</p> <p>NOTA: en cada apartat es tindr\u00e0 en compte els canvis de les variables dels apartats anteriors.</p> <p>a. <code>a = 3 * b</code></p> <p>b. <code>b = a + c</code></p> <p>c. <code>p = p and (c &gt; b)</code></p> <p>d. <code>q = p or q</code></p> <p>e. <code>r = a == b</code></p> <p>f. <code>a = a + 1</code></p> <p>g. <code>b = b - 2</code></p> <p>h. <code>a = a</code></p> <p>i. <code>b = b / 2 + c % 3</code></p> Activitat 8 <p>Sent a, b, c i d variables num\u00e8riques, escriu l'expressi\u00f3 l\u00f2gica corresponent a:</p> <p>a. Els valors de b i c s\u00f3n tots dos superiors al valor de d</p> <p>b. a, b i c s\u00f3n id\u00e8ntics</p> <p>c. a, b i c s\u00f3n id\u00e8ntics per\u00f2 diferents de d</p> <p>d. b est\u00e0 compr\u00e9s, estrictament, entre els valors de a i c</p> <p>e. b est\u00e0 comrpr\u00e9s, estrictament, entre els valors de a i c, i el valor de a \u00e9s m\u00e9s xicotet que el valor de c</p> <p>f. Hi ha, com a m\u00ednim, dos valors id\u00e8ntics entre a, b i c</p> <p>g. Hi ha dos valors id\u00e8ntics entre a, b i c, i nom\u00e9s dos</p> <p>h. Hi ha, com a m\u00e0xim, dos valors id\u00e8ntics entre a, b i c</p> Activitat 9 <p>Escriu l'expressi\u00f3 algor\u00edsmica de les seg\u00fcents expressions:</p> <p>a. Avaluar si el contingut d'una variable num\u00e8rica \u00e9s divisible per 10 o per 7</p> <p>b. Avaluar si una variable preu no \u00e9s menor de 100\u20ac ni major de 200\u20ac</p> Activitat 10 <p>Si DN, MN, AN representen el dia, mes i any d'una persona i DA, MA, AA el dia, mes i any actuals, expresssa amb una expressi\u00f3 si la persona ha complit 18 anys.</p> Activitat 11 <p>En un algorisme que analitza els resultats d'ex\u00e0mens, hi ha 5 variables definides:</p> Java<pre><code>char opcio;             // Tipus d'alumne: (C)i\u00e8ncies o (L)letres\nint nl, nv, nm, nf;     // Notes de literatura, valenci\u00e0, mate i f\u00edsica d'un alumne\n</code></pre> <p>Totes les notes estan calculades sobre 10 i tenen el mateix pes per a fer la mitjana.</p> <p>Escriu les expressions l\u00f2giques corresponents a:</p> <p>a. La mitjana de les quatre notes \u00e9s superior a 5</p> <p>b. Les notes de mate i valenci\u00e0 s\u00f3n superiors a la mitjana de les quatre notes</p> <p>c. Hi ha, com a m\u00ednim, una nota superior a 5</p> <p>d. Totes les notes s\u00f3n superiors a 5</p> <p>e. La mitjana de les quatre notes \u00e9s superior o igual a 5, i la mitjana de les notes de l'opci\u00f3 que ha agafat l'alumne tamb\u00e9</p>"},{"location":"PRG02/","title":"UD2. Programaci\u00f3 estructurada. Disseny d'algorismes en Python","text":""},{"location":"PRG02/#1-concepte-de-programacio-estructurada","title":"1. Concepte de programaci\u00f3 estructurada","text":"<p>\u00c9s unconjunt de t\u00e8cniques de programaci\u00f3 que incorporen:</p> <ul> <li>Disseny descendent: t\u00e8cnica consistent en descompondre successivament accions complexes en accions m\u00e9s simples. Divideix i vencer\u00e0s. Funcions.</li> <li>Estructures de control: descriuen el flux d'execuci\u00f3 d'una successi\u00f3 d'accions:<ul> <li>Seq\u00fcencial: s'executen les ordres de dalt cap a baix.</li> <li>Bifurcaci\u00f3: executar un o altre conjunt d'instruccions, depenent d'alguna condici\u00f3.</li> <li>Repetici\u00f3 (o bucle): repetir un conjunt d'instruccions mentre es complisca una condici\u00f3.</li> </ul> </li> </ul>"},{"location":"PRG02/#2-algorismes","title":"2. Algorismes","text":"<p>Igual que abans de fer una casa conv\u00e9 primer fer els pl\u00e0nols, per a fer un programa (mitjanament llarg) cal descriure els passos a fer, independentment del llenguatge de programaci\u00f3 que es vol utilitzar. Eixe conjunt de passos vindria a ser l'algorisme. Veiem una definici\u00f3 formal.</p>"},{"location":"PRG02/#21-que-es-un-algorisme","title":"2.1. Qu\u00e8 \u00e9s un algorisme?","text":"<p>\u00c9s una descripci\u00f3 clara i no ambigua de les accions necess\u00e0ries per a solucionar un problema en un ordre determinat. \u00c9s com un programa per\u00f2 no est\u00e0 escrit en cap llenguatge de programaci\u00f3 en concret. Serveix per a indicar els distints passos que ha de tindre el programa sense entrar en detall.</p>"},{"location":"PRG02/#22-quins-elements-te-un-algorisme","title":"2.2. Quins elements t\u00e9 un algorisme?","text":"<ul> <li>Instruccions: d'entrada, d'eixida i d'assignaci\u00f3.</li> <li>Estructures de control: bifurcacions i repeticions.</li> </ul>"},{"location":"PRG02/#23-com-es-fa-un-algorisme","title":"2.3. Com es fa un algorisme?","text":"<p>Per expressar un algorisme es poden utilitzar diverses metodologies. Estes s\u00f3n les m\u00e9s comunes:</p> <ul> <li>Llenguatge natural o informal: com en una recepta de cuina.</li> <li>Pseudocodi: combinaci\u00f3 entre llenguatge natural i llenguatge de programaci\u00f3.</li> <li>Ordinograma (diagrama de flux): representaci\u00f3 gr\u00e0fica on hi ha uns s\u00edmbols (accions) units per fletxes (que indiquen l'ordre d'execuci\u00f3).</li> </ul> Exemple <p>Volem fer un programa que calcule l'\u00e0rea d'un cercle a partir del radi que s'introduir\u00e0 per teclat (si el radi no \u00e9s negatiu).</p> <p>Independentment del llenguatge que utilitzarem, podem descriure els passos que caldria fer. Veiem com seria l'algorisme en cadascuna de les 3 metodologies:</p> <p>LLENGUATGE NATURAL O INFORMAL:</p> <ol> <li>Demanar el radi per teclat.</li> <li>Si el radi \u00e9s positiu, calcular l'\u00e0rea i mostrar-la.</li> <li>Si no, mostrar un missatge d'error.</li> </ol> <p>PSEUDOCODI:</p> <pre><code>Algortimo areaCercleOK\n    Escribir \"Dis-me el radi:\"\n    Leer radi\n    si radi &gt; 0 Entonces\n        area = 3.14 * radi * radi\n        Escribir \"Area = \", area\n    Sino\n        Escribir \"Radi incorrecte\"\n    FinSi\nFinAlgoritmo\n</code></pre> <p>Podem usar qualsevol altre nom per a les accions (en compte d'escribir, leer, etc...)</p> <p>Per\u00f2 ac\u00ed s'han usat eixos noms perqu\u00e8 \u00e9s la sintaxi que usa l'aplicaci\u00f3 Pseint (pseudo int\u00e8rpret d'algorismes), on podrem executar els algorismes (per si volgu\u00e9rem comprovar-ne el resultat).</p> <p>PSEINT</p> <p>ORDINOGRAMA (DIAGRAMA DE FLUX):</p> <p></p> <p>Amb PSeInt podem construir f\u00e0cilment este ordinograma a base d'anar posant eixes \"caixetes\". Tamb\u00e9 podrem executar-lo.</p> <p>PSeInt tamb\u00e9 permet convertir un ordinograma a pseudocodi (o un pseudocodi a ordinograma). I tamb\u00e9 podem exportar l'algorisme a un fitxer en Python a altre llenguatge.</p>"},{"location":"PRG02/#24-qualitat-dun-algorisme","title":"2.4. Qualitat d'un algorisme","text":"<p>Per a resoldre un problema determinat hi pot haver infinitat d'algorismes. La qualitat d'un algorisme dep\u00e9n de:</p> <ul> <li>Correctesa: l'algorisme ha de produir el resultat correcte per a tots els inputs possibles.</li> <li>Efici\u00e8ncia: cal minimitzar els recursos de temps i mem\u00f2ria. Sobretot per a dades d'entrada \"grans\".</li> <li>Senzillesa: l'algorisme ha de ser el m\u00e9s senzill possible, sempre que siga f\u00e0cil d'entendre i modificar.</li> </ul> <p>Estes qualitats ajuden a assegurar que un algorisme no nom\u00e9s resol el problema plantejat, sin\u00f3 que tamb\u00e9 ho fa de manera fiable, eficient i clara.</p>"},{"location":"PRG02/#3-elements-dun-algorisme","title":"3. Elements d'un algorisme","text":"<p>Els elements d'un algorisme s\u00f3n un conjunt d'instruccions, de diferents tipus:</p> <ul> <li>Instruccions d'entrada i d'eixida: per a interaccionar amb l'usuari (introduir dades al programa o que aquest mostre resultats).</li> <li>Instruccions d'assignaci\u00f3: per a decidir si s'executen un conjunt d'instruccions o unes altres.</li> <li>Instruccions de bifurcaci\u00f3: per a decidir si s'executen un conjunt d'instruccions o unes altres.</li> <li>Instruccions de repetici\u00f3: per a repetir un conjunt d'instruccions.</li> </ul> <p>Anem a vore en detall en qu\u00e8 consisteix cadascuna d'aquestes instruccions.</p>"},{"location":"PRG02/#31-instruccions-dentrada-i-deixida","title":"3.1. Instruccions d'entrada i d'eixida","text":"<p>Servixen perqu\u00e8 el programa intercanvie informaci\u00f3 amb un medi extern (generalment teclat i pantalla).</p> <ul> <li>Entrada (o lectura): es demana un valor per teclat (o pel ratol\u00ed, o des d'un fitxer o base de dades) per a guardar-lo en una variable (generalment).</li> <li>Eixida (o escriptura): es mostra una dada (una constant o el valor d'una variable o el resultat d'una expressi\u00f3) per pantalla (o per impressora o la deixar\u00e0 en un fitxer o base de dades...).</li> </ul> <p>Per a vore un exemple d'instruccions d'entrada i d'eixida, veiem com podria ser un algorisme que demane per teclat el radi d'una circumfer\u00e8ncia i mostre l'\u00e0rea corresponent.</p> <p></p> <p>Per iniciar-se en la programaci\u00f3, moltes vegades conv\u00e9 fer \u00fas dels ordinogrames (sobretot quan vejam bifurcacions complexes, etc). Per tant, recomanem l'aplicaci\u00f3 del PSeInt per tal de comprovar si l'algorisme funciona.</p> <p>Ara b\u00e9, si volem fer l'algorisme en pseudocodi, quasi que \u00e9s millor fer-ho ja en un llenguatge de programaci\u00f3 que s'utilitze (no t\u00e9 sentit aprendre la sintaxi del PSeInt).</p> <p>Per tant, anirem veient els distints elements en ordinograma i en Python.</p> <p>Veiem com podria ser la implementaci\u00f3 en Python d'este algorisme que hem vist:</p> Python<pre><code>print (\"Dis-me el radi: \")  #(1)!\nradi = int(input()) #(2)!\nprint(\"\u00c0rea: \", 3.14 * radi * radi) #(3)!\n</code></pre> <ol> <li>Mostra la pantalla</li> <li>Llig text, els converteix a enter i el guarda en la variable 'radi'</li> <li>Mostra el text \"Area\" i el resultat del c\u00e0lcul</li> </ol> <p>Una altra forma:</p> Python<pre><code>import math #(1)!\nradi = int(input(\"Dis-me el radi: \")) #(2)! \nprint(\"\u00c0rea: \", math.pi * radi ** 2) #(3)!\n</code></pre> <ol> <li>Importem la llibreria per a usar un valor de pi m\u00e9s aproximat</li> <li>Mostra text, llig valor per teclat, el converteix a enter i el guarda en 'radi'</li> <li>Mostra el resultat. En Python la pot\u00e8ncia es fa amb **</li> </ol> <p>Nota</p> <ul> <li>Per fer un ordinograma i poder-lo provar podem usar PSeInt:<ul> <li>PSEINT</li> </ul> </li> <li>Per a programar en local en Python:<ul> <li>THONNY<ul> <li>Es tracta d'un IDE molt senzill per a programar en Python. Ve integrat amb ell el propi Python i amb una \u00fanica instal\u00b7laci\u00f3 podem comen\u00e7ar a crear els nostres primers programes. Recomanat!</li> </ul> </li> </ul> </li> </ul> <p>Al tema seg\u00fcent ja vorem altres alternatives com VSCode.</p> Exercici 1. Instruccions d'entrada i d'eixida <p>Demana 2 n\u00fameros per teclat i mostra la seua suma, resta, multipliaci\u00f3 i dividisi\u00f3. Fes-ho de dues maneres: ordinograma (PSeInt) i en Python (OnlineGDB).</p>"},{"location":"PRG02/#32-instruccions-dassignacio","title":"3.2. Instruccions d'assignaci\u00f3","text":"<p>Una assignaci\u00f3 consisteix en guardar un valor en una variable.</p> <p></p> <p>En la primera instrucci\u00f3 de l'exemple anterior, est\u00e0 posant el valor 5 dins de la variable nota1. En la segona instrucci\u00f3 posa un 7 en la variable nota2. I en la tercera, suma les dos variables, les divideix entre 2 i el resultat el posa dins de la variable notaMitja.</p> <p>\u00c9s a dir, una assignaci\u00f3 consta de 2 parts separades per un operador d'assignaci\u00f3. Sol emprar-se l'operador \"=\" (en PSeInt \u00e9s una fletxa cap a l'esquerra: \"&lt;-\"):</p> <p></p> <p>Cal tindre en compte que les assignacions NO s\u00f3n equacions matem\u00e0tiques.</p> <p>Exemple</p> <p><code>x = x + 1</code> no t'e sentit com a equaci\u00f3 per\u00f2 s\u00ed com a instrucci\u00f3 en un algorisme. \u00c9s el que anomenem un increment de la variable. En eixa instrucci\u00f3 se li assigna a la variable num\u00e8rica x un valor que correspon al valor que tenia abans eixa variable m\u00e9s una unitat.</p> Exercici 2. Instruccions d'assignaci\u00f3 <p>Fes l'algorisme amb un ordinograma o amb Python per a calcular el sou d'un treballador:</p> <ul> <li>Demana per teclat el nom del treballador, la quantitat d'hores que ha treballat i el preu per hora que paga l'empresa.</li> <li>Cal tenir en compte que la retenci\u00f3 aplicada \u00e9s del 15%.</li> <li>Calcula el sou brut (import que paga l'empresa), l'import retingut (import que s'emporta hisenda) i el sou net (import que s'emporta el treballador).</li> <li>Mostra per pantalla el nom del treballador i les dades calculades abans.</li> </ul>"},{"location":"PRG02/#33-instruccions-de-bifurcacio","title":"3.3. Instruccions de bifurcaci\u00f3","text":"<p>Les instruccions de bifurcaci\u00f3 (o selecci\u00f3) serveixen per a quan volem executar un conjunt d'ordres nom\u00e9s si es compleix alguna condici\u00f3 determinada.</p> <p></p> <p>En l'ordinograma podem no posar res en alguna de les 2 branques. En Python \u00e9s opcional la part del else:</p> <p></p> <p>Tamb\u00e9 podem posar instruccions de bifurcaci\u00f3 dins d'altres. \u00c9s a dir: una estructura if dins d'un altre if, o dins d'un altre else.</p> Exercici 3 RESOLT. Instruccions de bifurcaci\u00f3 <p>Fes un programa en Python que calcule l'\u00e0rea d'un rectangle o que mostre un missatge d'error si algun costat no \u00e9s positiu.</p> Python<pre><code>a = int(input(\"Llarg: \"))\nb = int(input(\"Ample: \"))\n\nif (a &lt;= 0 or b &lt;= 0):\n    print(\"Costats incorrectes\")\nelse:\n    area = a * b\n    print(f\"L'\u00e0rea de {a} i {b} \u00e9s {area}\") # Hem fet \u00fas dels \"f-strings\". Ho veurem m\u00e9s avant.\n</code></pre> Exercici 4 RESOLT <p>Fes un algorisme que llisca 2 n\u00fameros i que mostre quin \u00e9s el major; o b\u00e9, si \u00e9s el cas, que diga que s\u00f3n iguals. Fixa't que hi ha un if-else dins d'un else.</p> Python<pre><code>n1 = int(input(\"Dis-me un n\u00famero: \"))\nn2 = int(input(\"Dis-me'n un altre: \"))\n\nif (n1 &gt; n2):\n    print(f\"El major \u00e9s el {n1}\")\nelse:\n    if (n2 &gt; n1):\n        print(f\"El major \u00e9s el {n2}\")\n    else:\n        print(\"S\u00f3n iguals\")\n</code></pre> Exercici 5 <p>Fes un programa en Python per a llegir un n\u00famero de teclat i dir si \u00e9s parell. No s'ha de dir res en cas contrari.</p> Exercici 6 <p>Demanar un n\u00famero i dir si \u00e9s parell o imparell.</p> Exercici 7 <p>Donats dos n\u00fameros, calcular quin \u00e9s el m\u00e9s gran.</p> Exercici 8 <p>Donats 3 n\u00fameros, calcular quin \u00e9s el m\u00e9s gran.</p> Exercici 9 <p>Donats 3 n\u00fameros, calcular quin \u00e9s el m\u00e9s gran i el m\u00e9s menut.</p> Exercici 10 <p>Donats 3 n\u00fameros, calcular quins s\u00f3n els dos m\u00e9s menuts.</p> Exercici 11 <p>Donats 3 n\u00fameros, comprova si poden correspondre a les mesures dels costats d'un triangle.</p> <p>PISTA: La suma dels dos m\u00e9s menuts ha de ser major que el gran.</p> Exercici 12 <p>Transformar una nota num\u00e8rica a la forma: Molt deficient, Insuficient, Suficient, B\u00e9, Notable, Excel\u00b7lent. Tamb\u00e9 cal mostrar error si la nota \u00e9s negativa o &gt;10.</p> Exercici 13 <p>Llegir dos n\u00fameros de teclat i una lletra, que ser\u00e0 el codi d'operaci\u00f3 (Suma, Resta, Multiplicaci\u00f3 o Divisi\u00f3). Caldr\u00e0 mostrar el resultat de l'operaci\u00f3 demanada. Si no s'ha introdu\u00eft un codi d'operaci\u00f3 correcte, cal mostrar un error.</p>"},{"location":"PRG02/#331-instruccions-de-bifurcacio-multiple","title":"3.3.1. Instruccions de bifurcaci\u00f3 m\u00faltiple","text":"<p>En la bifurcaci\u00f3 doble, el programa executava un bloc d'instruccions d'entre 2 possibles, depenent del vaor d'una condici\u00f3. Amb una instrucci\u00f3 de bifurcaci\u00f3 m\u00faltiple, el programa executar\u00e0 un bloc d'entre molts possibles, depenent del valor d'una variable (o expressi\u00f3) entrea (o de tipus car\u00e0cter).</p> <p></p> <p>A l'exemple, si el valor numEstacio \u00e9s 1, s'executar\u00e0 la instrucci\u00f3 (o conjunt d'instruccions) corresponent. Si f\u00f3ra 2, les instruccions del 2, etc. I si no f\u00f3ra ni 1, ni 2, ni 3 , ni 4, s'executaria el bloc d'instruccions de l'apartat De Otro Modo.</p> <p>Ara b\u00e9: la bifurcaci\u00f3 m\u00faltiple de Python no t\u00e9 eixa estructura. En compte de triar el bloc d'instruccions a executar segons el valor d'una sola variable (o expressi\u00f3), en Python cada bloc d'instruccions t\u00e9 la seua condici\u00f3 per a poder executar-se.</p> <p>Java s\u00ed que t\u00e9 una estructura semblant a la del PSeInt (anomenada switch) per\u00f2 ja la veurem m\u00e9s endavant. Veiem ara com implementar la bifurcaci\u00f3 m\u00faltiple en Python.</p> <p>En Python s'utilitza l'estructura if-elif-else, que \u00e9s com si tingu\u00e9rem dins d'un else una estructura if-else. I dins d'eixe else, una altra estructura if-else, etc.</p> <p></p> <p>Fixeu-vos que:</p> <ul> <li>Un elif ve a ser la contracci\u00f3 de el(se)+if, amb l'avantatge que no has d'anar sagnant cap a la dreta en cada condici\u00f3 (i no ocupa tantes l\u00ednies).</li> <li>Esta estructura de Pyhton anir\u00e0 per un cam\u00ed o per altre depenent de les diverses condicions que li anem posant. \u00c9s a dir: es podrien posar condicions diferents en cada elif. Mentre que en el seg\u00fan del PSeInt, anir\u00e0 per un cam\u00ed o per altre depenent dels valors d'una sola variable o expressi\u00f3.</li> </ul> Exercici 14. Instruccions de bifurcaci\u00f3 m\u00faltiple <p>Fes un programa en Python usant elif per a llegir de teclat un n\u00famero de l'1 al 7 i mostrar el nom corresponent al dia de la setmana (dilluns, dimarts...):</p>"},{"location":"PRG02/#34-instruccions-de-repeticio","title":"3.4. Instruccions de repetici\u00f3","text":"<p>Amb les estructures de repetici\u00f3 podrem fer que un grup de sent\u00e8ncies s'execute diverses vegades. Quantes?</p> <ul> <li>mentre es complisca una condici\u00f3: repeticions condicionals.</li> <li>una determinada quantitat de vegades: repeticions incondicionals.</li> </ul>"},{"location":"PRG02/#341-repeticio-condicional-while","title":"3.4.1. Repetici\u00f3 condicional WHILE","text":"<p>Amb l'estructura while posarem en un bloc aquelles instruccions que volem que s'executen repetidament mentre es complisca una determinada condici\u00f3.</p> <p></p> Exercici 15. Instruccions de repeticions condicionals while <p>Fes un programa en Python que, donat el radi, calcule l'\u00e0rea del cercle, per\u00f2 demanant repetidament el radi fins que l'usuari ens done un radi positiu.</p> Exercici 16 <p>Demana any de naixement i de defunci\u00f3 d'una persona. Caldr\u00e0 demanar-ho repetidament fins que siguen dades coherents (l'any de defunci\u00f3 no pot ser anterior al de naixement). Despr\u00e9s, mostra quants anys ha viscut.</p>"},{"location":"PRG02/#342-repeticio-condicional-fins-no-en-python","title":"3.4.2. Repetici\u00f3 condicional FINS (no en Python)","text":"<p>Amb l'estructura algor\u00edsmica FINS, posarem en un bloc aquelles instruccions que volem que s'executen repetidament fins que es complisca una determinada condici\u00f3.</p> <p>\u00c9s paregut al bucle MENTRE (while) per\u00f2 amb 2 difer\u00e8ncies:</p> <p>Exemple de repetici\u00f3 condicional FINS</p> <p></p> <p>Veiem que hi ha 2 difer\u00e8ncies entre un MENTRE i un FINS. En un bucle FINS:</p> <ul> <li>Sempre s'entra al bucle almenys 1 vegada, ja que la condici\u00f3 est\u00e0 al final del bucle.</li> <li>La condici\u00f3 \u00e9s just la contr\u00e0ria que MENTRE, ja que no hem de posar la condici\u00f3 per a continuar en el bucle, sin\u00f3 la condici\u00f3 per a eixir d'ell. No \u00e9s el mateix dir \"Mentre (no em donen la paga, la demanar\u00e9)\" que \"Repeteix demanar la paga fins que (s\u00ed que em donen la paga)\".</li> </ul> <p>Python no t\u00e9 esta estructura de posar la condici\u00f3 al final del bucle (no al principi), per\u00f2 podem simular eixe comportament (i Java t\u00e9 el do-while, que \u00e9s una cosa intermitja entre un MENTRE i un FINS):</p> <p></p> <p>En Python veiem que tenim un bucle infinit (en principi) ja que hem posat un while true. Per\u00f2 despr\u00e9s, podem eixir del bucle a la for\u00e7a amb el break.</p> <p>En canvi, en Java vorem que tenim l'estructura do-while, que \u00e9s pareguda al FINS del PSeInt perqu\u00e8 la condici\u00f3 est\u00e0 al final per\u00f2 es diferencia en que la condici\u00f3 que posem \u00e9s per a continuar en el bucle, no per a eixir.</p> <p>Com sabem si cal usar la condici\u00f3 al principi o b\u00e9 usar el while true i el break? Per regla general, si \u00e9s una condici\u00f3 senzilla, cal posar la condici\u00f3 al principi. Si usem el while true i no posem els break que toquen, podriem provocar un bucle infinit.</p> <p>Exercici 16 amb while-true i break</p> <p>Demana any de naixement i de defunci\u00f3 d'una persona. Caldr\u00e0 demanar-ho repetidament fins que siguen dades coherents (l'any de defunci\u00f3 no pot ser anterior al de naixement). Despr\u00e9s, mostra quants anys ha viscut.</p> Python<pre><code>anyNaixement = int(input(\"Any de naixement: \"))\n\nwhile True:\n    anyDefuncio = int(input(\"Any de defuncio: \"))\n    if anyDefuncio &gt;= anyNaixement:\n        break\n    else:\n        print(\"L'any de defuncio no pot ser anterior a l'any de naixement\")\n\nprint(\"Ha viscut\", anyDefuncio - anyNaixement, \"anys\")\n</code></pre>"},{"location":"PRG02/#343-repeticio-incondicional-for","title":"3.4.3. Repetici\u00f3 incondicional FOR","text":"<p>Amb l'estructura PER_A (para en castell\u00e0 i for als llenguatges de programaci\u00f3), podrem repetir un bloc una quantitat de voltes determinada. Per exemple, si volem que un bloc d'instruccions s'execute 5 vegades, ho farem en una estructura (for) amb ajuda d'una variable que anir\u00e0 agafant els valors del 0 al 4 (o de l'1 al 5, etc).</p> <p>Exemple</p> <p>Volem mostrar 5 vegades \"Hola, m\u00f3n!\"</p> <p></p> <p>Exemple</p> <p>Mostrar els n\u00fameros que hi ha entre el 100 i el 200, de 3 en 3.</p> PseudocodiPython PSeInt<pre><code>Algoritmo AltreExemplePer\n    Para i&lt;-100 hasta 200 con paso 3\n        Escribir i\n    FinPara\nFinAlgoritmo\n</code></pre> Python<pre><code>for i in range(100, 201, 3):\n    print(i)\n</code></pre> <p>M\u00e9s endavant entrarem en detall en distints tipus de for que t\u00e9 Python. De moment, veiem alguns exemples dels valors que tindr\u00e0 la i en funci\u00f3 del range:</p> <ul> <li><code>range(10) --&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code></li> <li><code>range(4, 10) --&gt; [4, 5, 6, 7, 8, 9]</code></li> <li><code>range(4, 10, 2) --&gt; [4, 6, 8]</code></li> <li><code>range(10, 1, -1) --&gt; [10, 9, 8, 7, 6, 5, 4, 3, 2]</code></li> </ul> Exercici 17. Instruccions de repeticions incondicionals <p>Demanar per teclat quants n\u00fameros es volen mostrar. A continuaci\u00f3, es mostraran els n\u00fameros des d'eixe n\u00famero fins a l'1 (en eixe ordre).</p> Exercici 18 <p>Demanar un valor inicial i un valor final. Caldr\u00e0 mostrar els valors que hi ha entre ells per\u00f2 de 3 en 3. El valor inicial pot ser major que el final.</p> <p>Exemples:</p> <ul> <li><code>vi = 10   vf = 20</code> ---&gt;  Mostrar\u00e0: 10, 13, 16, 19</li> <li><code>vi = 20   vf = 10</code> ---&gt;  Mostrar\u00e0: 20, 17, 14, 11</li> </ul> Exercici 19 <p>Imprimeix la taula de multiplicar del 9.</p>"},{"location":"PRG02/#4-comptadors-acumuladors-i-interruptors","title":"4. Comptadors, acumuladors i interruptors","text":"<p>De vegades, les variable s'utilitzen per a unes finalitats concretes. Anem a vore quines s\u00f3n eixes finalitats i com tractar eixes variables.</p>"},{"location":"PRG02/#41-comptadors","title":"4.1. Comptadors","text":"<p>Un comptador \u00e9s una variable destinada a comptar quantes vegades ocorre alguna cosa. Sol emprar-se en els bucles (de qualsevol tipus: while o for). L'\u00fas del comptador t\u00e9 2 instruccions b\u00e0siques i sol ser aix\u00ed:</p> <p></p> <p>Exemple d'\u00fas de comptadors</p> <p></p> Exercici 21. \u00das de comptadors <p>Indica quants divisors (no quins) t\u00e9 un n\u00famero donat.</p> Exercici 22 <p>Pregunta quina \u00e9s l'arrel quadrada de 225 fins que siga encertat. Finalment, mostra quants intents s'han fet.</p> Exercici 23 <p>Imprimix quants n\u00fameros hi ha entre 1 i 100 que s\u00f3n m\u00faltiples de 2, quants m\u00faltiples de 3 i quants m\u00faltiples de 2 i de 3 al mateix temps.</p> Exercici 24 <p>Llig uns quants n\u00fameros (fins que posem 0). Mostra quants positius, quants negatius i quants acaben en 0.</p> Exercici 25 RESOLT <p>Fes un programa que donat un n\u00famero, calcule quants d\u00edgits t\u00e9.</p> Python<pre><code>num = int(input(\"Dona'm un n\u00famero \"))\n\ncDigits = 0 #(1)!\n\nwhile (num &gt; 0):\n    num = num // 10 #(3)!\n    cDigits = cDigits + 1 #(2)!\n\nprint(cDigits, \"d\u00edgits\")\n</code></pre> <ol> <li>inicialitzaci\u00f3 del comptador</li> <li>Increment</li> <li>S'ha emprat l'operador // que torna sols la part sencera de la divisi\u00f3</li> </ol>"},{"location":"PRG02/#42-acumuladors","title":"4.2. Acumuladors","text":"<p>Un acumulador \u00e9s una variable destinada a acumular diferents quantitats.</p> <p>Un acumulador \u00e9s com un comptador per\u00f2 en compte de sumar 1, sumarem diferents quantitats (no volem comptar sin\u00f3 acumular quantitats).</p> <p></p> <p>Exemple d'acumulador</p> <p>Volem acumular l'import d'una factura:</p> Python<pre><code>q = int(input(\"Quantitat: \"))\n\ntotal = 0 #(1)!\n\nwhile (q!=0):\n    p = int(input(\"Preu: \"))\n    total = total + (q*p) #(2)!\n    q = int(input(\"Quantitat: \"))\n\nprint(\"Total:\", total)\n</code></pre> <ol> <li>inicialitzaci\u00f3 de l'acumulador</li> <li>Increment</li> </ol> Exercici 26. \u00das d'acumuladors <p>Demana quantitats fins que s'introdu\u00efsca la quantitat 0. Cadr\u00e0 mostrar la suma de totes les quantitats.</p> Exercici 27 <p>Demana les notes dels 23 alumnes de la classe. Mostra la nota mitjana.</p> Exercici 28 <p>Mostra els n\u00fameros naturals que hi ha entre dos n\u00fameros introdu\u00efts per teclat i calcula la suma dels parells i la dels imparells. Per \u00faltim, mostra els dos totals.</p> Exercici 29 <p>Introdueix 2 valors A i B (A &lt; B). Incrementa A de 2 en 2 i decrementa B de 3 en 3 fins que A &gt; B.</p> Exercici 30 <p>Demana 2 n\u00fameros per teclat i mostra la multiplicaci\u00f3 dels dos... per\u00f2 sense usar l'perador de la multiplicaci\u00f3 (*). \u00c9s a dir: haur\u00e0s de sumar un dels dos n\u00fameros tantes vegades com diu l'altre n\u00famero.</p>"},{"location":"PRG02/#421-acumuladors-de-productes","title":"4.2.1. Acumuladors de productes","text":"<p>Generalment, la quantitat va sumant-se a l'acumulador, per\u00f2 tamb\u00e9 podria multiplicar-se. Cal tindre en compte aix\u00f2 per a iniciar l'acumulador:</p> <ul> <li>Si volem sumar quantitats, el <code>valor_inicial</code> sol ser 0.</li> <li>Si volem multiplicar quanitats, el <code>valor_inicial</code> sol ser 1.</li> </ul> Exercici 31 RESOLT <p>Donats 2 n\u00fameros (base i exp) calcula la pot\u00e8ncia (base<sup>exp</sup>). Se suposa que la pot\u00e8ncia no \u00e9s un operador ni cap funci\u00f3 predefinida.</p> Python<pre><code>base = int(input(\"Base: \"))\nexpo = int(input(\"Exponent: \"))\n\npot = 1 #(1)!\n\nfor i in range (expo):\n    pot = pot * base #(2)!\n\nprint (\"Pot\u00e8ncia:\", pot)\n</code></pre> <ol> <li>Si inicialitz\u00e0rem a 0, el producte sempre donaria 0.</li> <li>Acumulem el producte</li> </ol> Exercici 32. Acumuladors de productes <p>Mostra el producte de tots els n\u00fameros imparells entre l'1 i el 40.</p> Exercici 33 <p>Mostra la suma, el producte i la mitjana dels 100 primers n\u00fameros naturals.</p> Exercici 34 <p>Calcula el factorial d'un n\u00famero introdu\u00eft per teclat.</p>"},{"location":"PRG02/#43-interruptors","title":"4.3. Interruptors","text":"<p>Els interruptors (tamb\u00e9 coneguts com indicadors, banderes o flags) s\u00f3n variables destinades a indicar si en alguna de les iteracions d'un bucle ha passat o no una cosa determinada.</p> <p>Estes variables seran de tipus l\u00f2gic (boole\u00e0) ja que nom\u00e9s guardaran 2 possibles valors: ha passat alguna cosa (vertader) o no (fals). En Python, estos valors s\u00f3n True i False (en PSeInt s\u00f3n Verdadero i Falso). Ja vorem que en Java s\u00f3n true i false (en min\u00fascula).</p> <p></p> <p>Per\u00f2 si un llenguatge no admetera el tipus boole\u00e0 (com el llenguatge C), podr\u00edem usar una variable de tipus enter (per exemple usant els valors 0 i 1) o de tipus car\u00e0cter (per exemple emprant els valors \"V\" i \"F\", o b\u00e9, \"S\" i \"N\", etc).</p> Exercici 35. \u00das d'interruptors <p>Demana un n\u00famero per teclat i digues si \u00e9s un n\u00famero primer o no. Un n\u00famero \u00e9s primer si nom\u00e9s t\u00e9 2 divisors (per ell mateix i per 1, clar).</p>"},{"location":"PRG02/#5-alguns-algorismes-basics","title":"5. Alguns algorismes b\u00e0sics","text":""},{"location":"PRG02/#51-obtindre-el-major-duna-llista-de-numeros","title":"5.1. Obtindre el major d'una llista de n\u00fameros","text":"<p>Imaginem que (sense cap ordinador), vull anar preguntant l'edat de tot l'alumnat per a poder saber l'edat m\u00e0xima. Com ho faria? No he de recordar l'edat de tots, sin\u00f3 que nom\u00e9s necessite saber en cada moment l'edat de l'alumne actual i l'edat m\u00e0xima obtinguda fins eixe moment (que haur\u00e9 d'anar canviant o no).</p> <p>Per tant, necessite 2 variables: edat (per a guardar l'edat de l'alumne \"actual\") i maxima (per a guardar l'edat m\u00e0xima fins a eixe moment). L'algorisme seria:</p> <p>Algorisme</p> <ul> <li>Inicialitzar maxima a un valor molt xicotet. En el cas de les edats ens serviria el 0, ja que cap alumne pot tindre menys de 0 anys.</li> <li>Per cada alumne del bucle faria:<ul> <li>Demanar l'edat de l'alumne (la guarde sempre a la variable edat).</li> <li>Si eixa edat \u00e9s major que la que tinc en maxima, canvie el valor de maxima a eixa edat.</li> </ul> </li> </ul> Python<pre><code>maxima = 0\n\nfor i in range (24):\n    edat = int(input(\"Edat: \"))\n    if (edat &gt; maxima):\n        maxima = edat\n\nprint (\"Edat m\u00e0xima:\", maxima)\n</code></pre> <p>Ara b\u00e9: i si no foren edats? \u00c9s a dir: imaginem que volem calcular el n\u00famero m\u00e0xim d'una llista de n\u00fameros per\u00f2 que tamb\u00e9 podrien ser negatius. Fins i tot, tots els n\u00fameros podrien ser negatius. En eixe cas no ens serviria inicialitzar el valor de la variable maxima a 0, sin\u00f3 que haur\u00edem d'assignar-li un valor que siga m\u00e9s xicotet que tots els que puguen estar en la llista.</p> <p>En eixe cas tenim 2 opcions per a trobar el valor inicial de la variable maxima:</p> <ol> <li>El valor m\u00e9s xicotet que admet eixe tipus de dades en eixe llenguatge. Per exemple, el menor enter en Java seria Integer.MIN_VALUE. Compte! Python no t\u00e9 l\u00edmit en la grand\u00e0ria dels enters.</li> <li>El primer valor de la llista de n\u00fameros.</li> </ol> <p>Per tant, si volem obtindre el m\u00e0xima de 100 valors usant l'opci\u00f3 (2), al principi de l'algorisme direm que el m\u00e0xim \u00e9s el primer d'eixos valors. Despr\u00e9s llegirem en un bucle els altres 99 n\u00fameros i, com abans, anirem canviant, si cal, el valor m\u00e0xim:</p> Python<pre><code>max = int(input(\"N\u00fam: \"))\n\nfor i in range (99):\n    num = int(input(\"N\u00fam: \"))\n    if (num &gt; max):\n        max = num\n\nprint(\"M\u00e0xim:\", max)\n</code></pre> Exercici 36. C\u00e0lcul del major <p>Llig uns quants n\u00fameros (fins que posem 0). Mostra el major i el menor.</p>"},{"location":"PRG02/#52-bucles-niuats","title":"5.2. Bucles niuats","text":"<p>Podem posar un bucle (o m\u00e9s) dins d'un altre.</p> <p>Per exemple, si volem obtindre de teclat un n\u00famero imparell, cal un bucle per a demanar cont\u00ednuament el n\u00famero fins que siga imparell. Per\u00f2 si volem demanar 4 n\u00fameros imparells, haurem de posar el bucle anterior dins d'un altre bucle:</p> <p>Bucles niuats</p> Python<pre><code>for in range (1, 5):\n    num = int(input(\"N\u00fam. imparell:\"))\n\n    while num % 2 == 0:\n        print(\"No \u00e9s imparell. Torna\")\n        num = int(input(\"num imparell: \"))\n\n    print(f\"El {num} \u00e9s imparell\")\n    print(f\"Ja tenim {i} imparells\")\n</code></pre> <p>NOTA: recorda que l'operador <code>%</code> calcula el residu de la divisi\u00f3 entera, tant en PSeInt, Python i Java (encara que PSeInt tab\u00e9 admet l'operador mod).</p> Exercici 36.quadrat <p>Dibuixa un quadrat de car\u00e0cters <code>x</code>, de grand\u00e0ria <code>n</code> (demanada per teclat). Per exemple, si <code>n</code> \u00e9s 4, cal dibuixar:</p> <p>Text Only<pre><code>x   x   x   x\nx   x   x   x\nx   x   x   x\nx   x   x   x\n</code></pre> NOTA: per a escriure sense que fa\u00e7a despr\u00e9s un salt de l\u00ednia:</p> Python<pre><code>print(\"Hola\", end=\"\")\n</code></pre> Exercici 36.triangle <p>Dibuixa un triangle de car\u00e0cters <code>x</code> d'altura <code>n</code> (demanada per teclat). Per exemple, si <code>n</code> \u00e9s 4:</p> Text Only<pre><code>x\nx   x\nx   x   x\nx   x   x   x\n</code></pre> Exercici 36.triangle2 <p>Dibuixa un triangle de <code>x</code> d'altura <code>n</code> (demanada per teclat). Per exemple, si <code>n</code> \u00e9s 4:</p> Text Only<pre><code>x   x   x   x\nx   x   x\nx   x\nx\n</code></pre> Exercici 36.rectangle <p>Dibuixa un rectangle de <code>x</code> de grand\u00e0ria <code>alt</code> per <code>ample</code> (dades demanades per teclat). Per exemple, si \u00e9s 4 d'alt per 7 d'ample, dibuixarem:</p> Text Only<pre><code>x   x   x   x   x   x   x\nx   x   x   x   x   x   x\nx   x   x   x   x   x   x\nx   x   x   x   x   x   x\n</code></pre> Exercici 36.rectangleBuit <p>Igual que el 36.4, per\u00f2 ara el triangle ha d'estar buit:</p> Text Only<pre><code>x   x   x   x   x   x   x\nx                       x\nx                       x\nx   x   x   x   x   x   x\n</code></pre> Exercici 37 <p>Mostra les taules de multiplicar del 2 al 9.</p> <p>PISTA: ja havies fet, amb un bucle, una taula de multiplicar. Ara es tracta de posar eixe tr\u00f3s de codi dins d'un altre bucle, ja que volem motes taules.</p> Exercici 37.1 <p>Demana un n\u00famero per teclat (n) i mostra per pantalla les seg\u00fcents l\u00ednies:</p> Text Only<pre><code>1 = 1\n1 + 2 = 3\n1 + 2 + 3 = 6\n...\nfins a les n l\u00ednies\n</code></pre> Exercici 37.2 <p>Mostra els primers 15 n\u00fameros primers. Els resultat ha de ser:</p> Text Only<pre><code>Nombres primers:\n2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47\n</code></pre> <p>NOTA: L'1 no \u00e9s primer, per definici\u00f3.</p>"},{"location":"PRG02/#6-exercicis","title":"6. Exercicis","text":"Exercici 38 <p>En un p\u00e0rquing es paga 2\u20ac l'hora completa. I per als minuts restants, es paga 4 c\u00e8ntims per minut, per\u00f2 no pot excedir el preu d'una hora. Calcula qu\u00e8 li toca pagar a un conductor per un determinat temps, donat en minuts.</p> <p>NOTA: es poden eliminar els decimals amb la funci\u00f3 <code>trunc</code>.</p> Exercici 39 <p>Donat un temps en segons, calcula els segons que falten per a convertir-se en minuts sencers. Per exemple, per a un temps de 70 segons, en faltarien 50.</p> Exercici 40 <p>Donat un temps en minuts, calcula els dies, hores i minuts que li corresponen.</p> Exercici 41 <p>Pregunta quina \u00e9s l'arrel quadrada de 225 fins que siga encertat.</p> Exercici 42 <p>C\u00e0lcul del sou d'un treballador. Pregunta quantes hores ha treballat (a partir de les 40 hores es consideraran extres). Pregunta quin \u00e9s el preu de l'hora normal (el preu de l'hora extra \u00e9s un 50% m\u00e9s del preu de l'hora normal). Que cobra el treballador?</p> Exercici 43 <p>Modifica l'exercici de les hores extres per a obtindre la suma dels salaris de tots els treballadors. Tots la mateixa tarifa. Acabar\u00e0 quan posem 0 hores treballades.</p> Exercici 44 <p>Demana <code>N</code> notes d'un estudiant i calcula:</p> <ul> <li>Quantes notes t\u00e9 suspeses.</li> <li>Quantes aprovades.</li> <li>La mitjana de les notes.</li> <li>La mitjana de les notes aprovades i la mitjana de les suspeses.</li> </ul> Exercici 45 <p>Escriu un algorisme que calcule el total d'una factura d'un article determinat del qual s'adquirixen <code>N</code> unitats a un preu <code>P</code>. L'IVA \u00e9s el 21%. Si l'import a pagar (amb IVA) \u00e9s superior a 300\u20ac, s'aplicar\u00e0 un descompte del 5%.</p> Exercici 46 <p>Modifica l'exercici de la factura per a demanar moltes voltes el preu i la quantitat de diferents articles. Si les unitats introdu\u00efdes s\u00f3n 0, vol dir que no es demanaran m\u00e9s articles. El possible descompte, s'aplicar\u00e0 al final de la factura.</p> Exercici 47 <p>Algorisme que vaja demanant lletres des de teclat i que pare quan es trobe amb una vocal. Cal escriure esta vocal.</p> Exercici 48 <p>Mostra els n\u00fameros entre 100 i 200 que s\u00f3n m\u00faltiples de 3 per\u00f2 que no son m\u00faltiples de 2.</p> Exercici 49 <p>Mostra tots els divisors d'un n\u00famero donat, Utilitzant l'operador <code>mod</code>.</p> Exercici 50 <p>Demana per teclat la quantitat del n\u00fameros que vol introduir l'usuari. A continuaci\u00f3, llig de teclat eixa quantitat de n\u00fameros i digues de cadascun si \u00e9s parell i positiu al mateix temps.</p> Exercici 51 <p>Imprimix la taula de multiplicar d'un n\u00famero introdu\u00eft per teclat.</p> Exercici 52 <p>Dir si un n\u00famero de 3 xifres \u00e9s o no d'Armstrong (si \u00e9s igual a la suma dels seus d\u00edgits al cub, per exemple: 153 = 1\u00b3 + 5\u00b3 + 3\u00b3). Si no ho \u00e9s, torna-ho a intentar per a m\u00e9s n\u00fameros.</p> Exercici 53 <p>Algorisme que mostre tots els n\u00fameros d'Armstrong de l'1 al 1000.</p> Exercici 54 <p>Comprova si un n\u00famero donat \u00e9s perfecte.</p> <p>NOTA: es diu que un n\u00famero \u00e9s perfecte si \u00e9s igual a la suma dels seus divisors excepte ell mateix.</p> Exercici 55 <p>Mostra els n\u00fameros primers menors de 100.</p>"},{"location":"PRG03/","title":"UD3. Introducci\u00f3 a Python","text":"<p>Al tema anterior, per comen\u00e7ar a vore els principis de la programaci\u00f3 estructurada hem vist algorismes en ordinograma i la seua implementaci\u00f3 en Python. En este tema aprofundirem un poc m\u00e9s en Python pel que fa als operadors i expressions, aix\u00ed com a l'entrada i eixida de dades. A m\u00e9s, com que m\u00e9s endavant es vor\u00e0 el llenguatge Java, conforme anem veient coses en Python, anirem dient ja les difer\u00e8ncies en java. Estes difer\u00e8ncies solen ser iguals en Java i en C.</p>"},{"location":"PRG03/#1-caracteristiques-basiques-de-python","title":"1. Caracter\u00edstiques b\u00e0siques de Python","text":"<p>Python \u00e9s un llenguatge creat a finals dels 80 per Guido Van Rossum, i deu el seu nom a l'afici\u00f3 pel grup c\u00f2mic brit\u00e0nic Monty Python.</p> <p>\u00c9s un llenguatge de programaci\u00f3 interpretat, de tipificaci\u00f3 din\u00e0mica i multi plataforma. \u00c9s de prop\u00f2sit general, fins i tot per a la creaci\u00f3 de scripts.</p>"},{"location":"PRG03/#11-que-necessitem-per-a-programar-en-python","title":"1.1. Qu\u00e8 necessitem per a programar en Python?","text":"<p>Ho podem fer de diverses maneres:</p> <ul> <li> <p>Usar un int\u00e8rpret online (no cal instal\u00b7lar res)</p> <p>Per exemple, onlinegdb.com. Caldr\u00e0 seleccionar el llenguatge Python 3, escriure el codi i polsar Run.</p> </li> <li> <p>Instal\u00b7lar l'int\u00e8rpret de Python: www.python.org/downloads</p> <p>Una vegada instal\u00b7lat (Linux ja el porta) podrem:</p> <ul> <li>Provar comandaments en mode interactiu: en el terminal escriurem python3. Entrarem en el mode interactiu: despr\u00e9s de fer intro en cada instrucci\u00f3, s'executar\u00e0.</li> </ul> <p></p> <ul> <li> <p>Escriure el programa en un fitxer de text: Li direm, per exemple, holaMon.py, i l'executarem amb: python3 holaMon.py. No cal compilar res, perqu\u00e8 Python \u00e9s interpretat.</p> </li> <li> <p>Usar un IDE (Entorn de Desenvolupament Integrat): Per exemple, Visual Studio Code. Potser calga instal\u00b7lar l'extensi\u00f3 de Python. Escriurem el nostre programa, el guardarem (holaMon.py) i l'execurarem amb la icona del triangle.</p> </li> </ul> </li> </ul>"},{"location":"PRG03/#12-estructura-dun-programa-en-python","title":"1.2. Estructura d'un programa en Python","text":"<p>Un programa en Python t\u00e9 una estructura molt simple:</p> <ul> <li>No s'ha de posar punt i coma despr\u00e9s de cada instrucci\u00f3.</li> <li>No es posen delimitadors de bloc de programa. Simplement se sangra.</li> <li>No cal indicar el tipus de dades de les variables.</li> </ul> <p>Qualsevol programa escrit en Pyhton t\u00e9 la seg\u00fcent estructura:</p> <p></p> <p>Veiem que l'\u00fanica part (pr\u00e0cticament) necess\u00e0ria en un programa \u00e9s l'entrada, processament i la sortida de dades, com en qualsevol llenguatge de programaci\u00f3.</p> <p>En Python estos apartats poden variar de posici\u00f3.</p> <p>Veiem uns exemples i els analitzem.</p> <p>L'exemple m\u00e9s simple, mostrar un missatge per pantalla:</p> Python<pre><code>print(\"Hola, Pep\")\n</code></pre> <p>Un altre exemple m\u00e9s complet:</p> Python<pre><code># Programa que calcula l'\u00e0rea d'un rectangle (1)\n# Autor: Pep Garcia\n# Data: 2024/10/01\n\nimport time  #(2)!\n\ndef areaRectangle(base, altura): # (3)!\n    return base * altura\n\nb = int(input(\"Dis-me la base del rectangle: \")) #(4)!\na = int(input(\"Dis-me l'altura del rectangle: \"))\n\ntime.sleep(2) # Espera 2 segons\n\narea = areaRectangle(b, a) #(5)!\n\nprint(\"L'\u00e0rea del rectangle \u00e9s\", str(area)) #(6)!\n</code></pre> <ol> <li>Descripci\u00f3 del programa</li> <li>Importaci\u00f3 de llibreries</li> <li>Definici\u00f3 de funcions</li> <li>Entrada de dades</li> <li>Processament de dades</li> <li>Sortida de dades</li> </ol> <p>Exemple</p> <p>Copia i apega el codi anterior en l'IDE que tingues de Python i executa'l per vore qu\u00e8 fa.</p> <p>Comentem, per adamunt, algunes coses del programa que m\u00e9s endavant ampliarem:</p> <ul> <li>Descipci\u00f3 del programa. Son comentaris, no s'executen.</li> <li>A l'import indiquem que necessitem una llibreria: conjunt de funcions que ja estan implementades i les podem fer servir als nostres programes. En este exemple la llibreria \u00e9s time i ens cal per a usar la funci\u00f3 time.sleep() que fa que el prgrama pare en eixe punt uns segons (2 en este cas).</li> <li>Despr\u00e8s tenim la definici\u00f3 d'una funci\u00f3, que comen\u00e7a amb la paraula reservada def. Tot el que es pose dins del bloc de la definici\u00f3 d'una funci\u00f3 ha d'anar sagnat (en este cas \u00e9s nom\u00e9s la instrucci\u00f3 return).</li> <li>Despr\u00e9s ja tenim el nostre programa pr\u00f2piament dit, on veiem que:<ul> <li>Les l\u00ednies no tenen cap sagnat (van just a l'esquerra)</li> <li>Amb els input aconseguim que s'introduisquen dades per teclat.</li> <li>Es fa la crida a la funci\u00f3 que hem definit abans (areaRectangle).</li> <li>Finalment mostrem a l'usuari el resultat (print).</li> </ul> </li> </ul>"},{"location":"PRG03/#13-noms-de-variable-i-funcions-en-python","title":"1.3. Noms de variable i funcions en Python","text":"<p>Abans hem vist que hem posat noms de variable i funcions. Estos noms han de tindre unes regles, que solen ser les mateixes en tots els llenguatges, encara que poden variar un poc. En Python estes s\u00f3n les regles per als noms de variables i funcions:</p> <p>Regles per a noms de variables i funcions en Python</p> <ul> <li>Son una combinaci\u00f3 de lletres min\u00fascules [ a...z ], maj\u00fascules [ A...Z ], d\u00edgiint [ 0...9 ] i el car\u00e0cter subratllat [ _ ].</li> <li>Poden tindre qualsevol longitud.</li> <li>S'admeten els accents, la \u00e7 i la \u00f1.</li> <li>No poden haver s\u00edmbols especials ni operadors: <code>[, !, @, #, $, %, *, ...</code></li> <li>No poden comen\u00e7ar amb d\u00edgit.</li> <li>No poden ser paraules reservades:</li> </ul> <p></p>"},{"location":"PRG03/#14-variables","title":"1.4. Variables","text":"<p>Les variables s\u00f3n els llocs on es guarda la informaci\u00f3 (per exemple, els llocs on es guarda cada dada introdu\u00efda per teclat).</p> <p>Es poden classificar en globals i locals:</p> <ul> <li>Variables globals: es creen fora de qualsevol funci\u00f3. Es pot accedir a elles des de qualsevol part del programa.</li> <li>Variables locals: es creen dins d'una funci\u00f3. Es pot accedir a elles nom\u00e9s des d'eixa funci\u00f3.</li> </ul> <p>M\u00e9s endavant vorem els tipus de dades (enter, car\u00e0cter, etc) de les variables.</p>"},{"location":"PRG03/#15-comentaris","title":"1.5. Comentaris","text":"<p>En algunes parts del programa cal que el programador pose anotacions per a:</p> <ul> <li>Recordar el que ha fet, per a futures modificacions.</li> <li>Indicar a altres programadors com s'ha fet alguna cosa.</li> <li>Indicar la data (o autor, etc.) de creaci\u00f3 del programa.</li> </ul> <p>Tipus de comentaris:</p> <ul> <li>D'una l\u00ednia:<ul> <li>Precedit per coixinet: # soc un comentari</li> <li>Entre cometes simples: 'soc un comentari'</li> <li>Entre cometes dobles: \"soc un comentari\"</li> </ul> </li> <li>De diverses l\u00ednies:<ul> <li>entre trios de cometes simples: ' ' '</li> <li>entre trios de cometes dobles: \" \" \"</li> </ul> </li> <li>De documentaci\u00f3 de funcions: si posem un comentari entre cometes en la primera l\u00ednia dins d'una funci\u00f3 (per a explicar qu\u00e8 fa) despr\u00e9s podrem accedir a eixe comentari des d'altres parts del programa. Ara ho veurem.</li> </ul> <p>Veiem en este programa exemples dels diferents tipus de comentaris:</p> Python<pre><code>'''\nPrograma que calcula l'area d'un rectangle\nAutor: Pep Garcia\nData: 1-10-2024\n'''\nimport time\n# -----------------------------------------\ndef areaRectangle(b, a):\n    '''\n    Esta funci\u00f3 calcula l'\u00e0rea d'un rectangle\n    Par\u00e0metres:\n        b -&gt; La base del rectangle\n        a -&gt; L'altura del rectangle\n    '''\n    return b*a\n# -----------------------------------------\n\n# Entrada de dades per teclat:\nbase = int(input(\"Dis-me la base del rectangle: \"))\naltura = int(input(\"Dis-me l'altura del rectangle: \"))\n\n# C\u00e0lculs\ntime.sleep(2) # Espera dos segons\narea = areaRectangle(base, altura)\n\n# Eixida de resultats per pantalla:\nprint(\"L'\u00e0rea del rectangle \u00e9s\", str(area))\n</code></pre> <p>Ens alguns IDE com el Visual Studio Code, si poses el cursor damunt del nom d'una funci\u00f3 et mostra els comentaris que has posat en ella:</p> <p></p>"},{"location":"PRG03/#16-delimitacions","title":"1.6. Delimitacions","text":"<p>Son s\u00edmbols especials que permeten al compilador/int\u00e8rpret recon\u00e9ixer les diferents parts del programa.</p> <p>El m\u00e9s important \u00e9s el finalitzador de sent\u00e8ncies, que, en molts llenguatges de programaci\u00f3 (com C i Java) \u00e9s el pun i coma ( ; ) per\u00f2 Python fa servir simplement el bot de l\u00ednia.</p> <p>Ac\u00ed tenim els delimitadors que s'usen en Python.</p> Python C i Java Nom Utilitat Salt de l\u00ednia ; Finalitzador - Finalitzar una instrucci\u00f3 simple o una declaraci\u00f3 de variables Tabulaci\u00f3 { } Bloc - Delimitar inici i fi d'un bloc de codi , , Separador - Separar els elements d'una llista ( ) ( ) Par\u00e8ntesi - Agrupar operacions - Par\u00e0metres de funcioins [ ] [ ] Claud\u00e0tors - Per a vectors, llistes..."},{"location":"PRG03/#2-tipus-de-dades","title":"2. Tipus de dades","text":"<p>Les dades que manegen els programes s\u00f3n de distints tipus: lletres, n\u00fameros sense decimals, amb decimals...</p> <p>Per tant, les variables seran d'un tipus determinat. En la majoria de llenguatges de programaci\u00f3, abans d'utilitzar una nova variable, cal definir-la (declarar-la): indicar de quin tipus \u00e9s. Per\u00f2 en Python no cal. Simplement el tipus de la variable ser\u00e0 del mateix tipus que el valor que li s'assigne.</p> Python<pre><code>edat = 30\nnom = \"Pep\"\npes = 74.5\ncasat = True\n</code></pre> <p>Veiem els distints tipus que solen tindre els llenguatges de programaci\u00f3.</p>"},{"location":"PRG03/#21-tipus-elementals","title":"2.1. Tipus elementals","text":"<p>En Python hi ha 4 tipus b\u00e0sics: enter, amb decimals, cadena i l\u00f2gic.</p> <p>Altres llenguatges, com C i Java, en tenen m\u00e9s, per a indicar enters xicotets o grans, amb signa o sense... Igual que per a n\u00fameros amb decimals.</p>"},{"location":"PRG03/#211-numeros-enters-int","title":"2.1.1. N\u00fameros enters: int","text":"<p>N\u00fameros enters (sense decimals).</p> <p>Quan posem un n\u00famero s'interpreta que est\u00e0 en sistema de numeraci\u00f3 decimal. Per\u00f2 podem dir-li que ho interprete com a binari, octal o hexadecimal:</p> Python<pre><code>print(11)   # N\u00famero 11 en sistema decimal. Mostra 11\nprint(0b11) # Numero 11 en sistema binari. Mostra 3\nprint(0o11) # N\u00famero 11 en sistema octal. ostra 9\nprint(0x11) # N\u00famero 11 en sistema hexadecimal. Mostra 17\n</code></pre> <p>El print mostra el n\u00famero en sistema decimal.</p>"},{"location":"PRG03/#212-numeros-amb-decimals-float","title":"2.1.2. N\u00fameros amb decimals: float","text":"<p>N\u00fameros amb decimals</p> Python<pre><code>print(5.2)  # mostra 5.2\nprint(5.)   # mostra 5.0\nprint(.2)   # mostra 0.2\nprint(5e2)  # mostra 500\nprint(5e-2) # mostra 0.05\n</code></pre>"},{"location":"PRG03/#213-logics-bool","title":"2.1.3. L\u00f2gics: bool","text":"<p>Serveix per si una variable volem que tinga 2 \u00fanics estats (vertader o fols). Els \u00fanics valors que pot tindre una variable d'este tipus s\u00f3n True o False.</p> Python<pre><code>majorEdat = True\njubilat = False\n</code></pre> <p>Ens servir\u00e0 per a quan usem sent\u00e8ncies condicionals (ja entrarem en detall):</p> Python<pre><code>if jubilat:\n    print(\"Est\u00e0 jubilat\")\nelse:\n    print(\"No est\u00e0 jubilat\")\n</code></pre> <p>NOTA</p> <p>En C++ i Java \u00e9s true i false (en min\u00fascula). C no t\u00e9 eixe tipus de dades com a tal (usa el 0 per a false i l'1 per a true).</p>"},{"location":"PRG03/#214-cadenes-str","title":"2.1.4. Cadenes: str","text":"<p>\u00c9s el tipus de dades per a guardar una cadena de car\u00e0cters (un nom de persona, per exemple). Una dada de tipus str \u00e9s una successi\u00f3 de 0 o m\u00e9s car\u00e0cters dins de cometes simples o dobles (encara que es recomana entre cometes dobles, ja que molts llenguatges nom\u00e9s admeten les dobles).</p> Python<pre><code>nom = \"Pep Garcia\"\ndomicili = 'Carrer La Punt, 54'\nprint(\"Nom de l'alumne:\", nom)\n</code></pre> <p>Per a guardar cadenes els llenguatges utilitzen formes distintes:</p> <ul> <li>En C no \u00e9s un tipus sin\u00f3 un vector de car\u00e0cters (ja vorem els vectors).</li> <li>En Java no \u00e9s un tipus, sin\u00f3 una classe (ja vorem les classes).</li> <li>En Python s\u00ed que \u00e9s un tipus de dades.</li> </ul>"},{"location":"PRG03/#2141-sequencies-descapament","title":"2.1.4.1. Seq\u00fc\u00e8ncies d'escapament","text":"<p>Per a poder posar unes cometes dobles dis d'una cadena amb cometes dobles es pot usar el car\u00e0cter d'escapament <code>\\</code>. Tamb\u00e9 per a cometes simples:</p> Python<pre><code>print(\"Podem mostrar 'i \\\" dins de cometes dobles\")\nprint('Podem mostrar \\' i \" dins de cometes simples')\n</code></pre> <p>En una cadena de text tamb\u00e9 podem utilitzar este car\u00e0cter d'escapament per a representar diverses accions:</p> Python, C i Java Acci\u00f3 Exemple Resultat \\n Nova l\u00ednia print(\"Hola\\nAd\u00e9u\") \\t Tabulador print(\"Hola\\tAd\u00e9u\") Hola    Ad\u00e8u \\r Retorn de carro print(\"Hola\\rTu\") Tula \\b Backspace print(\"Hola\\bAd\u00e9u\") HolAd\u00e9u <p>Encara que les m\u00e9s emprades s\u00f3n <code>\\n</code> i <code>\\t</code>.</p> <p>Totes estes seq\u00fc\u00e8ncies d'escapament tamb\u00e9 es poden usar en C i Java.</p>"},{"location":"PRG03/#22-tipus-composts","title":"2.2. Tipus composts","text":"<p>Els tipus simples (que acabem de veure) serveixen quan hem de guardar una informaci\u00f3 simple. \u00c9s a dir, formada per una sola dada (una temperaura, un nom, una edat...)</p> <p>Per\u00f2 si volem guardar en una variable el domicili d'un client (format per un carrer, n\u00famero, codi postal...) o una data (dia, mes any), el programador haur\u00e0 de definir un tipus de dades compost. Estos tipus de dades compostos els vorem m\u00e9s endavant.</p>"},{"location":"PRG03/#23-declaracio-de-variables","title":"2.3. Declaraci\u00f3 de variables","text":"<p>Una variable \u00e9s una porci\u00f3 de mem\u00f2ria (RAM), representada per un nom (identificador) on es guardar\u00e0 un valor que pot variar al llarg de l'execuci\u00f3 d'un programa.</p> <p>Declarar una variable vol dir indicar de quin tipus ser\u00e0 eixa variable. Depenent del llenguatge de programaci\u00f3 caldr\u00e0 declarar les variables o no. Per tant, atenent a este criteri, tenim 2 tipus de llenguatges de programaci\u00f3:</p>"},{"location":"PRG03/#231-llenguatges-de-tipificacio-estatica-c-java-pero-no-python","title":"2.3.1. Llenguatges de tipificaci\u00f3 est\u00e0tica (C, Java... per\u00f2 no Python)","text":"<p>Estos llenguatges obliguen a indicar de quin tipus ser\u00e0 una variable abans d'usar-la. Despr\u00e9s, al moment de fer servir les variables, el llenguatge controla que el valor que s'assigne a una variable corresponga al tipus de la variable. Si no \u00e9s el cas, donar\u00e0 error-</p> Java<pre><code>int n;\nfloat x;\nn = 3;\nn = \"Pep\";  // Error perqu\u00e8 no \u00e9s del mateix tipus.\nn = 4.7;    // No d\u00f3na error per\u00f2 lleva la part decimal. Guardar\u00e0 un 4.\nz = 6;      // Error perqu\u00e8 la variable z no est\u00e0 declarada pr\u00e8viament.\n</code></pre>"},{"location":"PRG03/#232-llenguatges-de-tipificacio-dinamica-python-php","title":"2.3.2. Llenguatges de tipificaci\u00f3 din\u00e0mica (Python, PHP...)","text":"<p>En estos llenguatges no es declara la variable pr\u00e8viament. Simplement quan se li assigna un valor, la variable agafa el tipus d'eixe valor. I pot variar de tipus cada vegada que se li assigna un nou valor.</p> Python<pre><code>n = 7       # Primera vegada que ix la variable n. n val 7 i \u00e9s int\nn = 5.67    # Ara n val 5.67. Per tant, ara \u00e9s float\nn = 9       # Ara n val 9. Per tant, torna a ser int\nn = n+2     # Ara n val 11. Continua sent int\nn = n/4     # Ara n val 2.75. Per tant, ara n \u00e9s float\nn = \"Pep\"   # Ara n \u00e9s str (cadena)\nn = n+2     # ERROR. No li podem sumar 2 al text \"Pep\"\n</code></pre> <p>Com veiem a l'exemple, no tindrem les situacions d'error dels llenguatges de tipificaci\u00f3 est\u00e0tica (ja que no s'ha de declarar la variable i poden canviar de tipus). Per\u00f2 pot ser un desavantatge ja que podria ser que volgu\u00e9rem que en fer la divisi\u00f3 de <code>11/4</code> volgu\u00e9rem guardar la part entera (2) i no 2.75. Ens pot portar a situacions inesperades o inconsistents. Caldr\u00e0 anar en compte en estos casos.</p> <p>NOTA</p> <p>Si en algun moment parlem de \"declarar\" una variable en Python, ens estarem referint al primer moment del programa on li s'assigna un valor a eixa variable.</p>"},{"location":"PRG03/#24-ambit-i-visibilitat","title":"2.4. \u00c0mbit i visibilitat","text":"<p>NOTA</p> <p>Aquestos conceptes s'explicaran en detall quan veiem la programaci\u00f3 modular (funcions). No obstant, veiem un avan\u00e7.</p> <p>Les variables poden \"declarar-se\" (comen\u00e7ar a usar-se) en qualsevol part del programa, per\u00f2 segons el lloc on siguen declarades, les podrem fer servir nom\u00e9s en alguna part (variables locals) o b\u00e9 en tot el programa (variables globals).</p> <p>Exemple 1</p> <p>La variable <code>a</code> \u00e9s local a la funci\u00f3 \"funcioneta\"</p> Python<pre><code># ---------------------\ndef funcioneta():\n    a = 3 # declarem la variable 'a' com a LOCAL (dins de la \"funcioneta\")\n    print(a)\n# ---------------------\n\nprint(\"El programa comen\u00e7a a executar-se per ac\u00ed\")\nfuncioneta()\nprint(a) # ERROR perqu\u00e8 accedim a la variable local de \"funcioneta\"\n</code></pre> <p>Si una variable est\u00e0 declarada dins d'una funci\u00f3, nom\u00e9s podem accedir a ella dins d'eixa funci\u00f3.</p> <p>Exemple 2</p> Python<pre><code># ------------------------\ndef funcioneta():\n    print(a)\n# ------------------------\n\nprint(\"El programa comen\u00e7a a executar-se per ac\u00ed\")\na = 3   # Declarem la variable 'a' com a GLOBAL (fora de les funcions)\nfuncioneta()\nprint(a)\n</code></pre> <p>Si una variable \"declarada\" (primer \u00fas) fora de les funcions, podrem accedir a ella des de qualsevol lloc del programa (b\u00e9, sempre despr\u00e9s de ser declarada). Per\u00f2 ja vorem que no conv\u00e9 declarar variables globals.</p> <p>L'\u00e0mbit i visibilitat d'una variable s\u00f3n conceptes \u00edntimament relacionats. Fan refer\u00e8ncia a des d'on es pot accedir a una variable:</p> <ul> <li>La visibilitat \u00e9s la propietat que indica si es pot accedir o no a una variable en un punt determinat del programa.<ul> <li>En l'exemple 1:<ul> <li>Dins de la funci\u00f3 \"funcioneta\" s\u00ed que hi ha visibilitat de 'a'.</li> <li>Fora de la funci\u00f3 \"funcioneta\" no hi ha visibilitat de 'a'.</li> </ul> </li> <li>En l'exemple 2:<ul> <li>En tot el programa s\u00ed que hi ha visibilitat de 'a'.</li> </ul> </li> </ul> </li> <li>L'\u00e0mbit \u00e9s la zona del programa on \u00e9s visible una variable.<ul> <li>En l'exemple 1, l'\u00e0mbit de 'a' \u00e9s dins de la funci\u00f3 \"funcioneta\"</li> <li>En l'exemple 2, l'\u00e0mbit de 'a' \u00e9s a tot el programa.</li> </ul> </li> </ul> <p>En C i Java, a m\u00e9s de definir variables locals a una funci\u00f3 es poden definir locals a un bloc de codi, tancat entre claus <code>{ }</code>. En eixe cas, eixes variables nom\u00e9s poden ser accedides dins d'eixe bloc de codi.</p> <p>En Python un bloc seria el tr\u00f3s de codi (seguit) amb el mateix sagnat (o subsagnat). Per\u00f2 si una variable es declara en eixe bloc, en Python s\u00ed que podem accedir des d'altres blocs, encara que no \u00e9s recomanable:</p> Python<pre><code>if (edat &gt;= 18):\n    major = True #(1)!\nelse:\n    major = False\n\nprint(major) #(2)!\n</code></pre> <ol> <li>El primer \u00fas de \"major\" es fa en este bloc</li> <li>Per\u00f2 Python em permet usar-la fora del bloc</li> </ol> <p>En canvi, \u00e9s recomanable declarar la variable en el \"bloc de fora\":</p> Python<pre><code>major = False #(1)!\n\nif (edat &gt;= 18):\n    major = True\n\nprint(major) #(2)!\n</code></pre> <ol> <li>Declarem la variable en el \"bloc de fora\"</li> <li>... ja que vaig a usar-la en eixe bloc</li> </ol>"},{"location":"PRG03/#3-operadors","title":"3. Operadors","text":"<p>Anem a veure els distints operadors que solen tindre els llenguatges de programaci\u00f3 i a contruir expressions amb elles, aix\u00ed com la forma d'introduir dades per teclat i mostrar resultats per pantalla.</p>"},{"location":"PRG03/#31-operadors-aritmetics","title":"3.1. Operadors aritm\u00e8tics","text":"Python C i Java Significat Observacions + + Suma - - Resta o signe * * Multiplicaci\u00f3 / / Divisi\u00f3 amb decimals (11/4 -&gt; 2.75) En C i Java: (11/4 -&gt; 2  -- 11/4.0 -&gt; 2.75) // NO Divisi\u00f3 entera (11//4 -&gt; 2) % % Residu divisi\u00f3 entera (21%4 -&gt; 1) ** NO Pot\u00e8ncia (2**3 -&gt; 8)"},{"location":"PRG03/#32-operadors-relacionals","title":"3.2. Operadors relacionals","text":"Python C i Java Significat == == Igual != &lt;&gt; != Distint &lt; &lt; Menor &lt;= &lt;= Menor o igual &gt; &gt; Major &gt;= &gt;= Major o igual <p>Ja veurem que, principalment, estos operadors s'utilitzen en les condicions de les instruccions if i while.</p> <p>Exemples</p> Python<pre><code>if (nota &gt;= 5):\n    print(\"Aprovat\")\n...\n</code></pre> Python<pre><code>while (edat &lt; 0):\n    print(\"Edat incorrecta. Torna-me-la a dir\")\n...\n</code></pre>"},{"location":"PRG03/#33-operadors-logics","title":"3.3. Operadors l\u00f2gics","text":"<p>Ja vei\u00e9rem al primer tema quins eren els operador l'ogics i com actuaven (recordeu les \"taules de veritat\"). Veiem ara com es representen en Python, C i Java:</p> Python C i Java Significat or || Vertader si algun \u00e9s vertader and &amp;&amp; Vertader si els 2 s\u00f3n vertaders not ! El contrari <p>Exemples d'operadors l\u00f2gics</p> Python<pre><code>...\nif edat &gt;= 18 and edat &lt;= 65:\n    print(\"Est\u00e0s en edat de treballar\")\nelse:\n    print(\"No est\u00e0s en edat de treballar\")\n...\n</code></pre> Python<pre><code>...\nwhile nota &lt; 0 or nota &gt; 10:\n    print(\"Nota incorrecta. Torna-la a posar\")\n...\n</code></pre> Python<pre><code>plou = True\nfaSol = False\nprint(plou or faSol)    # True\nprint(plou and faSol)   # False\nprint(not plou)         # False\n</code></pre>"},{"location":"PRG03/#331-curtcircuit-dexpressions","title":"3.3.1. Curtcircuit d'expressions","text":"<p>Si recordem les taules de veritat, podem afirmar que...</p> <ul> <li>false AND ... --&gt; false</li> <li>true OR ... --&gt; true</li> </ul> <p>Per tant, com les expressions s'avaluen d'esquerra a dreta, en el moment en qu\u00e8 el compilador puga assegurar el valor final de l'expressi\u00f3 l\u00f2gica (True o False), parar\u00e0 d'avaluar-la. Esta manera de treballar s'anomena curtcircuit d'expressions. Aix\u00f2 ens d\u00f3na un benefici pel que fa al control d'errors i a la valocitat d'execuci\u00f3.</p> <p>Exemples</p> <p>Python<pre><code>if (descompte1 &gt; 0 or descompte2 &gt; 0 or descompte3 &gt; 0):\n    print(\"S'aplica algun descompte\")\n</code></pre> Si el <code>descompte1</code>\u00e9s major que <code>0</code>, ja no es comproven les altres 2 expressions i passa a executar-se directament el print.</p> <p>Python<pre><code>(x&lt;0) and print(\"El valor de la variable \u00e9s negatiu\")\n</code></pre> Nom\u00e9s mostrar\u00e0 el text si el valor de x \u00e9s negatiu.</p> <p>Exercici sobre el curtcircuit d'expressions</p> <p>Qu\u00e8 passar\u00e0 en cada cas?</p> Cas A<pre><code>sumaNotes = 50\nquantsAlumnes = 0\nif (quantsAlumnes &gt; 0) and (sumaNotes/quantAlumnes &gt;= 5):\n    print(\"Nota miyjana aprovada\")\nelse:\n    print(\"Nota mitjana no aprovada\")\n</code></pre> Cas B: Mateix programa per\u00f2 amb els seg\u00fcent if en compte de l'anterior<pre><code>if (sumaNotes/quantAlumnes &gt;= 5) and (auntAlumnes &gt; 0)\n</code></pre>"},{"location":"PRG03/#34-operador-dassignacio","title":"3.4. Operador d'assignaci\u00f3","text":"<p>Este operador ja ha aparegut en molts exemples. S'utilitza quan volem emmagatzemar un valor en una variable. En Python i en la majoria de llenguatges de programaci\u00f3, l'operador d'assignaci\u00f3 \u00e9s el s\u00edmbol igual (=).</p> Python C i Java Significat = = Assignaci\u00f3 <p></p> <p>\u00c9s a dir: primer s'avalua la part de la dreta, i despr\u00e9s s'assigna eixe resultat a la variable esquerra.</p> <p>Exemple</p> Python<pre><code>x = 10      # x valdr\u00e0 10\ny = 20      # y valdr\u00e0 20\nx = x + 1   # x no valdr\u00e0 10, sin\u00f3 11\ny = x + y   # y no valdr\u00e0 20, sin\u00f3 31\n</code></pre> <p>Per descomptat, l'assignaci\u00f3 \u00e9s destructiva (com es veu a l'exemple): sempre que es fa una assignaci\u00f3 elimina el valor antic de la variable. \u00c9s a dir, nom\u00e9s pot guardar una dada en un moment determinat.</p> <p>Si volem assignar un mateix valor a moltes variables tamb\u00e9 ho podem fer aix\u00ed (tamb\u00e9 en C i Java):</p> Python<pre><code>a = b = c = d = 10\n</code></pre>"},{"location":"PRG03/#35-operadors-aritmetics-reduits-operadors-aritmetics-i-dassignacio","title":"3.5. Operadors aritm\u00e8tics redu\u00efts (operadors aritm\u00e8tics i d'assignaci\u00f3)","text":"<p>L'operador d'assignaci\u00f3 que hem vist (=) assigna un valor a una variable. Per\u00f2 si el que volem fer \u00e9s augmentar (o disminuir) el valor que ja t\u00e9 la variable, podem usar els operadors aritm\u00e8tics redu\u00efts.</p> Python C i Java Significat Assignaci\u00f3 redu\u00efda Assignaci\u00f3 equivalent += += Suma i assignaci\u00f3 x += y x = x + y -= -= Resta i assignaci\u00f3 x -= y x = x - y *= *= Producte i assignaci\u00f3 x *= y x = x * y **= NO Pot\u00e8ncia i assignaci\u00f3 x **= y x = x ** y /= /= Divisi\u00f3 i assignaci\u00f3 x /= y x = x / y %= %= Residu i assignaci\u00f3 x %= y x = x % y //= NO Divisi\u00f3 entera i assignaci\u00f3 x //= y x = x // y NO ++ Autoincrement x++ x = x + 1 NO -- Autodecrement x-- x = x - 1 <p>Com veiem, estos dos operadors fan 2 coses: una operaci\u00f3 aritm\u00e8tica i una assignaci\u00f3. Tamb\u00e9 es coneixen com operadors d'actualitzaci\u00f3. En les dos columnes de la dreta, <code>x</code> \u00e9s una variable , i <code>y</code> \u00e9s una expressi\u00f3, constant o variable.</p> <p>Exemple</p> Python<pre><code>y = 1\nx = 4\nx += y      # x = x + y         ---&gt; x = 5\nx *= 2      # x = x * 2         ---&gt; x = 10\nx -= 3 - y  # x = x - (3 - y)   ---&gt; x = 10 - (2)   ---&gt; x = 8\n</code></pre> Exercici 2. Assignacions <p>Al seg\u00fcent programa Python, qu\u00e8 valdr\u00e0 cada variable despr\u00e9s de cada assignaci\u00f3?</p> Python<pre><code>a = 6\nb = 3\nb = 1 + b           # a =       b =\na = a / b           # a =       b =\nb = 6 // b + b      # a =       b =\n</code></pre> Exercici 3 <p>En el seg\u00fcent programa Python, qu\u00e8 valdr\u00e0 cada variable despr\u00e9s de cada assignaci\u00f3?</p> Python<pre><code>a=4\nb = 20\nb += 23     # a=     b= \nb //= 2     # a=     b= \na -= 2      # a=     b= \na *= b + 2  # a=     b= \na %= b      # a=     b= \na**= b-19   # a=     b= \n</code></pre>"},{"location":"PRG03/#36-altres-operadors","title":"3.6. Altres operadors","text":""},{"location":"PRG03/#361-el-sizeof","title":"3.6.1. El sizeof","text":"<p>La quantitat de bytes que s'utilitza per a guardar una dada dep\u00e9n del tipus de dades, aix\u00ed com del llenguatge de programaci\u00f3, la varsi\u00f3 del compilador i del tipus de processador que s'utilitze (32 o 64 bits).</p> <p>Per tant, perqu\u00e8 el nostre programa puga ser portable, de vegades \u00e9s necessari saber quants bytes ocupen les variables amb les quals treballarem. Per aix\u00f3 alguns llenguatges tenen una funci\u00f3 per a tal fi:</p> En Python: sys.getsizeof()<pre><code>import sys\nx = 10\ntext = \"10\"\nprint(sys.getsizeof(x), \"bytes\")            # 28 bytes (1)\nprint(sys.getsizeof(text), \"bytes\")         # 51 bytes (2)\nprint(sys.getsizeof(1000), \"bytes\")         # 28 bytes\nprint(sys.getsizeof(\"Hola, Pep\"), \"bytes\")  # 58 bytes\nprint(sys.getsizeof(1234.56789), \"bytes\")   # 24 bytes (3)\n</code></pre> <ol> <li>Qualsevol enter ocupa 28 bytes</li> <li>Quantitat de caracters + 49</li> <li>Un float ocupa 24 bytes</li> </ol>"},{"location":"PRG03/#4-expressions","title":"4. Expressions","text":"<p>Ja hem vist les dades i els operadors. Amb ells podem formar expressions.</p> <p>Una expressi\u00f3 \u00e9s una combinaci\u00f3 de dades (operands) i operadors (seguint certes regles de construcci\u00f3) i que poden estar agrupats per par\u00e8ntesi per a indicar l'ordre de c\u00e0lcul.</p> <p>Exemples d'expressions</p> <ul> <li>base * altura / 2</li> <li>(-b + sqrt(b2 - 4ac))/2</li> <li>1000</li> <li>edat &gt;= 0 and edat &lt;= 100</li> <li>cognoms</li> <li>\"Sr.\" + nom + \" \" + cognoms</li> </ul> <p>Llocs on pot apar\u00e9ixer una expressi\u00f3</p> <ul> <li>En una assignaci\u00f3:<ul> <li>area = base * altura / 2</li> <li>total += preu * quantitat</li> </ul> </li> <li>En els par\u00e0metres d'una funci\u00f3:<ul> <li>sqrt(b ** 2 - 4 * a * c)</li> <li>print(\"Sr.\" + nom + \" \" + cognoms)</li> </ul> </li> <li>En una condici\u00f3:<ul> <li>if(edat &lt; 0):</li> <li>while (nota &lt; 0 or nota &gt; 10)</li> </ul> </li> </ul>"},{"location":"PRG03/#41-el-tipus-de-les-expressions","title":"4.1. El tipus de les expressions","text":"<p>Igual que una variable (o una constant) \u00e9s d'un tipus determinat, una expressi\u00f3 tamb\u00e9 t\u00e9 el seu tipus.</p> <p>Per exemple, tenim les variables enteres <code>a</code> i <code>b</code> i la variable float <code>x</code>.</p> <ul> <li>\u00c9s l\u00f2gic pensar que <code>a * b</code> tamb\u00e9 ser\u00e0 entera, i tamb\u00e9 <code>a + b</code>, etc</li> </ul> <p>Ara b\u00e9:</p> <ul> <li>De quin tipus ser\u00e0 una expressi\u00f3 amb operands de diferents tipus: <code>a * x</code>?</li> <li>De quin tipus ser\u00e0 <code>a / b</code>? Enter (sense decimals) o float (amb decimals)?</li> </ul> <p>En eixos casos cada llenguatge de programaci\u00f3 fa una conversi\u00f3 de tipus o promoci\u00f3. Hi ha diferents formes de promoci\u00f3:</p>"},{"location":"PRG03/#411-promocio-interna","title":"4.1.1. Promoci\u00f3 interna","text":"<p>Si en una expressi\u00f3 hi ha dades amb decimals i sense, el resultat tamb\u00e9 tindr\u00e0 decimals.</p> <p>Per tant, si tenim <code>4 + 2.3</code> el resultat ser\u00e0 <code>6.3</code> (float), no <code>6</code> (int).</p> <p>Esta norma serveix per a tots els llenguatges. Per\u00f2 C i Java tenen m\u00e9s tipus per a representar els n\u00fameros. En estos llenguatges, si una expressi\u00f3 t\u00e9 diferents tipus, l'expressi\u00f3 ser\u00e0 del tipus que ocupa m\u00e9s bytes (per\u00f2 si l'expressi\u00f3 t\u00e9 n\u00fameros decimals, l'expressi\u00f3 ser\u00e0 d'un tipus amb decimals).</p> <p></p>"},{"location":"PRG03/#412-promocio-per-assignacio","title":"4.1.2. Promoci\u00f3 per assignaci\u00f3","text":"<p>Esta conversi\u00f3 la fa el compilador quan s'intenta assignar a una variable una expressi\u00f3 de diferent tipus.</p> <p></p> Python: la variable passar\u00e0 a ser del tipus de l'expressi\u00f3<pre><code>preu = 3    # Ara preu \u00e9s int (i el seu valor \u00e9s 3)\npreu = 4.6  # Ara preu \u00e9s float (i el seu valor \u00e9s 4.6)\n</code></pre> C, Java: el tipus de la variable no canvia. \u00c9s l'expressi\u00f3 la que canvia al tipus de la variable perqu\u00e8 es fa\u00e7a l'assignaci\u00f3<pre><code>int preu;   // Ara (i en tot el programa) preu ser\u00e0 int\npreu = 3;   // preu ara val 3\npreu = 4.6; // preu ara val 4 i continua sent int (en Python seria 4.6) (1)\n</code></pre> <ol> <li>En este cas diem que s'ha fet una promoci\u00f3 per assignaci\u00f3: el float 4.6 ha \"promocionat\" a l'int 4.</li> </ol>"},{"location":"PRG03/#413-promocio-forcada-casting","title":"4.1.3. Promoci\u00f3 for\u00e7ada (c\u00e0sting)","text":"<p>El programador pot indicar que una expressi\u00f3 canvie a un tipus en concret. Eixa conversi\u00f3 es diu c\u00e0sting o promoci\u00f3 for\u00e7ada.</p> <p></p> Exemple d'us en Python<pre><code>x = 4.6\nn = int(x) * 2  # int(4.6) * 2 --&gt; 4 * 2    --&gt; 8 --&gt; n valdr\u00e0 8\nn = int(x * 2)  # int(4.6 * 2) --&gt; int(9.2) --&gt; 9 --&gt; n valdr\u00e0 9\n\neuros = 10\nprint(int(euros * 166.386)) # Mostrar\u00e0 1663 (sense deimals)\n\ntel = 962829995 # tel \u00e9s un enter i val 962829995. Podriem sumar-li n\u00fameros, etc.\ntel = str(tel)  # tel ara \u00e9s una cadena i val \"962829995\". Podriem concatenar...\n</code></pre> <p>Els tipus possibles en Python s\u00f3n: int, float, str i bool.</p> Exemple d'\u00fas en C i Java<pre><code>int n;\nfloat x = 4.6;\nn = ((int)x)*2;     // (4*2)        --&gt; n valdr\u00e0 8\nn = ((int)(x*2));   // (int)(9.2)   --&gt; n valdr\u00e0 9\n\nint n = 10;\nint m = 3;\nfloat x = 4.6;\nx = (float)(n/m);   // (float)3         --&gt; x valdr\u00e0 3.0\nx = (float)n/m;     // (float)(10)/3    --&gt; 10.0/3  --&gt; x valdr\u00e0 3.333...\n</code></pre> <p>En este \u00faltim cas veiem que el c\u00e0sting \u00e9s \u00fatil per si volem fer una divisi\u00f3 d'emters per\u00f2 amb decimals en C i Java.</p>"},{"location":"PRG03/#5-precedencia-i-associativitat-doperadors","title":"5. Preced\u00e8ncia i associativitat d'operadors","text":"<p>Ac\u00ed tenim una relaci\u00f3 dels operadors ordenats per proced\u00e8ncia de major a menor. En cas d'igualtat de preced\u00e8ncia de divers operadors en una expressi\u00f3, l'associativitat ens diu per on es comen\u00e7a a avaluar (d'esquerra a dreta o de dreta a esquerra).</p> CATEGOR\u00cdA DE L'OPERADOR OPERADORS PYTHON OPERADORS JAVA ASSOCIATIVITAT Par\u00e8ntesi, vectors ( )  [ ] ( )  [ ] ESQUERRA Operadors unaris + - ++ -- + - DRETA Pot\u00e8ncia ** DRETA Multiplicaci\u00f3, divisi\u00f3 i residu * / // % * / % ESQUERRA Suma i resta + - + - ESQUERRA Operadors relacionals &lt; &lt;= &gt; &gt;= == != &lt;&gt; &lt; &lt;= &gt; &gt;= == != ESQUERRA 'No' l\u00f2gic not ! ESQUERRA 'i' l\u00f2gic and &amp;&amp; ESQUERRA 'o' l\u00f2gic or || ESQUERRA Operador condicional ?: DRETA Assignacions = += -= = *= /= //= %= = += -= *= /= %= DRETA <p>No cal saber-se tot aix\u00f2 de mem\u00f2ria. Simplement hem de saber que, per a avaluar les expressions, hi ha unes regles per vore qu\u00e8 s'avalua primer. Davant del dubte, farem \u00fas dels par\u00e8ntesis per a indicar quines operacions volem que es facen primer.</p> Exercici 5. Expressions i tipus <p>Suposem que tenim estes variables en un programa en Python:</p> <ul> <li><code>a = 12</code></li> <li><code>x = 2.5</code></li> <li><code>y = 0.6</code></li> </ul> <p>Indica de quin \u00e9s el valor de cadascuna de les seg\u00fcents expressions:</p> <ul> <li><code>a + x</code></li> <li><code>x + y</code></li> <li><code>int(x) + y</code></li> <li><code>int(x) + int(y)</code></li> <li><code>int(x + y)</code></li> <li><code>a / 4</code></li> <li><code>a // 4</code></li> <li><code>a % 4</code></li> <li><code>a + x * 2</code></li> <li><code>a / a - 2</code></li> <li><code>a ** 2 + 1</code></li> <li><code>a &lt; x or y &lt; x</code></li> <li><code>not(a &lt; x)</code></li> <li><code>(a &gt;= x) and (y &lt;= a)</code></li> </ul>"},{"location":"PRG03/#6-eixida-de-dades-print","title":"6. Eixida de dades: print","text":"<p>Les instruccions d'entrada i eixida permeten la construcci\u00f3 de programes interactius. \u00c9s a dir, amb elles podrem mostrar dades en pantalla i introduir dades per teclat.</p> <p>En Python:</p> <ul> <li>Eixida de dades: print</li> <li>Entrada de dades: input</li> </ul>"},{"location":"PRG03/#61-exemple-senzill-de-print","title":"6.1. Exemple senzill de print","text":"<p>Esta funci\u00f3 mostra per pantalla all\u00f2 que se li passa com a par\u00e0metre. Ja ha aparegut anteriorment. Anem a detallar el seu funcionament.</p> <p>Veiem estos exemples:</p> Python<pre><code>nom = \"Pep\"\ncognoms= \"Garcia\"\nprint(\"Hola,\", nom, cognoms)    # Mostra: Hola, Pep Garcia\nprint(\"Hola,\" + nom + cognoms)  # Mostra: Hola,PepGarcia\n</code></pre> <p>Com podem vore:</p> <ul> <li>print pot rebre una o m\u00e9s dades com a arguments (separats per comes).</li> <li>Si els arguments s\u00f3n textos han d'anar entre cometes (simples o dobles).</li> <li>Es mostren els textos separats per 1 espai. Al final es posa un salt de l\u00ednia.</li> <li>Les cadenes de text poden concatenar-se amb l'operador '+' per\u00f2 no posa espais entre elles. I no podem concatenar un text amb un n\u00famero. Donaria error.</li> </ul>"},{"location":"PRG03/#62-altres-parametres-del-print","title":"6.2. Altres par\u00e0metres del print","text":"<p><code>print(objecte/s, sep=separador, end=finalitzador, file=fitxer)</code></p> <ul> <li>objecte/s --&gt; textos, n\u00fameros, variables o expressions que volem mostrar (separats er comes).</li> </ul> Python<pre><code>dies = 3\nprint(\"En\", dies, \"dies hi ha\", dies*24, \"hores\")\n</code></pre> <p></p> <ul> <li>sep=separador --&gt; Ac\u00ed indicarem amb una cadena de car\u00e0cters com volem que apareguen separats els objectes que mostrem. Si no posem res, el separador \u00e9s un espai en blanc.</li> </ul> <p>Python<pre><code>print(\"L\u00cdNIA\", \"ART\u00cdCLE \", \"QUANT.\", \"PREU\", \"IMPORT\", sep=\"\\t\")\nprint(\"------- --------------- ------- ------- ------\")\nprint(1, \"Tomaques\", 3, 2.5, 3*2.5, sep=\"\\t\")\nprint(2, \"Peres   \", 12.5, 1.5, 12*1.5, sep=\"\\t\")\nprint(3, \"Pl\u00e0tans \", 2, 2, 2*2, sep=\"\\t\")\n</code></pre> </p> <ul> <li>end=finalitzador --&gt; Cadena que es mostrar\u00e0 al final del text. Si no posem res, el finalitzador \u00e9s el fi de l\u00ednia (car\u00e0cter '\\n').</li> </ul> Python<pre><code>for n in range(1, 5): #(1)!\n    print(n, end=\" \") # Amb eixe end aconseguim que print NO fa\u00e7a intro sin\u00f3 espai.\nprint() # En acabar fem un print() per a fer un \u00fanic intro al final.\n</code></pre> <ol> <li>Bucle on n va d'1 a 4 (ja ho veurem)</li> </ol> <p></p> <ul> <li>file=fitxer --&gt; Si no volem que es mostre per pantalla sin\u00f3 a un fitxer.</li> </ul> Python<pre><code>fitxer=open(\"nomFitxer.txt\", \"a\")   #(1)!\nprint(\"Hola, Pep\", file=fitxer)\nfitxer.close() #(2)!\n</code></pre> <ol> <li>El mode \"a\" afig el text al final del fitxer. El mode \"w\" reescriu el fitxer.</li> <li>Fins que no es \"tanca\" el fitxer, no s'escriu el buffer en ell.</li> </ol>"},{"location":"PRG03/#63-usant-el-print-amb-format-us-de-f-strings","title":"6.3. Usant el print amb format (\u00fas de f-strings)","text":"<p>Suposem que volem mostrar els articles comprats, en forma de taula:</p> <p></p> <p>Qu\u00e8 passaria si cada part de cada l\u00ednia la separem amb un tabulador?</p> Python<pre><code>print(\"LIN\", \"ARTICLE            \", \"KILOS\", \"PREU/KG\", \"IMPORT\", sep=\"\\t\")\nprint(\"---\", \"-------------------\", \"-----\", \"-------\", \"------\", sep=\"\\t\")\n\nlinia = 1\narticle = \"Tomaques del Mareny\"\nquantitat = 3\npreu = 2.5\nprint(linia, article, quantitat, preu, quantitat*preu, sep=\"\\t\")\n\nlinia = 2\narticle = \"Safr\u00e0 iran\u00ed\"\nquantitat = 0.0004\npreu = 4266.67\nprint(linia, article, quantitat, preu, quantitat*preu, sep=\"\\t\")\n</code></pre> <p>Segons les dades que tinguen les variables, podria ser que ens desquadrara tot:</p> <p></p> <p>Aix\u00f2 \u00e9s degut a que els noms dels articles s\u00f3n de distinta llarg\u00e0ria i els n\u00fameros no sempre tenen els mateixos decimals, etc.</p> <p>Per a evitar aix\u00f2 (a partir de la versi\u00f3 3.6 de Python) tenim els f-strings, \u00e9s a dir: \"cadenes amb format\", on podrem especificar el format que tindr\u00e0 cada variable que posem en la cadena. Recordem que vol\u00edem que l'aspecte fora este:</p> <p></p> <p>Per tant, li haurem de dir que en cada l\u00ednia d'articles:</p> <ul> <li>El n\u00famero de l\u00ednia ocupe 3 posicions</li> <li>El nom de l'article ocupe 20 posicions</li> <li>Els kilos ocupen 7 posicions (4 d'elles que siguen decimals)</li> <li>El preu que ocupe 7 posicions (2 d'elles que siguen decimals)</li> <li>L'import que ocupe 6 posicions (2 d'elles decimals)</li> </ul> <p>I la forma de fer-ho amb el f-string \u00e9s aix\u00ed:</p> <p><code>print(f\"{linia:3} {article:20} {quantitat:7.4f} {preu:7.2f} {quantitat*preu:6.2f}\")</code></p> <p>\u00c9s a dir, abans de la cadena es posa una f (o F), i cada variable o expressi\u00f3 es posa dins les claus i especificant el format despr\u00e9s dels dos punts. Exemples:</p> Python<pre><code>nom = \"Pep\"\nedat = 30\npi = 3.14159265359\nprint(f\"El meu nom \u00e9s {nom} i tinc {edat} anys\")\nprint(f\"Tinc {edat:&lt;10} anys\")  # Posa el n\u00famero a l'esquerra dins de 10 car\u00e0cters\nprint(f\"Tinc {edat:&gt;10} anys\")  # Posa el n\u00famero a la dreta dins de 10 car\u00e0cters\nprint(f\"Tinc {edat:^10} anys\")  # Posa el n\u00famero centrat dins de 10 car\u00e0cters\nprint(f\"Pi \u00e9s {pi:.2f} aprox\")  # Mostra 2 decimals\nprint(f\"Pi \u00e9s {pi:10.2f} aprox\")    # Mostra 2 decimals, a la dreta dins de 10 car.\n</code></pre> <p>El resultat seria:</p> <p></p> <p>Observem que emprem <code>&lt;</code>, <code>&gt;</code> i <code>^</code> per a posar el valor a l'esquerra, dreta o centrat. I per als float indiquem tamb\u00e9 quants decimals volem (i li posem una <code>f</code>).</p> <p>Realment els f-strings no tenen res a vore amb el print, sin\u00f3 que serveix per a crear una cadena amb dades amb el format que volem. Per exemple:</p> Python<pre><code>base = float(input(\"Base: \"))\naltura = float(input(\"Altura: \"))\n\narea = (base * altura) / 2\n\nmissatge = f\"L'\u00e0rea del triangle de base {base} i altura {altura} \u00e9s {area:.2f}\"\n\nprint(missatge)\n</code></pre> <p>A m\u00e9s, Python disposa de moltes operacions que podem fer en una cadena: passar-la a min\u00fascules, a maj\u00fascules, obtindre una subcadena... I algunes de les operacions s\u00f3n alineaci\u00f3 a dreta, esquerra, centrat.</p> <p>En VSCode (i altre IDEs), si posem el punt al costat d'una variable (o constant) de tipus str, vorem les operacions que podem fer amb ella:</p> <p></p> <p>Per tant, podem fer altres coses en les cadenes sense usar els f-strings. Ac\u00ed tenim uns exemples:</p> Python<pre><code>nom = \"Pep\"\nprint(\"Hola\", nom.upper(), \"com va?\")           # Hola PEP com va?\nprint(\"Hola\", nom.ljust(10, '_'), \"com va?\")    # Hola Pep_______ com va?\nprint(\"Hola\", nom.center(10, '_'), \"com va?\")   # Hola ___Pep____ com va?\nprint(\"Hola\", nom.rjust(10, '_'), \"com va?\")    # Hola _______Pep com va? (1)\n</code></pre> <ol> <li>En compte d'eixe '_' podem posar qualsevol car\u00e0cter, com per exemple un espai.</li> </ol>"},{"location":"PRG03/#7-entrada-de-dades-input","title":"7. Entrada de dades: input","text":"<p>Serveix per a que un programa puga demanar dades per teclat. Ser\u00e0 un poc diferent segons els tipus de dades que volem introduir.</p> <p>Vegem-ho amb exemples:</p>"},{"location":"PRG03/#71-entrada-de-text","title":"7.1. Entrada de text","text":"Python<pre><code>print(\"Com et diuen?\")\nnom = input() #(1)!\nprint(\"Hola, \" + nom + \"!\")\n</code></pre> <ol> <li>Ac\u00ed l'execuci\u00f3 espera que li posem per teclat un valor i polsem \"INTRO\". El valor introdu\u00eft es guardar\u00e0 a la variable nom.</li> </ol> <p>Ara b\u00e9, l'input de Python tamb\u00e9 permet indicar el que estem demanant, sense haver de fer abans el print:</p> Python<pre><code>nom = input(\"Com et diuen?\") #(1)!\nprint(\"Hola, \" + nom + \"!\")\n</code></pre> <ol> <li>Ac\u00ed mostrar\u00e0 el text, i far\u00e0 l'input normal.</li> </ol> <p></p>"},{"location":"PRG03/#72-entrada-de-numeros","title":"7.2. Entrada de n\u00fameros","text":"<p>El problema \u00e9s si, en compte de demanar un text per teclat, volem demanar un n\u00famero, ja que l'agafar\u00e0 com a text i no podrem fer operacions aritm\u00e8tiques amb ell:</p> Python<pre><code>num = input(\"Dis-me un n\u00famero: \")\nprint(\"El seg\u00fcent n\u00famero \u00e9s el \", num + 1)  # ERROR!\n</code></pre> <p>Aix\u00f2 provoca l'error:</p> <p><code>TypeError: can only concatenate str (not \"int\") to str</code></p> <p>Aix\u00f2 \u00e9s degut  a que input sempre retorna un str. Per aix\u00f2, en l'expressi\u00f3 num + 1 intenta concatenar en compte de sumar. I dona error perqu\u00e8 no es poden concatenar n\u00fameros sin\u00f3 textos.</p> <p>Per tant, si volem tractar-lo com a enter caldr\u00e0 fer un c\u00e0sting (conversi\u00f3 de tipus):</p> Python<pre><code>num = input(\"Dis-me un n\u00famero: \")\nnum = int(num)\nprint(\"El seg\u00fcent n\u00famero \u00e9s el \", num + 1)\n</code></pre> <p></p> <p>O b\u00e9 es podria fer l'input i el c\u00e0sting en la mateixa instrucci\u00f3:</p> Python<pre><code>num = int(input(\"Dis-me un n\u00famero: \"))  #(1)!\nprint(\"El seg\u00fcent n\u00famero \u00e9s el \", num + 1)\n</code></pre> <ol> <li>Es fa c\u00e0sting sobre l'entrada de dades</li> </ol> <p>En compte d'int tamb\u00e9 es pot fer casting a float, si fora el cas.</p>"},{"location":"PRG03/#73-diverses-entrades-en-un-mateix-input","title":"7.3. Diverses entrades en un mateix input","text":"<p>En un input podem demanar diverses dades separades per un espai en blanc (o pel car\u00e0cter que volem). Ara b\u00e9: aix\u00f2 no t\u00e9 res a vore amb l'input, sin\u00f3 amb el m\u00e8tode split del tipus de dades str. Veiem uns exemples:</p> Python<pre><code>horaCompleta = input(\"Dis-me quina hora \u00e9s (en format h:m:s): \")\nhores, minuts, segons = horaCompleta.split(\":\") #(1)!\n\npes, altura = input(\"Dis-me el pes i altura (seprats per blanc): \").split()\n</code></pre> <ol> <li>Fem 3 assignacions alhora. split separa una cadena en una llista de cadenes.</li> </ol> <p></p> <p>Veiem que quan fem split, en l'assignaci\u00f3 cal posar tantes variables com dades s'espera que s'introdu\u00efsquen. Si no, donar\u00e0 error.</p> <p>Cal tindre en compte que despr\u00e9s caldria fer els c\u00e0stings corresponents a int o float de cada variable.</p> Exercici 6. Entrada i eixida de dades <p>Fes un programa que pregunte quants anys t\u00e9 alg\u00fa i que mostre per pantalla la quantitat d'anys que falten per a la majoria d'edat i per a jubilar-se.</p> Exercici 7 <p>Programa que pregunte per la base i l'altura d'un triangle i mostre per pantalla l'\u00e0rea d'eixe triangle</p> Exercici 8 <p>Demana per teclat les dades de 2 llibres: t\u00edtol, autor i preu (permet decimals). Despr\u00e9s cal mostrar les dades en forma de taula: 30 car\u00e0cters per al t\u00edtol, 20 per a l'autor i 10 per al preu (incloent 2 decimals i alineat a la dreta)</p> Exercici 9 <p>Demana per teclat nom\u00e9s un valor: una data (per exemple 6/9/2024). Despr\u00e9s escriu eixa data per\u00f2 amb el format: \"6 del 9 de 2024\".</p>"},{"location":"PRG03/#8-exercicis","title":"8. Exercicis","text":"Exercici 10 <p>Escriu el resultat de les seg\u00fcents expressions:</p> <ul> <li><code>5 / 2 + 17 % 3</code></li> <li><code>3 * 6 / 2 + 18 / 3 * 2</code></li> <li><code>42 * 2 / 3 / (5 + 2)</code></li> <li><code>((5 + 3) / 2 * 3) / 2 - int(28.7) // 4 + 29 % 3 * 4</code></li> <li><code>3 &lt;= 4</code></li> <li><code>45 &lt;= 7 or not (5 &gt;= 7)</code></li> <li><code>(8 * 2 &lt; 5 or 7 + 2 &gt; 9) and 8 - 5 &lt; 18</code></li> <li><code>(2 * 7 &gt; 5 or 7 / 2 == 3) and (7 &gt; 25 or not True) and True</code></li> <li><code>35 &gt; 47 and 9 == 9 or 35 != 3 + 2 and 3 &gt;= 3</code></li> <li><code>9 == 15 or 8 != 5 and 7 == 4</code></li> <li><code>8 &gt; 8 or 7 == 7 and not(5 &lt; 5)</code></li> <li><code>4 + 2 &lt; 8 and 24 + 1 == 25 or True</code></li> </ul> Exercici 11 <p>Escriu una expressi\u00f3 on s'especifique que una variable num\u00e8rica de nom quant siga menor o igual que 500 i m\u00faltiple de 5 per\u00f2 distinta de 100.</p> Exercici 12 <p>Troba els errors en el seg\u00fcent programa que calcula l'\u00e0rea d'un cercle a partir del radi. Despr\u00e9s copia'l amb les correccions i executa'l.</p> <pre><code>print(\"pi=\", pi)\npi = 3,14\nprint(Programa de c\u00e0lcul de l'\u00e0rea d'un cercle)\nradi = input('Dis-me el radi');\n'''Calcular i imprimir l'area\narea = PI * radio**2;\nprint('\\n\\nL'\u00e0rea del cercle \u00e9s: {aera:5.2}\\n');\n</code></pre> Exercici 13 <p>Sense executar el programa, digues qu\u00e8 mostrar\u00e0 per pantalla:</p> Python<pre><code>a = 10\nb = 3\nc = a/b\nd = a&lt;b and b&lt;c\na += a + b\nb = float(a//b)\nprint(a, b, c, d)\n</code></pre> Exercici 14 <p>Contesta les seg\u00fcents q\u00fcestions tipus test:</p> <ol> <li>Els tipus primitius en Python s\u00f3n:<ul> <li>bool, char, short, int, long, float, double</li> <li>int, float, boo, str</li> <li>car\u00e0cters, variables i constants</li> </ul> </li> <li>Es defineix <code>a = 5</code>, <code>b = 2</code> i <code>c = 0</code>. Quin ser\u00e0 el valor de <code>c</code> despr\u00e9s d'esta instrucci\u00f3: <code>c = a &gt; b</code><ul> <li>3</li> <li>2</li> <li>True</li> <li>False</li> <li>Error</li> </ul> </li> <li>Quin \u00e9s el valor d'esta expressi\u00f3: <code>10 / int(4.5)</code><ul> <li>2</li> <li>2.5</li> <li>3</li> <li>Altra cosa</li> </ul> </li> </ol>"},{"location":"PRG04/","title":"UD4. Estructures de control en Python","text":""},{"location":"PRG04/#1-sentencies","title":"1. Sent\u00e8ncies","text":"<p>Les sent\u00e8ncies s\u00f3n cadascuna de les ordres que es donen a un programa. Hi ha de diferent tipus, independentment del llenguatge de programaci\u00f3:</p> <ul> <li>D'importaci\u00f3: Indiquen quines llibreries del programa van a fer-se servir. Com ja hem vist, les llibreries s\u00f3n un conjunt de funcions que ja estan fetes. Les sent\u00e8ncies d'importaci\u00f3 van al principi del programa.</li> </ul> Python<pre><code>import math\n\nprint(\"L'arrel de 25 \u00e9s\", math.sqrt(25))\n</code></pre> <ul> <li>Declaratives: No \u00e9s el cas de Python, per\u00f2 en C i Java vorem que per a emprar una variable primer cal declarar-la o definir-la (indicar el tipus). Aix\u00f2 es fa en sent\u00e8ncies declaratives. Ara b\u00e9, tamb\u00e9 entre en este grup les declaracions de funcions (ja entrarem en detall).</li> </ul> Python<pre><code>def saluda(nom):\n    print(\"Hola, \" + nom + \"!\")\n\nsaluda(\"Pep\")\nsaluda(\"Maria\")\n</code></pre> <ul> <li>Instruccions seq\u00fcencials: B\u00e0sicament s\u00f3n les instruccions d'assignaci\u00f3, de mostrar per pantalla i llegir de teclat. Encara que hi ha d'altres com: emetre un so, esborrar un fitxer... o invocar (cridar) a una funci\u00f3.</li> </ul> Python<pre><code>edat = int(input(\"Edat: \"))\nany_naix = 2024 - edat\nprint(\"Nasqueres en\", any_naix)\n</code></pre> <ul> <li>De control: S\u00f3n les que vorem en este tema. Permeten, sepenent d'una condici\u00f3, executar unes instruccions o altres (bifurcacions) o repetir un conjunt d'instruccions (bucles).</li> </ul> Python<pre><code>edat = int(input(\"Edat: \"))\nif (edat &gt;= 18):\n    print(\"Vota\")\nelse:\n    print(\"No vota\")\n</code></pre>"},{"location":"PRG04/#2-bifurcacions","title":"2. Bifurcacions","text":"<p>Les instruccions de bifurcaci\u00f3 (o selecci\u00f3) serveixen per a quan volem executar un conjunt d'rdres nom\u00e9s si es compleix alguna condici\u00f3 determinada.</p> <p>La instrucci\u00f3 que s'usa en tots els llenguatges \u00e9s if, per\u00f2 cada llenguatge t\u00e9 la seua sintaxi. Veiem la de Python.</p>"},{"location":"PRG04/#21-bifurcacio-simple-if","title":"2.1. Bifurcaci\u00f3 simple: if","text":"<p>S'executen unes instruccions nom\u00e9s si es compleix una condici\u00f3. Si no es compleix la condici\u00f3 no s'executa res en particular. Usarem:</p> Python<pre><code>edat = int(input(\"Quants anys tens? \"))\n\nif edat &gt; 10:\n    print(\"Com ja eres majoret puc dir-te que...\")\n    print(\"... els reis s\u00f3n els pares\")\n\nprint(\"Bon Nadal\")\n</code></pre> <p>Veiem que la sintaxi \u00e9s:</p> Python<pre><code>if condici\u00f3:\n    acci\u00f3_1\n    acci\u00f3_2\n    ...\n    acci\u00f3_n\n</code></pre>"},{"location":"PRG04/#22-bifurcacio-doble-if-else","title":"2.2. Bifurcaci\u00f3 doble: if-else","text":"<p>Si es compleix una condici\u00f3 s'executen unes instruccions. Si no es compleix, s'executen unes altres. Usarem if i else:</p> Python<pre><code>a = int(input(\"Dis-me un n\u00famero: \"))\nb = int(input(\"Dis-me un altre n\u00famero: \"))\n\nif a &gt; b:\n    major = a\nelse:\n    major = b\n\nprint(\"El m\u00e9s gran \u00e9s:\", major)\n</code></pre>"},{"location":"PRG04/#221-sagnat-obligatori-en-python","title":"2.2.1. Sagnat obligatori en Python","text":"<p>Les instruccions que depenen d'una condici\u00f3 es diu que formen un bloc.</p> <ul> <li>Python: els blocs van sagnats obligat\u00f2riament, respecte la condici\u00f3 del bloc</li> </ul> <p></p> <ul> <li>C, Java (i la majoria de llenguatges): els blocs van tancats entre claus { ... } i preferiblement sagnats.</li> </ul> Java<pre><code>...\nif (condici\u00f3) {\n    ...\n    ...\n}\nelse {\n    ...\n    ...\n}\n</code></pre> Exercici 1. Bifurcacions <p>Fes un programa que calcule les solucions reals de l'equaci\u00f3 de 2n grau <code>ax\u00b2 + bx + c = 0</code> mitjan\u00e7ant la f\u00f3rmula:</p> <p></p> <ul> <li>S'ha de demanar per teclat quins valors tenen <code>a</code>, <code>b</code> i <code>c</code>.</li> <li>Cal comprovar si t\u00e9 soluci\u00f3 (all\u00f2 que est\u00e0 dins l'arrel ha de ser possitiu).</li> <li>Ha de mostrar les 2 solucions de la <code>x</code> (una amb el <code>+</code> i altra amb el <code>-</code>). O b\u00e9, nom\u00e9s 1 soluci\u00f3 si les 2 s\u00f3n la mateixa.</li> <li>Per calcular l'arrel usarem la funci\u00f3 <code>math.sqrt()</code>. de la llibreria math.</li> </ul>"},{"location":"PRG04/#23-bifurcacio-multiple-if-elif-else","title":"2.3. Bifurcaci\u00f3 m\u00faltiple: if-elif-...-else","text":"<p>Podem pendre diferents accions en base a diferents condicions.</p> <p>Emprarem 1 o diversos elif, que \u00e9s una contracci\u00f3 d'else if.</p> Python<pre><code>estacio = int(input(\"Dis-me estaci\u00f3 (1 a 4):\"))\n\nif estacio == 1:\n    print(\"Primavera\")\nelif estacio == 2:\n    print(\"Estiu\")\nelif estacio == 3:\n    print(\"Tardor\")\nelif estaci\u00f3 == 4:\n    print(\"Hivern\")\nelse:\n    print(\"Error!\")\n\nprint(\"Ad\u00e9u\")\n</code></pre> <p>Este \u00e9s un exemple complet de sent\u00e8ncia if. Com hem vist, les parts elif i else s\u00f3n opcionals. Per tant, la sintaxi completa de l'if \u00e9s:</p> Python<pre><code>if condici\u00f3_1:\n    accions_1\nelif condici\u00f3_2:\n    accions_2\n...\nelif condici\u00f3_N:\n    accions_N\nelse\n    accionsElse\n</code></pre> Exercici 2. Bifurcaci\u00f3 m\u00faltiple <p>Demana una nota amb decimals i mostra el text corresponent: \"ins\", \"suf\", \"b\u00e9\", \"not\" o \"exc\". O b\u00e9 \"error\" si la nota no est\u00e0 entre 0 i 10.</p> Exercici 3 <p>Calculadora. Fes un programa que llija de teclat 2 n\u00fameros i una operaci\u00f3 aritm\u00e8tica (S/R/P/D). El prgrama far\u00e0 el c\u00e0lcul i imprimir\u00e0 el resultat.</p>"},{"location":"PRG04/#24-altres-consideracions-sobre-les-bifurcacions","title":"2.4. Altres consideracions sobre les bifurcacions","text":""},{"location":"PRG04/#241-ifs-niuats","title":"2.4.1. ifs niuats","text":"<p>Podem posar un if dins d'un altre, tant en la part de l'if, o d'algun elif o de l'else.</p> <p>Exemple</p> Python<pre><code>edat = int(input(\"Quants anys tens? \"))\nif edat &lt; 0:\n    print(\"Error!\")\nelse:\n    print(\"Edat correcta\")\n    if edat &lt; 12:\n        print(\"No has fet ESO\")\n        if edat &lt; 6:\n            print(\"No has fet prim\u00e0ria\")\n        else:\n            print(\"Est\u00e0s en prim\u00e0ria\")\n        print(\"Has de fer ESO\")\n    elif edat &lt; 16:\n        print(\"Est\u00e0s en ESO\")\n    elif edat &lt; 65:\n        print(\"Est\u00e0s en edat de treballar\")\n    else:\n        print(\"Xe, jubila't!\")\n    print(\"T'he dit coses segons l'edat\") #(1)!\nprint(\"Ad\u00e9u\")\n</code></pre> <ol> <li>Fixa't que els sagnats s\u00f3n molt importants. Estos 3 \u00faltims print s'executaran en situacions diferents.</li> </ol>"},{"location":"PRG04/#242-condicions-compostes","title":"2.4.2. Condicions compostes","text":"<p>Cada condici\u00f3 que es posa en els if (tamb\u00e9 en els while, com vorem despr\u00e9s) pot ser composta. \u00c9s a dir: diverses condicions unides amb or i/o and, a m\u00e9s de poder tindre l'operador not.</p> Python<pre><code>if edat &gt;= 14 and edat &lt;= 30:\n    print(\"Pots traure't el Carnet Jove\")\nelse:\n    print(\"No pots traure't el Carnet Jove\")\n</code></pre> <p>O b\u00e9, podem invertir els missatges si posem la condici\u00f3 contr\u00e0ria:</p> Python<pre><code>if not(edat &gt;= 14 and edat &lt;= 30):\n    print(\"No pots traure't el Carnet Jove\")\nelse:\n    print(\"Pots traure't el Carnet Jove\")\n</code></pre> <p>O b\u00e9, aplicant De Morgan:</p> Python<pre><code>if edat &lt; 14 or edat &gt; 30:\n    print(\"No pots traure't el Carnet Jove\")\nelse:\n    print(\"Pots traure't el Carnet Jove\")\n</code></pre> Exercici 5. Bifurcacions amb condicions compostes <p>Encara que es pot fer amb condicions simples, fes-ho amb condicions compostes:</p> <ul> <li>Fes un programa que mostre el m\u00e0xim de 3 n\u00fameros instrodu\u00efts per teclat.</li> </ul> Exercici 6 <p>Encara que es pot fer amb condicions simples, fes-ho amb condicions compostes:</p> <ul> <li>Demana una nota sense decimals i mostra el text corresponent: <code>ins</code>, <code>suf</code>, <code>b\u00e9</code>, <code>not</code> o <code>exc</code>. O b\u00e9 <code>ERROR</code> si la nota no est\u00e0 entre 0 i 10.</li> </ul> Exercici 7 <p>Encara que es pot fer amb condicions simples, fes-ho amb condicions compostes:</p> <ul> <li>Demana per teclat el pes d'una persona, en quilos. Tant si el pes \u00e9s menor de 10kg, com si \u00e9s major de 200kg, ha de mostrar <code>ERROR</code>. En cas contrari, mostrar\u00e0 el pes en grams i tamb\u00e9 un missatge: <code>flac</code> si \u00e9s menor de 50kg, <code>normal</code> si est\u00e0 entre 50 i 100kg, o <code>sobrep\u00e9s</code> en altre cas.</li> </ul>"},{"location":"PRG04/#3-bucles","title":"3. Bucles","text":"<p>A voltes necessitarem que un conjunt d'instruccions s'executen diverses vegades. Quantes vegades? Potser se s\u00e0piga a priori o potser no. Per tant, tindrem dos tipus de bucles:</p> <ul> <li>Bucles condicionals: es repetir\u00e0 mentre es complisca una condici\u00f3.</li> <li>Bucles incondicionals: es repetir\u00e0 un nombre determinat de vegades.</li> </ul>"},{"location":"PRG04/#31-bucles-condicionals-while","title":"3.1. Bucles condicionals: while","text":"<p>Suposem que volem mostrar l'arrel quadrada d'un n\u00famero introdu\u00eft per teclat:</p> Python<pre><code>import math\nnum = int(input(\"Dis-me un n\u00famero: \"))\nprint(\"L'arrel quadrada de %d \u00e9s %f\" %(num, math.sqrt(num)))\n</code></pre> <p>Funcionar\u00e0 b\u00e9 a no ser que introdu\u00efm un n\u00famero negatiu (ja que l'arrel quadrada d'un n\u00famero negatiu no t\u00e9 soluci\u00f3 real): ValueError: math domain error</p> <p>Podr\u00edem solucionar-ho amb un if:</p> Python<pre><code>import math\nnum = int(input(\"Dis-me un n\u00famero: \"))\n\nif num &lt; 0:\n    print(\"No es pot calcular l'arrel quadrada d'un n\u00famero negatiu\")\n    num = int(input(\"Dis-me un n\u00famero: \"))\n\nprint(\"L'arrel quadrada de %d \u00e9s %f\" %(num, math.sqrt(num)))\n</code></pre> <p>Funcionar\u00e0 b\u00e9 si en el segon intent donem un n\u00famero possitiu. Per\u00f2 i si tornem a donar un n\u00famero negatiu en el segon intent? Quants ifs haur\u00edem de posar? No ho sabem. Per tant, voldrem repetir el fet de demanar un n\u00famero MENTRE el n\u00famero introdu\u00eft siga incorrecte:</p> Python<pre><code>import math\nnum = int(input(\"Dis-me un n\u00famero: \"))\n\nwhile num &lt; 0:\n    print(\"No es pot calcular l'arrel quadrada d'un n\u00famero negatiu\")\n    num = int(input(\"Dis-me un n\u00famero: \"))\n\nprint(\"L'arrel quadrada de %d \u00e9s %f\" %(num, math.sqrt(num)))\n</code></pre> <p>\u00c9s a dir, mentre es complisca la condici\u00f3 de si el valor num \u00e9s negatiu, s'executaran les instruccions de dins del bucle (les sagnades) i es tornar\u00e0 a comprovar si num \u00e9s negatiu. Quan ja no siga negatiu, eixir\u00e0 del bucle i el programa continuar\u00e0 fent les instruccions de fora del bucle.</p> <p>A la vista d'este exemple veiem que:</p> <ul> <li>Usarem un bucle condicional while quan el programador no sap quantes vegades s'ahur\u00e0 de repetir un conjunt d'instruccions.</li> <li>La variable (o variables) de la condici\u00f3 hauran de tindre un valor abans d'entrar al bucle.</li> <li>Dins del bucle ha d'haver alguna instrucci\u00f3 que permeta canviar el valor d'eixa variable (o variables) de la condici\u00f3.</li> </ul> <p>Sintaxi del while en Python:</p> Python<pre><code>inicialitzaci\u00f3 de variables de la condici\u00f3\n\nwhile condici\u00f3: # &lt;--\n    acci\u00f3_1     #    ^\n    acci\u00f3_2     #    |\n    ...         #    |\n    acci\u00f3_N     # --&gt;\n\naccions fora de bucle\n</code></pre> <p>\u00c9s a dir: quan el flux del programa arriba al while, es comprova si la condici\u00f3 s'avalua a True o a False.</p> <ul> <li>Si \u00e9s True s'executaran les accions 1 a N i el flux tornar\u00e0 al while.</li> <li>Si \u00e9s False el flux eixir\u00e0 del bucle i s'executaran les accions de fora.</li> </ul> Exercici 8: Bucles condicionals <p>Fes un programa per controlar la temperatura d'un lloc que, repetidament, mostre un men\u00fa amb 4 opcions (Demanar temperatura / Pujar 1 grau / Baixar un grau / Eixir), que demane per teclat una opci\u00f3 i l'execute. Cada vegada que s'augmente o es disminu\u00efsca, tamb\u00e9 es mostrar\u00e0 la nova temperatura. Despr\u00e9s del bucle es mostrar\u00e0 quantes vegades s'ha canviat la temperatura.</p>"},{"location":"PRG04/#32-bucles-incondicionals-for","title":"3.2. Bucles incondicionals: for","text":"<p>Este tipus de bucles es fa quan el programadr ja sap quantes vegades s'han de repetir un conjunt d'instruccions (o b\u00e9 eixa quantitat est\u00e0 guardada en una variable)</p> <p>Exemples</p> <ul> <li>Si volem mostrar una taula de multiplicar, sabem que s'haur\u00e0 de fer un print 10 vegades.</li> <li>Si es demana per teclat de quants alumnes volem demanar l'edat, si eixe valor est\u00e0 a la variable q_alumnes, el bucle de demanar edats s'haur\u00e0 de repetir q_alumnes vegades.</li> </ul> <p>En estos bucles hem d'anar comptant les iteracions fins arribar a la quantitat que volem. Per a aix\u00f2 ens far\u00e0 falta una variable, que far\u00e0 de comptador o \u00edndex.</p> <p>El bucle for en Python \u00e9s bastant diferent al de C i Java.</p> <p>Mostrar els n\u00fameros de l'1 al 9 (un en cada l\u00ednia)</p> PythonJava Python<pre><code>for i in range (1, 10):\n    print(i)\n</code></pre> Java<pre><code>int i;\nfor(i=1; i&lt;10; i++){\n    System.out.println(i);\n}\n</code></pre> <p>Anem a veure detalladament el for de Python. Al tema seg\u00fcent ja explicarem el for de Java.</p>"},{"location":"PRG04/#321-bucle-for-en-python","title":"3.2.1. Bucle for en Python","text":"<p>Recordem l'exemple que acabem de veure:</p> Python<pre><code>for i in range (1, 10):\n    print(i)\n</code></pre> <p>Ac\u00ed la variable i anir\u00e0 agafant tots els valors que hi ha en la llista de valors representats en range(1, 10). Per a entendre-ho, veiem com dunciona range:</p> <p>La funci\u00f3 range de Python</p> <p>Amb el range obtenim un conjunt de valors anomenat llista (ja parlarem m\u00e9s endavant de les llistes).</p> <p>La funci\u00f3 admet 1, 2 o 3 par\u00e0metres. Veiem exemples:</p> <ul> <li><code>range(10)</code> --&gt; <code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code></li> <li><code>range(4, 10)</code> --&gt; <code>[4, 5, 6, 7, 8, 9]</code></li> <li><code>range(4, 10, 2)</code> --&gt; <code>[4, 6, 8]</code></li> <li><code>range(10, 1, -1)</code> --&gt; <code>[10, 9, 8, 7, 6, 5, 4, 3, 2]</code></li> </ul> Exemples de Python amb range Exemple 1Exemple 2Exemple 3 Python<pre><code>for i in range (10, 31, 5):\n    print(i)\n</code></pre> <p>Aix\u00f2 mostra els n\u00fameros: 10, 15, 20, 25, 30 (del 10 al 30, de 5 en 5)</p> Python<pre><code>for i in range (10, 31):\n    if i % 5 == 0:\n        print(i)\n</code></pre> <p>Este trauria el mateix resultat que l'Exemple 1</p> Python<pre><code>for i in range (10, 5):\n    print(i)\n</code></pre> <p>A\u00e7\u00f2 no mostraria res, ja que no es pot anar del 10 al 5 incrementant 1. Caldria fer:</p> Python<pre><code>for i in range (10, 4, -1):\n    print(i)\n</code></pre> <p>Este s\u00ed que mostra els n\u00fameros: 10, 9, 8, 7, 6, 5 (del 10 al 5, de -1 en -1).</p> Exemples de for de Python sense range <p>Per a cada passada del for s'gafar\u00e0 un element de la lista especificada:</p> Exemple 1Exemple 2 Python<pre><code>for num in [3, 5, 7, 11, 13, 17]:\n    print(num, \"\u00e9s un n\u00famero primer\")\n</code></pre> <p></p> Python<pre><code>alumnes = [\"Pep\", \"Pepa\", \"Pepet\"]\n\nfor nom in alumnes:\n    print(\"Benvingut,\", nom)\n</code></pre> <p></p> Exercici 9 RESOLT <p>Mostra els n\u00fameros del 0 al 10.</p> PythonJava Python<pre><code>for i in range(11):\n    print(i)\n</code></pre> Java<pre><code>for(int i=0; i&lt;=10; i++){ //(1)!\n    System.out.println(i);\n}\n</code></pre> <ol> <li>No es precupeu ara per els fors de Java. Ja ho veurem al tema seg\u00fcent.</li> </ol> Exercici 10 RESOLT <p>Mostra la taula de multiplicar del 3.</p> PythonJava Python<pre><code>for i in range(1, 11):\n    print(\"3 x\", i, \"=\", 3*i)\n</code></pre> Java<pre><code>for(int i=1; i&lt;=10; i++){\n    System.out.println(\"3 x\" + i + \" = \" + (3*i));\n}\n</code></pre> Exercici 11 RESOLT <p>Mostra els n\u00fameros parells del 40 fins al 0 (incl\u00f2s).</p> PythonJava Python<pre><code>for i in range(40, -1, -2): #(1)!\n    print(i)\n</code></pre> <ol> <li>El rang de Python mai arriba al valor final. Per aix\u00f2 no hem posat (40, 0, -2), ja que aix\u00ed no haguera mostrat el 0.</li> </ol> Java<pre><code>for(int i=40; i&gt;=0; i-=2){\n    System.out.println(i);\n}\n</code></pre> Exercici 12. Bucles amb for <p>Programa que demane una taula de multiplicar i la mostre.</p> Exercici 13 <p>Programa que calcule el m\u00e0xim de 10 n\u00fameros introdu\u00efts per teclat.</p> Exercici 14 <p>Programa que calcule el m\u00e0xim, m\u00ednim i mitjana de 10 n\u00fameros entrats per teclat.</p> Exercici 15 <p>Programa que mostre les taules de multiplicar del 2 al 9.</p> Exercici 16 <p>Programa que calcule el factorial d'un n\u00famero introdu\u00eft per teclat (n!) tenint en compte que:</p> <ul> <li>0! = 1</li> <li>n! = n * (n-1) * (n-2) * ... * 2 * 1</li> </ul> <p>Feu-ho amb diferents solucions:</p> <ul> <li>Amb un for recorrent els n\u00fameros des de l'1 fins n</li> <li>Amb un for recorrent els n\u00fameros des d'n fins a 1</li> <li>Amb un while recorrent els n\u00fameros des de l'1 fins n</li> <li>Amb un while recorrent els n\u00fameros des d'n fins a 1</li> </ul>"},{"location":"PRG04/#33-alteracio-de-bucles-break-i-continue","title":"3.3. Alteraci\u00f3 de bucles: break i continue","text":"<p>Dins del bucle (tant while com for), podem fer que, si ocorre alguna determinada condici\u00f3, alterar el funcionament normal del bucle. Aix\u00f2 es pot fer amb les sent\u00e8ncies break i continue:</p> Python<pre><code>...\n# Inici del bucle -----------------------\nfor i in range (1, 10):\n    ...\n    if ... :\n        continue #(1)!\n    ...\n    if ... :\n        break #(2)!\n    ...\n# fi del bucle --------------------------\n...\n</code></pre> <ol> <li>Si passa perl continue, el flux de control seguir\u00e0 a l'inici del bucle. Si la i valia 7, ara valdr\u00e0 8.</li> <li>Si passa pel break, el flux de control seguir\u00e0 a la seg\u00fcent instrucci\u00f3 de fora del bucle.</li> </ol> <p>\u00c9s a dir:</p> <ul> <li>break interromp l'execuci\u00f3 del bucle i seguim per la instrucci\u00f3 seg\u00fcent de fora del bucle.</li> <li>continue fa que el programa comence altra iteraci\u00f3, encara que no s'haja acabat l'actual. Per tant, les l\u00ednies que hi ha dins d'un bucle a continuaci\u00f3 del continue no s'executen en eixa iteraci\u00f3. Si el bucle \u00e9s un for, anirem a l'increment e la variable comptadora o al seg\u00fcent element de la llista. Si \u00e9s un while, es torna a comprovar la condici\u00f3 per a entrar altra vegada al bucle.</li> </ul> <p>Nota</p> <p>En cas de tindre estes instruccions dins de bucles niuats, nom\u00f1es afecten al bucle on estan firectament. Per exemple: si tenim un break en un bucle (pare) i este est\u00e0 dins d'un altre bucle (iaio), eixir\u00edem del bucle pare per\u00f2 no del iaio.</p> Exercici 17 RESOLT. Bucles amb break i continue <p>Programa en Python que demane les notes dels alumnes (n\u00fameros enters i positius entre 0 i 10) i que despr\u00e9s mostre quantes notes s'han introdu\u00eft i la nota mitjana. Per a parar d'introduir notes caldr\u00e0 posar la nota 11, que no es tindr\u00e0 en compte per als c\u00e0lculs.</p> <p>NOTA: El programa es podria fer sense break ni continue, per\u00f2 ho farem aix\u00ed per a vore el seu funcionament.</p> Python<pre><code># Inicialitzaci\u00f3 de comptador i acumulador\nnotes = 0\nsuma = 0\n# Demanar dades i fer c\u00e0lculs\nwhile True: #(1)!\n    # Introducci\u00f3 de la nota per teclat\n    nota = input(\"Dis-me una nota (11 per a ixir): \")\n    # Comprovacions de nota OK\n    if not nota.isnumeric(): #(2)!\n        print(\"Han de ser n\u00fameros enters positius. Torna a provar\")\n        continue #(3)!\n    nota = int(nota)\n    if nota &gt; 11:\n        print(\"La nota m\u00e0xima \u00e9s 10. Torna a provar\")\n        continue #(4)!\n    # Si volem acabar\n    if nota == 11:\n        print(\"Ja no et demane m\u00e9s notes. Vaig a eixir del bucle.\")\n        break #(5)!\n    # Si tot ha anat b\u00e9, farem els c\u00e0lculs\n    print(\"Nota introdu\u00efda ok:\", nota)\n    notes += 1\n    suma += nota\n# Fi del bucle\n\n# Mostrem els resultats\nprint(notes, \"notes introdu\u00efdes.\")\nprint(\"Nota mitja:\", suma/notes)\n</code></pre> <ol> <li>Amb el while True aconseguim fer un bucle \"infinit\". Nom\u00e9s podrem eixir si fem un break dins.</li> <li>isnumeric \u00e9s True si tots els car\u00e0cters s\u00f3n d\u00edgits.</li> <li>Si passa per ac\u00ed, torna altra vegada a l'inici del bucle.</li> <li>Si passa per ac\u00ed, torna altra vegada a l'inici del bucle.</li> <li>Si passa per ac\u00ed, eixim ja fora del bucle.</li> </ol> Exercici 18. Bucles amb break i continue <p>Programa que demane 10 n\u00fameros (positius i/o negatius) i mostre la mitjana nom\u00e9s dels positius. Fes-ho a l'estil de l'exercici resolt anterior, per a fer \u00fas del continue.</p>"},{"location":"PRG04/#331-us-de-lelse-de-bucles-amb-break","title":"3.3.1. \u00das de l'else de bucles amb break","text":"<p>Ja hem vist que l'else s'utilitza en sent\u00e8ncies if. Per\u00f2 Python (no C i Java) permet posar-lo despr\u00e9s d'un bucle en el qual s'haja fet alg\u00fan break:</p> Python<pre><code>...\n# Inici del bucle ---------------------\nwhile ... :\n    ...\n    if ... :\n        break\n    ...\n# fi del bucle ------------------------\nelse: # Este else \u00e9s del bucle, no de l'if\n    ... # S'executaran estes accions si NO hem passat pel break.\n...\n</code></pre> <p>La part de l'else s'executar\u00e0 nom\u00e9s quan el bucle ha acabat de manera normal:</p> <ul> <li>En un while quan ha acabat el bucle perqu\u00e8 no es complia la condici\u00f3.</li> <li>En un for quan ha acabat el bucle perqu\u00e8 ja s'han recorregut els elements de la llista.</li> </ul> Exercici 19 RESOLT. Bucles amb break i else <p>Programa en Python que ens diga si ha trobat o no algun m\u00faltiple d'un n\u00famero determinat en un cert rang de n\u00fameros.</p> Python<pre><code>inici = int(input(\"Des de quin n\u00famero vols buscar m\u00faltiples? \"))\nlimit = int(input(\"Fins quin n\u00famero vols buscar m\u00faltiples? \"))\ndivisor = int(input(\"De quin n\u00famero vols b\u00fascar m\u00faltiples? \"))\n\nfor i in range(inici, limit+1):\n    print(i)\n    if(i % divisor == 0):\n        print(\"En el rang s\u00ed que hi ha almenys 1 m\u00faltiple de\", divisor)\n        break #(2)!\n    else:\n        print(\"Encara no he trobat m\u00faltiple de\", divisor)\n\nelse: # else del bucle (1)\n    print(\"En tot el rang no hi ha cap m\u00faltiple de\", divisor)\n\nprint(\"Fi del programa\")\n</code></pre> <ol> <li>Si el bucle acaba de forma normal, s\u00ed que s'executar\u00e0 l'else de fora del bucle.</li> <li>Si el bucle acaba per un break, no s'executar\u00e0 l'else de fora del bucle.</li> </ol> Exercici 20 <p>Fes un programa en Python que simule un caixer autom\u00e0tic. Es demana per teclat la clau cont\u00ednuament mentre no siga correcta (1234). Per\u00f2 com a molt s\u00f3n 5 intents. Despr\u00e9s del bucle caldr\u00e0 indicar si s'han superat els intents o si s'ha encertat la clau.</p> <ul> <li>Fes el programa usant un while amb break i l'else del bucle.</li> <li>Fes el programa usant un for amb break i l'else del bucle.</li> <li>Fes el programa usant un while sense break ni l'else del bucle.</li> </ul>"},{"location":"PRG04/#4-la-sentencia-pass-de-python","title":"4. La sent\u00e8ncia pass de Python","text":"<p>La sent\u00e8ncia pass no fa res.</p> <p>Simplement est\u00e0 per a quan el programador vol deixar alguna part del programa temporalment sense indicar el codi, per alguna ra\u00f3:</p> <ul> <li>Perqu\u00e8 est\u00e0 en les fases inicials del programa i ho deixa per a despr\u00e9s o per a millorar la llegibilitat:</li> </ul> Python<pre><code>if nota &gt;= 0 and nota &lt;= 10:\n    pass # He d'acabar el programa amb c\u00e0lculs amb la nota (1)\nelse:\n    print(\"Error en nota\")\n</code></pre> <ol> <li>Si no es posa el pass, donaria error sint\u00e0ctic.</li> </ol> Python<pre><code>if edat &gt;= 18:\n    pass # No fem res especial si t\u00e9 18 anys o m\u00e9s\nelse:\n    print(\"No pots votar\")\n</code></pre>"},{"location":"PRG04/#5-annex-aleatoris-amb-python","title":"5. Annex: Aleatoris amb Python","text":"<p>Per generar n\u00fameros aleatoris en Python, utilitzarem la llibreria random. Aquesta llibreria proporciona diverses funcions per generar n\u00fameros aleatoris de diferents tipus.</p> <p>Per tant, haurem d'importar la llibreria random mitjan\u00e7ant l'expresi\u00f3 <code>import random</code> a l'inici del nostre programa.</p> <p>Generar un n\u00famero aleatori enter</p> <p>Per generar un n\u00famero enter aleatori dins d'un rang espec\u00edfic, utilitzem la funci\u00f3 <code>randint</code>:</p> Python<pre><code>import random\n\nnum = random.randint(1, 10)\nprint(num)\n</code></pre> <p>Aix\u00f2 generar\u00e0 un n\u00famero enter aleatori entre 1 i 10 (ambd\u00f3s inclosos).</p> <p>Generar un n\u00famero aleatori de coma flotant</p> <p>Per generar un n\u00famero de coma flotant aleatori entre 0.0 i 1.0, utilitzem la funci\u00f3 <code>random</code>:</p> Python<pre><code>import random\n\nnum = random.random()\nprint(num)\n</code></pre> <p>Per generar un n\u00famero de coma flotant aleatori dins d'un rang espec\u00edfic, utilitzem la funci\u00f3 <code>uniform</code>:</p> Python<pre><code>import random\n\nnum = random.uniform(1.5, 5.5)\nprint(num)\n</code></pre> <p>Aix\u00f2 generar\u00e0 un n\u00famero de coma flotant aleatori entre 1.5 i 5.5.</p> <p>Seleccionar un element aleatori d'una llista</p> <p>Per seleccionar un element aleatori d'una llista, utilitzem la funci\u00f3 <code>choice</code>:</p> Python<pre><code>import random\n\ncolors = ['roig', 'verd', 'blau', 'groc'] #(1)!\ncolor_aleatori = random.choice(colors)\nprint(color_aleatori)\n</code></pre> <ol> <li>Malgrat que encara no hem vist l'\u00das de llistes, aquest \u00fas sembla prou intuitiu, no?</li> </ol> <p>Amb aquestes funcions (i altres), podem generar n\u00fameros i seleccionar elements de manera aleat\u00f2ria en Python. A continuaci\u00f3 teniu l'enlla\u00e7 a la documentaci\u00f3 oficial:</p> <p> Funci\u00f3 random</p>"},{"location":"PRG05/","title":"UD5. Introducci\u00f3 a Java","text":""},{"location":"PRG05/#1-la-plataforma-java","title":"1. La plataforma Java","text":""},{"location":"PRG05/#11-introduccio","title":"1.1. Introducci\u00f3","text":"<p>Java \u00e9s un llenguatge de programaci\u00f3 de prop\u00f2sit general i, per tant, adequat per a fer qualsevol tipus d'aplicaci\u00f3 professional.</p> <p>Per\u00f2 no \u00e9s un llenguatge m\u00e9s, sin\u00f3 que t\u00e9 una s\u00e9rie de caracter\u00edstiques que el fan \u00fanic i \u00e9s usat per molts fabricants per a desenvolupar aplicacios comercials de gran repercusi\u00f3.</p> <p>En este tema vorem les principals caracter\u00edstiques de Java, com s'instal\u00b7la l'aplicaci\u00f3 per a comen\u00e7ar a treballar i quina \u00e9s l'estructura b\u00e0sica d'un programa Java.</p> <p>Qu\u00e8 es pot programar amb Java?</p> <p>No \u00e9s cert que Java nom\u00e9s servisca per a programar applets per a p\u00e0gines web ja que Java \u00e9s un llenguatge de prop\u00f2sit general:</p> <ul> <li>Aplicacions independents. Igual que qualsevol altre llenguatge de prop\u00f2sit general.</li> <li>Applets. S\u00f3n xicotetes aplicacions en Java incrustades en un document HTML i que, per tant, s'executen en l'entorn d'un navegador, en l'ordinador local.</li> </ul> <p>Caracter\u00edstiques de Java</p> <p>Una de les caracter\u00edstiques m\u00e9s importants \u00e9s que els programes executables (creats pel compilador de Java) s\u00f3n independents de l\u2019arquitectura. \u00c9s a dir: s\u2019executen en una gran varietat d\u2019equips amb diferents microprocessadors i sistemes operatius. Per exemple, un programa en Java compilat pot ser executat directament en un PC amb Windows o b\u00e9 en un Mac amb Linux, etc, cosa que no ocorre per exemple en un programa en C, que ha de ser compilat en cada arquitectura distinta.</p> <p>Altres caracter\u00edstiques:</p> <ul> <li>\u00c9s gratu\u00eft</li> <li>Permet escriure applets</li> <li>\u00c9s f\u00e0cil d'aprendre i est\u00e0 ben estructurat</li> <li>\u00c9s \"Orientat a Objectes\"</li> <li>Permet executar tasques concurrents dins d'un mateix programa</li> </ul> <p>Qu\u00e8 necessitem per a programar en Java?</p> <p>Per a treballar amb Java utilitzarem 3 elements:</p> <ul> <li>La JVM (Java Virtual Machine) --&gt; Per executar programes Java</li> <li>El JDK (Java Development Kit) --&gt; Per a programar en Java</li> <li>El IDE (IntelliJ, Netbeans...) --&gt; Facilita la tasca de programar</li> </ul> <p>Anem a vore cadascun d'eixos elements.</p>"},{"location":"PRG05/#12-la-jvm-maquina-virtual-java","title":"1.2. La JVM (M\u00e0quina Virtual Java)","text":"<p>Java \u00e9s un llenguatge interpretat per\u00f2 necessita una compilaci\u00f3 pr\u00e8via.</p> <p><pre><code>graph TD\n    A[\"Codi font (.java)\"] --&gt;|\"Compilaci\u00f3 (javac)\"| B[\"Bytecode (.class)\"]\n    B --&gt; PC1\n    B --&gt; PC2\n    B --&gt; PC3\n    subgraph PC1\n    JVM1 --- Exec1[Codi M\u00e0quina 1]\n    end\n    subgraph PC2\n    JVM2 --&gt; Exec2[Codi M\u00e0quina 2]\n    end\n    subgraph PC3\n    JVM3 --&gt; Exec3[Codi M\u00e0quina 3]\n    end</code></pre></p> <p>Una volta compilat el programa, es crea un fitxer que guarda el que s'anomena bytecodes o j_codes (pseudocodi pr\u00e0cticament al nivell de codi m\u00e0quina). Per a executar-lo cal un int\u00e8rpret: la JVM (Java Virtual Machine) o M\u00e0quina Virtual de Java.</p> <p>D'esta forma, \u00e9s possible compilar el programa en Linux i executar-lo en altra amb Windows usant la m\u00e0quina virtual Java per a eixa versi\u00f3 de Windows. Esta JVM s'encarrega de llegir els bytecodes i traduir-los a instruccions executables directament en un determinat microprocessador, de forma eficient. Esta idea de m\u00e0quina virtual fa que els programes siguen independents de la plataforma (Hw + SO) en la qual vaja a executar-se.</p> <p>Encara que s'haja d'interpretar, la velocitatd'execuci\u00f3 no \u00e9s lenta ja que la interpretaci\u00f3 es fa pr\u00e0cticament al nivell de codi m\u00e0quina. Per exemple, \u00e9s molt m\u00e9s r\u00e0pid que un llenguatge interpretat com Visual Basic, encara que \u00e9s m\u00e9s lent que si est\u00e0 escrit en un llenguatge compilat com C++.</p> <p>Les JVM no ocupen molt d'espai en mem\u00f2ria (van ser dissenyades per a executar-se en xicotets electrodom\u00e8stics, com ara tel\u00e8fons, televisors...).</p> <p>Les JVM tamb\u00e9 s'anomenen JRE (Java Runtime Environment: Entorn en temps d'execuci\u00f3 de Java).</p>"},{"location":"PRG05/#13-el-jdk-java-development-kit","title":"1.3. El JDK (Java Development Kit)","text":"<p>L'eina b\u00e0sica per a comen\u00e7ar a desenvolupar aplicacions en Java \u00e9s el JDK (Java Development Kit) o Kit de Desenvolupament de Java (Tamb\u00e9 anomenant plataforma).</p> <p></p> <p>Entre altres coses, el JDK cont\u00e9:</p> <ul> <li>El compilador --&gt; javac.exe</li> <li>L'int\u00e8rpret (la m\u00e0quina virtual) --&gt; java.exe</li> <li>El generador de documentaci\u00f3 --&gt; javadoc.exe</li> <li>El depurador --&gt; jdb.exe</li> <li>El visualitzador d'applets --&gt; appletviewer.exe</li> </ul> <p>El JDK \u00e9s un fitxer executable que fa la instal\u00b7laci\u00f3 i crea tota l'estructura de directoris.</p> <p>Alguns dels directoris s\u00f3n:</p> <ul> <li>Bin: fitxers executables: javac, jdb, java, appletviewer...</li> <li>Include: cap\u00e7aleres per a utilitzar  funcions escrites en C.</li> <li>Lib: llibreries de classes proporcionades pel llenguatge. Estan comprimides en el fitxer classes.zip (per\u00f2 no s'ha de descomprimir).</li> </ul>"},{"location":"PRG05/#14-lide-intellij","title":"1.4. L'IDE (IntelliJ)","text":"<p>El JDK funciona a base de comandaments: hem de fer el programa en un editor de text i despr\u00e9s compilar-lo i executar-lo des de consola:</p> <ul> <li><code>nano Hola.java</code></li> <li><code>javac Hola</code></li> <li><code>java Hola</code></li> </ul> <p>\u00c9s a dir, el JDK no disposa d\u2019un IDE. Un IDE o Entorn de Desenvolupament Integrat \u00e9s una eina per a fer-nos m\u00e9s f\u00e0cil i agradable la tasca de desenvolupar programes mitjan\u00e7ant una interf\u00edcie gr\u00e0fica. \u00c9s com, per exemple, el Visual Studio Code per a Python. Els IDE de Java m\u00e9s importants s\u00f3n Netbeans, Eclipse i IntelliJ. Nosaltres utilitzarem el IntelliJ IDEA Community Edition.</p>"},{"location":"PRG05/#141-que-es-intellij-i-quines-versions-te","title":"1.4.1. Qu\u00e8 \u00e9s IntelliJ i quines versions t\u00e9?","text":"<p>IntelliJ IDEA \u00e9s un entorn de desenvolupament integrat (IDE) per a Java desenvolupat per JetBrains. \u00c9s conegut per les seues potents eines de desenvolupament, la seua interf\u00edcie d'usuari intu\u00eftiva i les seues capacitats avan\u00e7ades de refactoritzaci\u00f3 de codi. IntelliJ IDEA est\u00e0 disponible en dues versions:</p> <ul> <li>Community Edition: Gratu\u00efta i de codi obert, adequada per a desenvolupament de Java SE, Groovy, Scala i Android.</li> <li>Ultimate Edition: De pagament, amb funcionalitats addicionals per a desenvolupament web, empresarial i de bases de dades.</li> </ul> <p>Es pot poden descarregar aquestes versions des d'ac\u00ed:</p> <p>https://www.jetbrains.com/idea/download/other.html</p>"},{"location":"PRG05/#1411-installacio-mitjancant-jetbrains-toolbox","title":"1.4.1.1. Instal\u00b7laci\u00f3 mitjan\u00e7ant JetBrains Toolbox","text":"<p>JetBrains Toolbox \u00e9s una aplicaci\u00f3 que facilita la gesti\u00f3 i instal\u00b7laci\u00f3 dels productes JetBrains, incloent IntelliJ IDEA. Amb Toolbox, pots instal\u00b7lar, actualitzar i gestionar m\u00faltiples versions dels IDEs de JetBrains de manera senzilla:</p> <ol> <li>Descarrega JetBrains Toolbox des del lloc web oficial de JetBrains.</li> <li>Executa l'instal\u00b7lador i segueix les instruccions per a completar la instal\u00b7laci\u00f3.</li> <li>Inicia JetBrains Toolbox i selecciona IntelliJ IDEA Community Edition de la llista de productes disponibles.</li> <li>Fes clic a \"Install\" per a instal\u00b7lar IntelliJ IDEA Community Edition.</li> </ol> <p>Amb JetBrains Toolbox, tamb\u00e9 pots gestionar les actualitzacions i configurar diferents entorns de desenvolupament de manera eficient.</p>"},{"location":"PRG05/#142-iniciem-intellij-idea-community-edition","title":"1.4.2. Iniciem IntelliJ IDEA Community Edition","text":"<p>En Python nom\u00e9s treball\u00e0vem amb un fitxer. Ac\u00ed crearem un projecte (ser\u00e0 un directori amb distints subdirectoris i fitxers).</p> <p>La primera vegada que iniciem IntelliJ, com no tenim cap projecte creat, ens apareixer\u00e0 la seg\u00fcent finestra:</p> <p></p> <p>Si ja tenim algun projecte creat, ens obrir\u00e0 l'\u00faltim amb el qual est\u00e0vem treballant. Per crear un nou projecte haurem de seguir els seg\u00fcents passos: <code>File -&gt; New -&gt; Project...</code>. En qualsevol cas, la finestra de creaci\u00f3 de projectes \u00e9s aquesta:</p> <p></p> <p>Ac\u00ed, haurem d'escollir:</p> <ul> <li>Projecte de JAVA (men\u00fa de l'esquerre)</li> <li>Escollir un nom per al projecte (Name)</li> <li>Escollir un sistema de contrucci\u00f3 (Build System): si no es diu el contrari triarem sempre el propi de l'IDE (IntelliJ).</li> <li>Podem escollir el JDK amb el qual funcionar\u00e0 el projecte: podem deixar-ho per defecte (openjdk-22). EL propi IDE s'encarregar\u00e0 de descarregar el JDK escollit.</li> <li>Recomanem desmarcar l'opci\u00f3 d'afegir codi d'exemple (Add sample code)</li> </ul> <p>Finalment, despr\u00e9s de clicar al bot\u00f3 Create es generar\u00e0 el projecte i, si no tenim el JDK instal\u00b7lat es descarregar\u00e0 (pot tardar un segons la primera vegada).</p> <p>A partir d'ara, haurem de crear els nostres programes (Classes) a la carpeta src del projecte.</p>"},{"location":"PRG05/#143-estructura-dun-programa-en-java","title":"1.4.3. Estructura d'un programa en Java","text":"<p>Anem a fer el nostre primer programa en Java. Nom\u00e9s ha de fer un cosa: traure per pantalla el text \"Hola, m\u00f3n!\".</p> <p>Si no el tenim ja, crearem el projecte <code>hola</code> com hem vist abans i sobre el directori <code>src</code> farem clic dret per crear una nova classe:</p> <p></p> <p>Escriurem el nom <code>Hola</code> d'aquesta (Per convenci\u00f3, les Classes en Java han de comen\u00e7ar en maj\u00fascules, encara que no \u00e9s obligatori):</p> <p></p> <p>El fitxer que tindr\u00e0 el nostre programa s'anomenar\u00e0 Hola.java i estar\u00e0 en  <code>~IdeaProjects/hola/src/Hola.java</code></p> <p>En eixe fitxer (Hola.java) escrivim el nostre programa:</p> Java<pre><code>public class Hola { //(1)!\n    /**\n     * El meu primer programa Java\n     */\n\n    public static void main(String[] args) { //(2)!\n        // mostra \"Hola, m\u00f3n!\" per pantalla\n        System.out.println(\"Hola, m\u00f3n!\"); //(3)!\n\n    }\n}\n</code></pre> <ol> <li>La classe principal: Java \u00e9s un llenguatge de programaci\u00f3 d'objectes. Aix\u00f2 implica que el programa estiga incl\u00f2s en el que s'anomena classe. Tots els programes han de tindre almenys una classe, la principal, que es dir\u00e0 igual que el fitxer font (en maj\u00fascula).</li> <li>El m\u00e8tode principal: Eixa classe ha de tindre almenys una funci\u00f3 o m\u00e8tode, que sempre es dir\u00e0 main en (min\u00fascula).</li> <li>El cos del programa: Dins del main posarem el propi codi del programa, \u00e9s a dir, les instruccions necess\u00e0ries per a portar a terme la resoluci\u00f3 del nostre problema.</li> </ol> <p>Estos conceptes (clases i objectes) els estudiarem m\u00e9s endavant. De moment, \u00e9s suficient dir que si el programa que estic fent es diu Hola.java, s'ha de crear una classe p\u00fablica amb el mateix nom Hola. Compte amb les maj\u00fascules, ja que Java tamb\u00e9 \u00e9s case-sensitive.</p> <p>A la primera l\u00ednia podem veure la classe que es crea (i es tanca a l'\u00faltima l\u00ednia):</p> Java<pre><code>public class Hola{\n    ...\n}\n</code></pre> <p>Despr\u00e9s podem observar una s\u00e8rie de comentaris que hi ha al programa. Igual que en Python, poden ser d'una l\u00ednia amb <code>//</code>, o de diverses l\u00ednies amb <code>/*</code> i <code>*/</code>. El cas del comentari que comen\u00e7a amb <code>/**</code> tamb\u00e9 l'estudiarem m\u00e9s endavant.</p> <p>Per comen\u00e7ar a executar-se qualsevol programa, necessita una porta d'entrada. En Java podem tindre diversos fitxers <code>*.java</code>, per\u00f2 nom\u00e9s un d'ells contindr\u00e0 la classe p\u00fablica i, a m\u00e9s, contindr\u00e0 el m\u00e8tode <code>main()</code>. Este  m\u00e8tode sempre l'escriurem aix\u00ed:</p> Java<pre><code>public static void main(String args[]){\n    ...\n}\n</code></pre> <p>A la l\u00ednia 8 tenim la instrucci\u00f3 per a mostrar per pantalla:</p> Java<pre><code>System.out.println(\"Hola, m\u00f3n!\");\n</code></pre> <p>I per qu\u00e8 hem de posar <code>System.out.println(...)</code> i no nom\u00e9s <code>println(...)</code>?</p> <p>Perqu\u00e8 en Java, la invocaci\u00f3 de funcions dep\u00e9n de les llibreries on estan. En l'exemple es crida a la llibreria <code>System</code>. Dins d'ella est\u00e0 la llibreria <code>out</code> (que cont\u00e9 les funcions de sortida) i dins d'ella est\u00e0 la funci\u00f3 <code>println()</code>, que \u00e9s qui definitivament imprimix el text per pantalla. Per a accedir a eixa funci\u00f3 hem de posar l'estructura de llibreries separades per un punt <code>(.)</code>.</p> <p>Aquesta funci\u00f3 tamb\u00e9 fa un salt de l\u00ednia. Si no el volem, usarem <code>print()</code>.</p> <p>Fora del m\u00e8tode <code>main()</code> podem declarar variables globals i funcions.</p> <p>Una volta hem escrit el nostre programa, necessitarem compilar-lo i executar-lo.</p> <p>Amb IntelliJ farem les dues accions seguides amb el bot\u00f3 de play situat a la part de dalt del nostre programa (o en els marges del mateix):</p> <p></p>"},{"location":"PRG05/#144-algunes-dreceres-i-coses-practiques-de-intellij","title":"1.4.4. Algunes dreceres i coses pr\u00e0ctiques de IntelliJ","text":"DRECERA DE TECLAT ACCI\u00d3 sout + TAB System.out.println(\"\"); soutv + TAB System.out.println de la variable anterior fori + TAB Estructura for main + TAB Estructura public static void main(String args[]) Ctrl + b Ens porta a la definici\u00f3 de funci\u00f3 o classe sobre la que estem"},{"location":"PRG05/#2-introduccio-a-la-programacio-en-java","title":"2. Introducci\u00f3 a la programaci\u00f3 en Java","text":"<p>En este tema introduirem el llenguate de programaci\u00f3 Java i vorem com s'implementen en este llenguatge tots els aspectes que hem vist en Python.</p> <p>En Java TOT s\u00f3n classes</p> <p>Per a comen\u00e7ar, quan programem en Java, ens apareix el concepte de programaci\u00f3 modular. Aix\u00f2 ens obliga a encapsular tot el codi que fem dins de funcions, especialment dins d'una que s'anomena main. A m\u00e9s, com Java \u00e9s un llenguatge orientat a objectes, tot el codi ha d'estar estructurat en classes: totes les funcions (tamb\u00e9 el main, clar) han d'estar dins d'una estructura anomenada class. Aix\u00f2 ho treballarem al final de curs, per\u00f2 de moment hem de:</p> <ol> <li>Crear el nostre programa en un fitxer que s'ha d'anomenar exactament igual que la classe on encapsulem el nostre codi, i extensi\u00f3 .java.</li> <li>Crear el nostre codi dins d'un m\u00e8tode main, que \u00e9s la funci\u00f3 que s'executar\u00e0 quan comen\u00e7a el programa.</li> </ol> Primer.java<pre><code>public class Primer { //(1)!\n    public static void main(String[] args) { //(2)!\n        int num = 29; // per exemple\n        boolean esPrimer = true;\n        for (int i = 2; i &lt; num; i++) {\n            if(num % i == 0){\n                esPrimer = false;\n                break;\n            }\n        }\n        if (esPrimer){\n            System.out.println(num + \" \u00e9s un n\u00famero primer.\");\n        } else {\n            System.out.println(num + \" no \u00e9s un n\u00famero primer.\");\n        }\n    }\n}\n</code></pre> <ol> <li>El nom del fitxer haur\u00e0 de dir-se Primer.java</li> <li>El main sempre es defineix aix\u00ed</li> </ol> <p>Compilar i executar</p> <p>Una volta hem escrit el nostre programa, en el fitxer que hem anomenat Primer.java, cal compilar-lo per a crear el fitxer de bytes, Primer.class, per a que puga executar-lo l'int\u00e8rpret de Java.</p> <p><code>javac Primer.java</code></p> <p>Aix\u00f2 comprovar\u00e0 si el programa t\u00e9 errors sint\u00e0ctics. Si est\u00e0 b\u00e9, generar\u00e0 el fitxer de bytes Primer.class, i ja el podrem executar amb:</p> <p><code>java Primer</code></p> <p></p> <p>Nosaltres no ho farem aix\u00ed, a m\u00e0, sin\u00f3 que utilitzarem un IDE (Entorn de Desenvolupament Integrat) per a editar, compilar, executar i depurar el nostre programa.</p> <p>En IntelliJ (i altres IDEs) conforme escrius el codi, ja va indican-te alguns errors que troba (fins i tot no espera a que acabes d'escriure la instrucci\u00f3). Per a provar el codi, simplement haurem de fer clic en la icona del Play (de color verd). Aix\u00f2 ja s'encarrega de guardar els canvis del fitxer, compilar-lo i, si ha anat b\u00e9, executar-lo.</p>"},{"location":"PRG05/#3-dades","title":"3. Dades","text":"<p>Java, a difer\u00e8ncia de Python, \u00e9s un llenguatge de tipificaci\u00f3 forta. Aix\u00f2 vol dir que haurem de:</p> <ul> <li>Declarar les variables: indicar el tipus que ha de ser una variable (i que ja no podr\u00e0 canviar) abans d'usar-la.</li> <li>Indicar el tipus de dades que retorna una funci\u00f3 (ja ho veurem).</li> <li>Comprovar que els valors que s'assignen a una variable s\u00f3n de tipus compatibles. IntelliJ ho fa autom\u00e0ticament.</li> </ul>"},{"location":"PRG05/#31-tipus-de-dades","title":"3.1. Tipus de dades","text":"<p>Hi ha 8 tipus de dades b\u00e0sics en Java:</p> Nom Categoria Longitud Rang boolean L\u00d2GIC 1 bit false, true char CAR\u00c0CTER 2 bytes 0 a 2^16 - 1 byte ENTER 1 byte -2^7 a 2^7 - 1 short ENTER 2 bytes -2^15 a 2^15 - 1 int ENTER 4 bytes -2^31 a 2^31 - 1 long ENTER 8 bytes -2^63 a 2^63 - 1 float REAL 4 bytes -2^32 a 2^32 - 1 double REAL 8 bytes -2^300 a 2^300 - 1 <p>Notes</p> <ul> <li>Els valors l\u00f2gics s\u00f3n true i false (min\u00fascula). En Python eren: True i False.</li> <li>Les variables de tipus char nom\u00e9s poden contindre 1 car\u00e0cter. Requerix 2 bytes, ja que Java no emmagatzema els car\u00e0cters en format ASCII, sin\u00f3 UNICODE. Per tant, en Java podem usar car\u00e0cters llatins, grecs, ar\u00e0bics, cir\u00edl\u00b7lics, hebreus i molts m\u00e9s.</li> <li>En Python el tipus str podia admetre qualsevol cadena de car\u00e0cters per\u00f2 en Java no existe</li> </ul> <p>Com hem dit, les variables deuen ser declarades abans de ser utilitzades (assignar-li un tipus). Amb el tipus aconseguirem acotar el conjunt de valors que admet la variables (domini) i el conjunt d'operacions que podem fer sobre la variable.</p> <p>Per tant, la informaci\u00f3 b\u00e0sica que hem de saber d'una variable \u00e9s:</p> <ul> <li>Tipus: El tipus b\u00e0sic de la variable (char, float...)</li> <li>Identificador: El nom amb el qual accedim a la variable</li> <li>Valor: La informaci\u00f3 que guarda la variable en un moment donat de l'execuci\u00f3 del programa</li> </ul> <p>El valor de la variable \u00e9s opcional: quan es declara una variable, no cal indicar-lo.</p> Exemples de declaraci\u00f3 de variables Java<pre><code>int edat:\nint saldo = 1000;\nchar lletraDNI = 'S';\nint comptador = 0, x, y;\nfloat radi, longitud;\nboolean pagat = false;\n</code></pre> <p>Com veiem, al final de cada assignaci\u00f3 cal posar un punt i coma. Tamb\u00e9 caldr\u00e0 posar-lo despr\u00e9s de cada instrucci\u00f3.</p>"},{"location":"PRG05/#32-constants","title":"3.2. Constants","text":"<p>Una constant \u00e9s com una variable (t\u00e9 un tipus, un nom i un valor) per\u00f2 amb la condici\u00f3 que el seu contingut (el valor de la variable) no va a canviar al llarg del programa. Per aix\u00f2 diem que \u00e9s una constant i no una variable (no pot variar).</p> <p>La forma de declarar una constant en Java \u00e9s indicant-ho amb la paraula final. \u00c9s a dir, el valor que li posem en eixe moment, \u00e9s el valor \"final\" que tindr\u00e0:</p> Java<pre><code>final double PI = 3.141592;\nfinal int IVA = 21;\nfinal char BOMBA = 'Q';\n</code></pre> <p>Per convenci\u00f3, posarem els noms de les constants tot en maj\u00fascules.</p> <p>Constants en Python</p> <p>En Python no hi ha possibilitat de definir constants. Malgrat a\u00e7\u00f2, podem trobar-nos codi Python amb variables definides en MAJ\u00daSCULES en un intent del programador perqu\u00e8 la variable siga una constant (o que siga tractada com una), per\u00f2 el seu valor S\u00cd que es pot canviar, per\u00f2 no es deu. Per tant, podem parlar de Constants per Honor, que encara que el valor es pot canviar, no ho farem.</p>"},{"location":"PRG05/#33-paraules-reservades","title":"3.3. Paraules reservades","text":"<p>Estes paraules no podran usar-se per a noms de variables perqu\u00e8 estan reservades:</p> abstract continue finally int public throw assert default float interface return throws boolean do for long short transient break double goto native static true byte else if new strictfp try case enum implements null super void catch extends import package switch volatile class false inner private synchronized this const final instanceof protected this while"},{"location":"PRG05/#4-operadors","title":"4. Operadors","text":"<p>Els operadors de Java s\u00f3n els habituals, per\u00f2 recordem que no s\u00f3n exactament els mateixos que en Python. Ac\u00ed estan tots, ordenats per prioritat d'execuci\u00f3:</p> CATEGOR\u00cdA DE L'OPERADOR OPERADORS PYTHON OPERADORS JAVA ASSOCIATIVITAT Par\u00e8ntesi, vectors ( )  [ ] ( )  [ ] ESQUERRA Operadors unaris + - ++ -- + - DRETA Pot\u00e8ncia ** DRETA Multiplicaci\u00f3, divisi\u00f3 i residu * / // % * / % ESQUERRA Suma i resta + - + - ESQUERRA Operadors relacionals &lt; &lt;= &gt; &gt;= == != &lt;&gt; &lt; &lt;= &gt; &gt;= == != ESQUERRA 'No' l\u00f2gic not ! ESQUERRA 'i' l\u00f2gic and &amp;&amp; ESQUERRA 'o' l\u00f2gic or || ESQUERRA 'o' exclusiu ^ ESQUERRA Operador condicional ?: DRETA Assignacions = += -= = *= /= //= %= = += -= *= /= %= DRETA <p>Vegem els operadors que s\u00ed que t\u00e9 Java per\u00f2 no t\u00e9 Python:</p>"},{"location":"PRG05/#41-operador-logic","title":"4.1. Operador l\u00f2gic <code>^</code>","text":"<p>En Java apareix un nou operador l\u00f2gic (que no t\u00e9 Python) anomenat or-Exclusiu, que es representa per ^. \u00c9s el mateix que l'operador or per\u00f2 si els 2 operands s\u00f3n true, el resultat \u00e9s false. \u00c9s a dir, nom\u00e9s val true quan un i nom\u00e9s un dels 2 operadors \u00e9s true. \u00c9s a dir, seguix la seg\u00fcent taula de veritat:</p> x y x ^ y F F F F V V V F V V V F"},{"location":"PRG05/#42-operadors-aritmetics-incrementals-i-","title":"4.2. Operadors aritm\u00e8tics incrementals <code>++</code> i <code>--</code>","text":"<p>Els operadors unaris <code>++</code> i <code>--</code> incrementen o decrementenen 1 unitat la variable a qui acompanyen. S'utilitzen molt en Java i C (per\u00f2 no existeixen en Python).</p> Java<pre><code>x = 10;\nx++; // Ara la x val 11\n</code></pre> <p>En compte de <code>x++</code> tamb\u00e9 hagu\u00e9rem pogut posar <code>++x</code>, i el resultat seria el mateix. Ara b\u00e9, si eixe auto increment est\u00e0 dins d'una expressi\u00f3, la cosa canvia:</p> Exemples d'autoincrement dins d'una expressi\u00f3 <p></p> <p>\u00c9s a dir:</p> <ul> <li>Si l'operador va davant (++x), primer s'incrementa la variable i despr\u00e9s s'utilitza el valor de la variable en l'expressi\u00f3 on apareix.</li> <li>Si l'operador va despr\u00e9s (x++), primer s'utilitza el valor de la variable en l'expressi\u00f3 i despr\u00e9s s'incrementa la variable.</li> </ul> <p>Resumint:</p> <p></p> Altre exemple <p></p> Exercici 1. Operadors aritm\u00e8tics incrementals <p>Donades 3 variables enteres <code>a=4</code>, <code>b=5</code> i <code>c=6</code>, quin valor t\u00e9 cada variable despr\u00e9s de cada seq\u00fc\u00e8ncia d'assignacions?</p> Java<pre><code>a = b++ - c--;\nb += --b;\nc *= a-- + b;\n</code></pre> Exercici 2 <p>Donades 2 variables enteres <code>a=4</code>, <code>b=5</code>, qu\u00e8 es mostrar\u00e0 per pantalla?</p> Java<pre><code>System.out.println(a++ + --b);\nSystem.out.println(a++ + \" \" + --b);\nSystem.out.println(-b);\nSystem.out.println(a + \" \" + b);\n</code></pre>"},{"location":"PRG05/#43-operador-condicional-ternari","title":"4.3. Operador condicional ternari <code>?:</code>","text":"<p>Sintaxi:</p> <p><code>condici\u00f3 ? expressi\u00f3_true : epressi\u00f3_false</code></p> Exemples d'\u00fas <ul> <li>Assignar un valor diferent a una variable segons una condici\u00f3:</li> </ul> Java<pre><code>major = (a&gt;b ? a : b);\ndistancia = (a&gt;b ? a-b : b-a);\nnum_positiu = (num&gt;0 ? num : -num);\n</code></pre> <ul> <li>Mostrar un valor diferent segons una condici\u00f3:</li> </ul> Java<pre><code>printf(edat &gt; 18 ? \"Adult\" : \"infantil\");\n</code></pre> Exercici 3. Operador condicional <p>Fes un programa que, donades 2 variables enteres, mostre quin \u00e9s el n\u00famero m\u00e9s gran i quin el m\u00e9s menut. Millora el programa per a que mostre un n\u00famero m\u00e9s gran de 3 variables. Usa l'operador condicional ternari.</p>"},{"location":"PRG05/#5-sortida-de-dades","title":"5. Sortida de dades","text":""},{"location":"PRG05/#51-funcions-println-i-print","title":"5.1. Funcions <code>println</code> i <code>print</code>","text":"<p>En Python la sortida la f\u00e9iem amb print. EN Java podem fer-ho de 3 formes:</p> <ul> <li>System.out.println(argument). Mostra per pantalla l'argument que se li passa entre par\u00e8ntesi, i fa un salt de l\u00ednia. Se li pot passar tant cadenes (String) com n\u00fameros (i objectes, com vorem m\u00e9s endavant).</li> <li>System.out.print(argument) \u00e9s id\u00e8ntica a println per\u00f2 sense fer el bot de l\u00ednia al final. \u00c9s a dir: println(\"cadena\") \u00e9s el mateix que print(\"cadena\\n\").</li> <li>System.out.printf(\"cadena de control\", arg1, arg2, ... argN). Serveix per a especificar un format (quantitat de decimals, quantitat d'espais per a representar un n\u00famero...). No el vorem.</li> </ul> Exemples OperadorsAritmetics.java<pre><code>public class OperadorsAritmetics{\n    public static void main(String args[]){\n        int i = 12, j = 120;\n        double x = 12.345, y = 8.27;\n        System.out.print(\"Valors de les variables:\\n\");\n        System.out.println(\" i = \" + i); //(1)!\n        System.out.println(\" j = \" + j);\n        System.out.println(\" x = \" + x);\n        System.out.println(\" y = \" + y);\n        System.out.print(\"Resultats de les sumes:\\n\");\n        System.out.println(\" i + j = \" + (i + j)); //(2)!\n        System.out.printf(\" x + y = %f\", (x + y));\n    }\n}\n</code></pre> <ol> <li>Si un dels operadors de + \u00e9s una cadena, en compte de sumar, concatena.</li> <li>Si no hagu\u00e9rem posat el par\u00e8ntesis, concatenaria el valor de la variable i a la cadena de l'esquerra, i despr\u00e9s li concatenaria el valor de la variable j. Per\u00f2 el que volem fer \u00e9s una suma (i + j) i despr\u00e9s concatenar eixe resultat a la cadena de l'esquerra.</li> </ol>"},{"location":"PRG05/#52-funcions-sobrecarregades","title":"5.2. Funcions sobrecarregades","text":"<p>La funci\u00f3 println (i print) admet nom\u00e9s 1 par\u00e0metre, per\u00f2 pot ser un String o un int, o un float... Aix\u00f2 \u00e9s perqu\u00e8 hi ha moltes funcions println (i print) ja definides. \u00c9s a dir: moltes funcions amb el mateix nom, per\u00f2 distints tipus de par\u00e0metres. Quan passa aix\u00f2 es diu que la funci\u00f3 est\u00e0 sobrecarregada.</p> <p>Si a l'IDE escrivim System.out.println, autom\u00e0ticament ens mostra les diferents funcions que podem usar:</p> <p></p>"},{"location":"PRG05/#53-travesseres-dels-ides-sout-etc","title":"5.3. Travesseres dels IDEs: sout, etc","text":"<p>I cada vegada que vull mostrar una cosa he d\u00a1escriure System.out.println(\"\")? No necess\u00e0riament: si en IntelliJ (en Netbeans tamb\u00e9) escrivim sout i la tecla del tabulador, autom\u00e0ticament s'escriu el System.out.println(\"\"); i es posa el cursor entre les cometes.</p> <p>Hi ha moltes altres travesseres en IntelliJ (algunes ja les hem comentades en la introducci\u00f3 del tema), les altres vos convide a investigar-les...</p>"},{"location":"PRG05/#6-entrada-de-dades","title":"6. Entrada de dades","text":"<p>En Java, per a arreplegar dades de teclat \u00e9s un poc m\u00e9s complicat que en Python, per\u00f2 no patiu si vos pareix complicat, ja que en la pr\u00e0ctica usarem una funcioneta nostra que ens servir\u00e0 per a llegir en tot els programes.</p> <p>Per a llegir de teclat cal usar una classe que ens \"unisca\" el teclat amb el programa.</p> <p></p> <p>Vorem 2 formes de fer-ho: amb la classe Scanner i amb la classe BufferesReader. Les principals difer\u00e8ncies s\u00f3n:</p> Classe Scanner Classe BufferedReader Llegir n\u00famero Directament - Llegir cadena - Convertir a n\u00famero Obliga a tractar possible error NO S\u00cd Cal buidar buffer d'entrada S\u00cd NO introduir decimal per teclat Amb coma (10,3) per\u00f2 pot ser amb punt si abans posem: teclat.useLocale(Locale.ENGLISH); Amb punt (10.3)"},{"location":"PRG05/#61-entrada-de-dades-amb-la-classe-scanner","title":"6.1. Entrada de dades amb la classe Scanner","text":"<p>Seguirem els seg\u00fcents passos per fer \u00fas de la classe:</p> <p>1.Importar la classe. Cal afegir a\u00e7\u00f2 al principi del programa (fora de la classe):</p> Java<pre><code>import java.util.Scanner; //(1)!\n</code></pre> <ol> <li>Si no ens enrecordem de posar-ho, no passa res, ja que IntelliJ ens avisar\u00e0 i ho posar\u00e0 ell sol.</li> </ol> <p>2.Indicar d'on volem llegir les dades (teclat, fitxer...). Cal posar en el main:</p> Java<pre><code>Scanner teclat = new Scanner(System.in); //(1)!\n</code></pre> <ol> <li>Si no volgu\u00e9rem agafar dades de teclat sin\u00f3 d'un fitxer, en compte de System.in caldria posar new File(\"ruta/nomFitxer\");</li> </ol> <p>3.Llegir usant els m\u00e8todes:</p> <ul> <li><code>teclat.next(); // Retorna String (nom\u00e9s 1 paraula)</code></li> <li><code>teclat.nextLine(); // Retorna String (potser n paraules)</code></li> <li><code>teclat.nextInt(); // Retorna int</code></li> <li><code>teclat.nextFloat(); // Retorna float</code></li> <li><code>teclat.next().charAt(0); // Retorna un char (el primer que s'introdu\u00efsca)</code></li> </ul> <p>Exemple complet de lectura de dades amb la classe Scanner</p> Java<pre><code>import java.util.Scanner;\n\npublic class LecturaTeclat {\n    public static void main(String[] args) {\n        Scanner teclat = new Scanner(System.in);\n        String nom;\n        int edat;\n        float altura; // en metres\n        System.out.print(\"Com et diuen? \");\n        nom = teclat.nextLine();\n\n        System.out.print(\"Quants anys tens? \");\n        edat = teclat.nextInt();\n\n        System.out.print(\"Qu\u00e8 medeixes (en metres)? \");\n        altura = teclat.nextFloat();\n\n        System.out.println(\"Hola \"+ nom + \"!\");\n        System.out.println(\"Tens \"+ edat + \" anys i \" + (altura*100) + \" cm.\");\n    }\n}\n</code></pre> Exercici 4. Entrada de dades amb la classe Scanner <p>Fes un programa que demane per teclat les dades d'una venda: nom de l'article, quantes unitats (sense decimals) i el preu (amb decimals). Despr\u00e9s ha de mostrar un text com: \"4 cerveses a 1.25 la unitat, s\u00f3n 5.00 euros\".</p> Exercici 5 <p>Modifica el programa anterior, fent que primer pregunte les unitats i despr\u00e9s el nom de l'article. Quan ho executes vor\u00e0s que no obtens el resultat esperat. Mira l'apartat seg\u00fcent (buffer d'entrada) i intenta resoldre-ho.</p>"},{"location":"PRG05/#611-solucio-al-problema-del-buffer-dentrada","title":"6.1.1. Soluci\u00f3 al problema del buffer d'entrada","text":"<p>Tot el que s'introdueix per teclat va guardant-se en un \"buffer d'entrada\".</p> <p>Quan usem una funci\u00f3 de lectura de teclat, si en el buffer hi ha alguna cosa, no espera res de teclat sin\u00f3 que ho agafa del buffer i despr\u00e9s ho lleva del buffer.</p> <p>A vegades conv\u00e9 buidar eixe buffer. Aix\u00f2 es fa amb el <code>nextLine()</code> tamb\u00e9.</p> <p>Vegem amb un exemple diferents motius d'haver d'esborrar el buffer.</p> Java<pre><code>import java.util.Scanner;\n\npublic class Exemple {\n    public static void main(String[] args) {\n        Scanner teclat = new Scanner(System.in);\n        String nom;\n        int edat;\n        float altura;\n\n        System.out.print(\"Quants anys tens? \");\n        edat = teclat.nextInt(); //(1)!\n        teclat.nextLine();\n\n        System.out.print(\"Com et diuen? \");\n        nom = teclat.next(); // next() i no nextLine() si nom\u00e9s volem 1 paraula (2)\n        teclat.nextLine();\n\n        altura = -1;\n        do {\n            try{\n                System.out.print(\"Qu\u00e8 medeixes (en metres)? \");\n                altura = teclat.nextFloat(); //(3)!\n            } catch (Exception e) {\n                teclat.nextLine();\n                System.out.println(\"Error. Lletres no.\");\n            }\n        } while (altura == 1);\n\n        System.out.println(\"Hola, \" + nom + \"!\");\n        System.out.println(\"Tens \" + edat + \" anys i medeixes \" + (altura * 100) + \" cm.\");\n    }\n}\n</code></pre> <ol> <li>Si despr\u00e9s de llegir un n\u00famero volem llegir un text, com en el buffer encara estar\u00e0 el car\u00e0cter de l'intro (\\n), la lectura de text agafar\u00e0 eixe car\u00e0cter i no esperar\u00e0 a llegir res de teclat.</li> <li>Si hem posat m\u00e9s paraules , les llevem per a que no les intente agafar una lectura de dades posterior. Si eixa 2a lectura fora lectura de n\u00famero, donaria error.</li> <li>Si volem evitar que quan demanem un n\u00famero l'usuari pose una lletra, ho podem tractar amb un try-catch (ja ho vorem) i un bucle per a tornar a demanar el n\u00famero. Per\u00f2 haurem d'esborrar eixa lletra del buffer. Si no, entraria en un bucle infinit sense poder posar res per teclat.</li> </ol>"},{"location":"PRG05/#62-entrada-de-dades-amb-la-classe-bufferedreader","title":"6.2. Entrada de dades amb la classe BufferedReader","text":"<p>Seguirem els seg\u00fcents passos per fer \u00fas de la classe:</p> <p>1.Importar la classe. Cal afegir a\u00e7\u00f2 al principi del programa (fora de la classe):</p> Java<pre><code>import java.io.*; //(1)!\n</code></pre> <ol> <li>Si no ens enrecordem de posar-ho, no passa res, ja que IntelliJ ens avisar\u00e0 i ho posar\u00e0 ell sol.</li> </ol> <p>2.Indicar d'on volem llegir les dades (teclat, fitxer...). Cal posar en el main:</p> Java<pre><code>BufferedReader teclat = new BufferedReader(new InputStreamReader(System.in)); //(1)!\n</code></pre> <ol> <li>Si no volgu\u00e9rem agafar dades de teclat sin\u00f3 d'un fitxer, en compte de new Input... caldria posar new FileReader(\"ruta/nomFitxer\");</li> </ol> <p>3.Llegir usant el m\u00e8tode <code>readLine()</code>:</p> <p>En esta classe, en compte d'haver una funci\u00f3 diferent per a llegir diferents tipus de dades, nom\u00e9s hi ha una funci\u00f3 (readLine()) que llig cadenes de text:</p> Java<pre><code>try{\n    String temp = teclat.readLine();\n}\ncatch (IOException e){\n    System.out.println(\"Error en l'entrada de dades\");\n}\n</code></pre> <p>Per qu\u00e8 <code>try-catch</code>?</p> <p>El readLine() serveix per a llegir tant teclat com de fitxer. Si ho fem de fitxer pot donar error (si no existeix, no t\u00e9 permisos, etc.). Esta forma de llegir de teclat (amb la classe BufferedReader) obliga al programador a tractar eixe error: cal posar la lectura en un bloc <code>try-catch</code> (ja ho vorem en detall). Si no es fa, el compilador de Java dona error.</p> <p>Vegem un exemple de lectura de dades amb la classe BufferedReader:</p> Java<pre><code>import java.io.*;\n\npublic class Proves {\n    public static void main(String[] args) {\n        BufferedReader teclat = new BufferedReader(new InputStreamReader(System.in));\n        String nom;\n        int edat;\n        float altura;\n\n        try{\n            System.out.print(\"Com et diuen? \");\n            nom = teclat.readLine();\n\n            System.out.print(\"Quants anys tens? \");\n            edat = Integer.parseInt(teclat.readLine()); //(1)!\n\n            System.out.print(\"Qu\u00e8 medeixes (en metres)? \");\n            altura = Float.parseFloat(teclat.readLine()); //(2)!\n\n            System.out.println(\"Hola, \" + nom + \"!\");\n            System.out.println(\"Tens \" + edat + \" anys i \" + (altura * 100) + \" cm.\");\n        } catch (Exception e) {\n            System.out.println(\"Ha hagut algun error d'entrada de dades\");\n        }\n    }\n}\n</code></pre> <ol> <li>Si volem llegir de teclat un n\u00famero enter, cal llegir una cadena de text i despr\u00e9s convertir-la a enter.</li> <li>El mateix si volem llegir un n\u00famero float, etc.</li> </ol> Exercici 6. Entrada de dades amb la classe BufferedReader <p>Fes un programa que demane per teclat les dades d'un pacient: nom, edat, pes (amb decimals) i si \u00e9s home, dona o altre (h/d/a). A continuaci\u00f3 mostra eixes dades en el format que vullgues. Fes la lectura de dades amb la classe BufferedReader. En l'apartat seg\u00fcent pots consultar com llegir de teclat un car\u00e0cter amb esta classe.</p>"},{"location":"PRG05/#621-conversions-de-string-a-un-tipus-de-dades","title":"6.2.1. Conversions de String a un tipus de dades","text":"<p>Com hem vist a l'exemple anterior, Java permet passar un String a un int, float, etc. Aix\u00f2 es fa amb el que s'aomena classes de cobertura (o wrapper), les quals tenen funcions (m\u00e8todes) per a passar un String al tipus b\u00e0sic desitjat de Java. Aix\u00f2 ens servir\u00e0 per si volem capturar de teclat un n\u00famero, etc. i no un String.</p> <p>Les classes wrapper existents s\u00f3n:</p> <p></p> <p>Compte!</p> <p>No existeix un Char.parseChar() ja que no podem convertir tota una cadena en nom\u00e9s 1 car\u00e0cter. Si volem llegir de teclat nom\u00e9s 1 car\u00e0cter, farem com si lleg\u00edrem una cadena per\u00f2 ens quedarem nom\u00e9s en el primer car\u00e0cter d'eixa cadena. Aix\u00f2 es fa amb el charAt(0), com f\u00e9iem en la classe Scanner:</p> Java<pre><code>char lletra;\nlletra = teclat.readLine().charAt(0);\n</code></pre>"},{"location":"PRG05/#622-conversions-dun-tipus-de-dades-a-un-string","title":"6.2.2. Conversions d'un tipus de dades a un String","text":"<p>Suposem que tenim dos variables: cadena de tipus String i numero de tipus int. Podem fer la conversi\u00f3 del n\u00famero al String de formes diferents:</p> <ul> <li><code>cadena = \"\" + numero;</code></li> <li><code>cadena = String.valueOf(numero);</code></li> <li><code>cadena = Integer.toString(numero); // Float.toString(), Double.toString()...</code></li> </ul>"},{"location":"PRG05/#63-entrada-de-dades-amb-les-nostres-propies-funcions","title":"6.3. Entrada de dades amb les nostres pr\u00f2pies funcions","text":"<p>Potser ens resulte un poc farrag\u00f3s la lectura de teclat en Java. Per a evitar escriure tant de codi cada vegada que volem llegir alguna cosa de teclat, podem fer-nos una llibreria amb les nostres pr\u00f2pies funcions (ja vorem com fer-ho en detall).</p> Funcionetes.java<pre><code>import java.util.Scanner;\n\npublic class Funcionetes {\n    static Scanner teclat = new Scanner(System.in);\n\n    // --------------------------------------------------------------\n    public static int lligInt(String pregunta) {\n        int numero;\n        do {\n            try {\n                System.out.println(pregunta);\n                numero = teclat.nextInt(); // Si hem posat lletres va al catch\n                teclat.nextLine();\n                return numero;\n            } catch (Exception e) { // Si hem posat lletres, avisa i buida el buffer\n                System.out.print(\"Ha de ser un n\u00famero enter: \");\n                teclat.nextLine();\n            }\n        } while (true); // Bucle infinit fins que retornem el n\u00famero correcte\n    }\n\n    // --------------------------------------------------------------\n    public static float llifFloat (String pregunta) {\n        ...\n    }\n\n    // --------------------------------------------------------------\n}\n</code></pre> <p>I en el programa on tenim el main, simplement far\u00edem:</p> Proves.java<pre><code>public class Proves {\n    public static void main(String[] args) {\n        int edat, any;\n        edat = Funcionetes.lligInt(\"Quants anys tens? \");\n        any = Funcionetes.lligInt(\"En quin any nasqueres? \");\n        ...\n    }\n}\n</code></pre>"},{"location":"PRG05/#7-estructures-de-control","title":"7. Estructures de control","text":"<p>Anem a veure com s'implementen en Java les estructures de control (if, while...) que ja hem vist en Python. En les estructures de control hi ha condicions i blocs d'accions. Recordem que un bloc \u00e9s un conjunt d'instruccions que depenen d'una condici\u00f3. Veiem-ho en este exemple de Python, on l'IDE (Visual Studio Code) ens marca amb l\u00ednies verticals els distints blocs:</p> <p></p> <p>En Java (i C) estes s\u00f3n les difer\u00e8ncies respecte a Python per a representar els blocs:</p> Python Java Condici\u00f3 Amb \":\" al final Entre par\u00e8ntesis (...) Abast Sagnat obligatori Entre claus { } i amb sangnat recomanable"},{"location":"PRG05/#71-bifurcacions","title":"7.1. Bifurcacions","text":""},{"location":"PRG05/#711-bifurcacio-simple-i-doble-if-if-else","title":"7.1.1. Bifurcaci\u00f3 simple i doble: <code>if</code> / <code>if-else</code>","text":"Sintaxi de l'if de Java<pre><code>if (condici\u00f3) {\n    // Accions quan la condici\u00f3 \u00e9s true\n}\nelse {\n    // Accions quan la condici\u00f3 \u00e9s false\n}\n</code></pre> <p>Exemple</p> <p>Amb este exemple d'if de Java podem vore tamb\u00e9 com es representen 4 blocs (entre claus):</p> Java<pre><code>if (a &lt; b) { // Bloc 1\n    System.out.println(\"El menor \u00e9s: \" + a);\n}\nelse { // Bloc 2\n    if (a &gt; b) { // Bloc 2.1\n        System.out.println(\"El menor \u00e9s: \" + b);\n    }\n    else { // Bloc 2.2\n        System.out.println(\"Els dos s\u00f3n iguals\");\n    }\n}\n</code></pre> <p>En aquest exemple, cadascun dels blocs tenen una \u00fanica instrucci\u00f3. Per tant, cap de les claus seria obligat\u00f2ria. Este codi seria equivalent:</p> Java<pre><code>if (a &lt; b) System.out.println(\"El menor \u00e9s: \" + a);\nelse if (a &gt; b) System.out.println(\"El menor \u00e9s: \" + b);\nelse System.out.println(\"Els dos son iguals\");\n</code></pre> Exercici 7. Bifurcacions if-else <p>Fes un programa que demane per teclat 3 n\u00fameros i que mostre el major.</p> Exercici 8 <p>Demana una nota amb decimals i mostra el text corresponent: \"ins\", \"suf\", \"b\u00e9\", \"not\" o \"exc\". O b\u00e9 \"error\" si la nota no est\u00e0 entre 0 i 10.</p>"},{"location":"PRG05/#712-bifurcacio-composta-switch","title":"7.1.2. Bifurcaci\u00f3 composta: <code>switch</code>","text":"<p>Depenent dels diferents valors d'una variable (o expressi\u00f3), es podran executar diferents blocs de codi.</p> <p>Eixa variable o expressi\u00f3 ha de ser de tipus int, char o String.</p> <p></p> <p>La idea sembla clara: depenent del valor de la variable <code>estacio</code>, s'executar\u00e0 un tr\u00f3s de codi o un altre.</p> <p>Per a qu\u00e8 serveix un <code>break</code> en un switch?</p> <p>El funcionament del switch no \u00e9s exactament \"com voldr\u00edem\". Suposem que no hem posat cap break i que <code>estacio</code> val 3. Per pantalla es mostraria: Tardor, Hivern i Error. \u00c9s a dir: despr\u00e9s d'avaluar-se el que hem posat en el switch (estaci\u00f3), l'int\u00e8rpret comprova si el valor correspon el primer case. Si no, amb el segon. Si no, amb el tercer (i aix\u00ed successivament). Si s\u00ed que coincideix amb el valor d'un case, s'executar\u00e0 tot el codi no nom\u00e9s d'eixe case, sin\u00f3 de tots els cases seg\u00fcents, fins trobar un break.</p> <p>Per tant, si volem que s'execute nom\u00e9s el codi corresponent al valor trobat, posarem un break en l'\u00fatima instrucci\u00f3 de cada case.</p> <p>Si l'expressi\u00f3 que s'avalua \u00e9s un car\u00e0cter, els valors que es posen en els case han d'anar entre cometes simples:</p> <p></p> <p>En este exemple veiem que, amb el truquet de no posar el break en la 's', fa que si la variable eixir \u00e9s una 's', s'execute tot fins trobar un break. \u00c9s a dir, tant si \u00e9s 's' com si \u00e9s 'S', s'executar\u00e0 el mateix codi. Igual per a la 'n' i 'N'.</p> <p>I si l'expressi\u00f3 \u00e9s un String, els valors dels case han d'anar en cometes dobles:</p> Java<pre><code>System.out.println(\"De quin poble eres?\");\n\nswitch (teclat.nextLine()){\n    case \"Sueca\": System.out.println(\"La merda seca\"); break;\n    case \"Algemes\u00ed\": System.out.println(\"Ni dona ni ross\u00ed\"); break;\n    case \"Canals\": System.out.println(\"Bords i criminals\"); break;\n    case \"Museros\": System.out.println(\"Pocs i punyeteros\"); break;\n}\n</code></pre> <p>Com veiem, no \u00e9s necessari el default.</p> <p>Recordem</p> <p>Python no t\u00e9 equivalent exacte al switch. Per\u00f2 es podria implementar una cosa semblant usant els elif:</p> Python<pre><code>poble = input(\"De quin poble eres?\")\n\nif poble == \"Sueca\":\n    print(\"La merda seca\") #(1)!\nelif poble == \"Algemes\u00ed\":\n    print(\"Ni dona ni ross\u00ed\")\nelif poble == \"Canals\":\n    print(\"Bords i ciminals\")\nelif poble == \"Museros\":\n    print(\"Pocs i punyeteros\")\n</code></pre> <ol> <li>En el switch de Java s'entrar\u00e0 en cada cas si es compleix una condici\u00f3 d'igualtat respecte la mateixa expressi\u00f3. Mentre que en els elif de Python es pot entrar en cada cas si es compleix la condici\u00f3 d'igualtat, de menor, major..., respecte diferents expressions.</li> </ol> Exercici 9. Bifurcacions amb switch <p>Demana una nota sense decimals i mostra el text corresponent: \"ins\", \"suf\", \"b\u00e9\", \"not\" o \"exc\". O b\u00e9 \"error\" si la nota no est\u00e0 entre 0 i 10. Fes-ho amb un switch. Observa que si fora amb decimals, no es podria fer amb un switch.</p> Exercici 10 <p>Calculadora. Fes un programa que llija de teclat 2 n\u00fameros i una operaci\u00f3 aritm\u00e8tica. El programa far\u00e0 el c\u00e0lcul i imprimir\u00e0 el resultat. Fes-ho amb un swich.</p> <p>NOTA: S'admetran els seg\u00fcents car\u00e0cters per a cada operaci\u00f3 aritm\u00e8tica:</p> <ul> <li>Suma: s. S. +</li> <li>Resta: r, R, -</li> <li>Multiplicaci\u00f3: m, M, *, x</li> <li>Divisi\u00f3: d, D, /</li> </ul>"},{"location":"PRG05/#72-bucles","title":"7.2. Bucles","text":""},{"location":"PRG05/#721-bucle-condicional-while","title":"7.2.1. Bucle condicional <code>while</code>","text":"<p><pre><code>graph LR\n    B[Codi previ] --&gt; C{Condici\u00f3 while}\n    C --&gt;|True| D[Codi dins el bucle]\n    D --&gt; C\n    C --&gt;|False| F[Sortir del bucle]</code></pre></p> <p>Sintaxi del while de Java</p> Java<pre><code>while (condici\u00f3) {\n    // Accions que es repeteixen mentre la condici\u00f3 \u00e9s true (1)\n}\n</code></pre> <ol> <li>Com en Python, tamb\u00e9 podem posar continue i break dins del bucle, per\u00f2 no existeix la part de l'else de fora del bucle.</li> </ol> <p>EL funcionament \u00e9s igual que en Python: mentre es complisca la condici\u00f3 es repetiran les accions. Quan el resultat de la condici\u00f3 siga false, acabar\u00e0 el bucle i continuar\u00e0 en la seg\u00fcent instrucci\u00f3.</p>"},{"location":"PRG05/#722-bucle-condicional-do-while","title":"7.2.2. Bucle condicional <code>do-while</code>","text":"<p><pre><code>graph LR\n    A[Codi previ] --&gt; C[Codi dins del bucle]\n    C --&gt; E{Condici\u00f3 do-while}\n    E --&gt;|True| C\n    E --&gt;|False| F[Sortir del bucle]</code></pre></p> <p>Aquest tipus de bucle no el t\u00e9 Python. Tamb\u00e9 repeteix un tros de codi mentre es compleix una condici\u00f3 per\u00f2 ara primer es fan les accions i despr\u00e9s es comprova si torna a entrar:</p> <p>La seua sintaxi en Java \u00e9s:</p> Java<pre><code>do{\n    // Accions que es repeteixen mentre la condici\u00f3 \u00e9s true (1)\n} while (condici\u00f3); //(2)!\n</code></pre> <ol> <li>Primer s'executen les accions</li> <li>Despr\u00e9s es comprova si es tornen a repetir les accions</li> </ol> <p>Per tant, en el while \"normal\" potser no s'executen mai les accions de dins del bucle (si des d'un principi ja no es complira la condici\u00f3), mentre que en el do-while, segur que sempre es van a executar les accions, almenys 1 vegada.</p> <p>Atenci\u00f3!</p> <p>Tots els problemes de bucles poden fer-se amb while o amb do-while, encara que potser una de les dos \u00e9s m\u00e9s id\u00f2nia. Fes els seg\u00fcents exercicis de 2 formes distintes (amb while i amb do-while) i pensa quina de les 2 \u00e9s la m\u00e9s id\u00f2nia en cada exercici.</p> Exercici 11 <p>Programa que demane un n\u00famero i, a continuaci\u00f3, que demane cont\u00ednuament quin \u00e9s el quadrat d'eixe n\u00famero fins que siga encertat.</p> Exercici 12 <p>Programa que vaja demanant les notes que ha tret l'alumnat fins que s'introdu\u00efsca una nota -1. En acabant, que mostre la nota mitja, quantes notes estan aprovades i quantes suspeses (el n\u00famero -1 introdu\u00eft no comptar\u00e0 per a les estad\u00edstiques, clar).</p> <p>Informaci\u00f3</p> <p>Estos exercicis seg\u00fcents es faran millor amb un bucle incondicional (for) per\u00f2 intenta fer-los amb bucles condicionals.</p> Exercici 13 <p>Programa que mostre els n\u00fameros del 10 al 20.</p> Exercici 14 <p>Programa que mostre els n\u00fameros del 20 a 10, de 3 en 3.</p>"},{"location":"PRG05/#723-bucle-incondicional-for","title":"7.2.3. Bucle incondicional <code>for</code>","text":"<p>A l'explicaci\u00f3 del for de Python del tema anterior vei\u00e9rem l'exemple de rec\u00f3rrer els n\u00fameros de l'1 al 9. Veiem ara com seria en Java (i C):</p> <p>Mostrar els n\u00fameros de l'1 al 9 (un en cada l\u00ednia)</p> JavaPython Java<pre><code>int i;\nfor(i=1; i&lt;10; i++){\n    System.out.println(i);\n}\n</code></pre> Python<pre><code>for i in range (1, 10):\n    print(i)\n</code></pre> <p>Veiem que s\u00f3n 3 apartats, separats per punt i coma:</p> <p></p> <p>On tenim que:</p> <ul> <li>Inicialitzaci\u00f3: Instrucci\u00f3 (o instruccions separades per coma) que s'executaran nom\u00e9s abans de la primera iteraci\u00f3 del for (i abans d'avaluar la condici\u00f3). Sol usar-se per a inicialitzar la variable que fa de comptador.</li> <li>Condici\u00f3: Si es compleix la condici\u00f3 (que pot ser composta), s'executaran les sent\u00e8ncies de dins del for. Si no es compleix, eixirem del for.</li> <li>Actualitzaci\u00f3: Instrucci\u00f3 (o instruccions separades per coma) que s'executaran despr\u00e9s d'executar les sent\u00e8ncies de dins del for. A continuaci\u00f3, torna a avaluar-se la condici\u00f3.</li> </ul> <p>\u00c9s a dir, un possible flux seria:</p> <ul> <li>Inicialitzaci\u00f3</li> <li>Condici\u00f3 true --&gt; sent\u00e8ncies --&gt; actualitzaci\u00f3</li> <li>Condici\u00f3 true --&gt; sent\u00e8ncies --&gt; actualitzaci\u00f3</li> <li>Condici\u00f3 true --&gt; sent\u00e8ncies --&gt; actualitzaci\u00f3</li> <li>...</li> <li>Condici\u00f3 false --&gt; El bucle acaba</li> </ul> <p>Altres exemples:</p> <p>Exemple incremental</p> <p>Mostra els n\u00fameros del 10 al 30, de 5 en 5:</p> Soluci\u00f3 1Soluci\u00f3 2 Java<pre><code>int i;\nfor (i=10; i&lt;=30; i+=5){ //(1)!\n    System.out.println(i);\n}\n</code></pre> <ol> <li>Mostrar\u00e0 els n\u00fameros: 10, 15, 20, 25, 30</li> </ol> Java<pre><code>int i;\nfor(i=10; i&lt;=30; i++){ //(1)!\n    if(i%5 == 0){ \n        System.out.println(i);\n    }\n}\n</code></pre> <ol> <li>Esta soluci\u00f3 tamb\u00e9 mostrar\u00e0 eixos n\u00fameros (m\u00faltiples de 5 en eixe rang) per\u00f2 \u00e9s menys eficient ja que fa m\u00e9s iteracions del bulce i, a m\u00e9s, en cada iteraci\u00f3 fa una comprovaci\u00f3 (de si \u00e9s m\u00faltiple de 5).</li> </ol> <p>Exemple amb decrement</p> <p>Mostra els n\u00fameros del 10 al 4 en ordre descendent:</p> Java<pre><code>int i;\nfor(i=10; i&gt;3; i--){ //(1)!\n    System.out.println(i);\n}\n</code></pre> <ol> <li>Mostrar\u00e0 els n\u00fameros: 10, 9, 8, 7, 6, 5, 4</li> </ol> <p>Fixa't que, com ara el comptador \"va cap arrere\", la i no s'incrementa (i++) sin\u00f3 que es decrementa (i--). I la condici\u00f3 no \u00e9s menor (&lt;), sin\u00f3 major (&gt;).</p> <p>Exemple de bucle infinit (que cal evitar, clar)</p> Java<pre><code>int i;\nfor(i=1; i!=9; i+=3){ //(1)\n    System.out.println(i);\n}\n</code></pre> <ol> <li>Compte! Aix\u00f2 mostrar\u00e0 els n\u00fameros: 1, 4, 7, 10, 13, 16, 19, 22... Fins a l'infinit!</li> </ol> <p>Cal anar en compte en la condici\u00f3. En este cas, per molt que incrementem la variable i, sempre es complir\u00e0 que i \u00e9s distint de 9. Per tant, es genera el que s'anomena bucle infinit.</p> <p>Exercicis sobre bucles infinits</p> <p>Com ja hem vist, els bucles incondicionals (for) s\u00f3n m\u00e9s adequats quan sabem quantes vegades s'ha de repetir unes sent\u00e8ncies, mentre que els condicionals (while, do-while) s\u00f3n m\u00e9s adequats quan depenen d'una condici\u00f3 que no sabem quan es complir\u00e0. No obstant, qualsevol bucle pot implementar-se de les 3 maneres.</p> <p>Fes en Java els exercicis seg\u00fcents amb bucles for (i, si vols, intenta tamb\u00e9 fer-los amb bucles condicionals). S\u00f3n els mateixos que ja f\u00e9rem en Python </p> Exercici 15 <p>Programa que demane una taula de multiplicar i la mostre</p> Exercici 16 <p>Programa que calcule el m\u00e0xim de 10 n\u00fameros introdu\u00efts per teclat</p> Exercici 17 <p>Programa que calcule el m\u00e0xim, m\u00ednim i mitjana de 10 n\u00fameros entrats per teclat</p> Exercici 18 <p>Programa que mostre les taules de multiplicar del 2 al 9</p> Exercici 19 <p>Programa que calcule el factorial d'un n\u00f1umero introdu\u00eft per teclat (n!) tenint en compte que:</p> <ul> <li>0! = 1</li> <li>n! = n * (n-1) * (n-2) * ... * 2 * 1 (sent n&gt;1)</li> </ul> <p>Feu-ho amb diferents solucions:</p> <ul> <li>Amb un for recorrent els n\u00fameros des de l'1 fins n</li> <li>Amb un for recorrent els n\u00fameros des d'n fins a 1</li> <li>Amb un while recorrent els n\u00fameros des de l'1 fins n</li> <li>Amb un while recorrent els n\u00fameros des d'n fins a 1</li> </ul>"},{"location":"PRG05/#8-tractament-dexcepcions","title":"8. Tractament d'excepcions","text":"<p>Una excepci\u00f3 \u00e9s un error que pot avortar un programa. Cada error que es produeix \u00e9s un objecte de la classe Exception (ja vorem aix\u00f2 de classes i objectes).</p> <p>Com hi ha molts tipus d'errors, hi ha moltes classes d'Exceptions. De fet, hi ha una jerarquia d'excepcions. Ac\u00ed hi ha una xicoteta mostra de les m\u00e9s freq\u00fcents:</p> <p></p> <p>Si volem \"capturar\" un error i tractar-lo sense que avorte el programa, ho podem fer amb blocs try-catch-finally:</p> <p>Sintaxi:</p> Java<pre><code>try{\n    // Instruccions que podrien donar error (1)\n}\ncatch (TipusExcep1 e){\n    // Instruccions per si ocorre un error d'eixe tipus (2)\n}\ncatch (TipusExcep2 e){\n    // Instruccions per si ocorre un error d'eixe tipus\n}\nfinally{\n    // Instruccions que SEMPRE s'executaran\n    // encara que haja hagut algun error no capturat\n}\n// Instruccions que no deuen donar error (3)\n</code></pre> <ol> <li>Si dona error en alguna instrucci\u00f3, no s'executaran les seg\u00fcents d'este bloc</li> <li>Tants catch com tipus d'error volem capturar. S'executar\u00e0 el bloc corresponent a l'error produ\u00eft</li> <li>Si ha hagut un error no capturat, despr\u00e9s d'executar el finally el programa avortar\u00e0 i, per tant, estes instruccions no s'executaran</li> </ol> <p>Exemple de tractament d'excepcions</p> Java<pre><code>import java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class Excepcions {\n    public static void main(String[] args) {\n        Scanner teclat = new Scanner(System.in);\n        int alumnes, ordinadors;\n        float mitja;\n        System.out.println(\"Calculem la mitja d'ordinadors per alumne en classe\");\n        try{\n            System.out.println(\"Quants alumnes?\");\n            alumnes = teclat.nextInt();\n            System.out.println(\"Quants ordinadors?\");\n            ordinadors = teclat.nextInt();\n            mitja = alumnes/ordinadors;\n            if (ordinadors &gt; alumnes){\n                System.out.println(\"Tots els alumnes tenen garantit un ordinador\");\n            }\n            else {\n                System.out.println(\"1 ordinador cada \" + mitja + \" alumnes\");\n            }\n        }\n        catch (ArithmeticException ae){ // Divisi\u00f3 per 0\n            System.out.println(\"Sense ordinadors no es pot calcular la mitja\");\n        }\n        catch (InputMismatchException ime){ // Error intentant llegir de teclat\n            System.out.println(\"Cal introduir n\u00fameros enters\");\n        }\n        System.out.println(\"Ad\u00e9u!\");\n    }\n}\n</code></pre> <p>M\u00e9s endavant vorem com propagar excepcions o crear les nostres pr\u00f2pies excepcions i llen\u00e7ar-les.</p> Exercici 20 <p>Fixa't en el seg\u00fcent programa i contesta les preguntes:</p> Java<pre><code>import java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class E20 {\n    public static void main(String[] args) {\n        Scanner teclat = new Scanner(System.in);\n        int valor = 0;\n\n        try {\n            System.out.println(\"Entrem al try\");\n            System.out.println(\"Dis-me un n\u00famero enter: \");\n            valor = teclat.nextInt();\n            valor = 10/valor;\n            System.out.println(\"Tot ok i valor val: \" + valor);\n        } catch (InputMismatchException e) {\n            System.out.println(\"Error: no has posat n\u00fameros enters\");\n            System.out.println(\"Ara valor val: \" + valor);\n        } catch (ArithmeticException e) {\n            System.out.println(\"Error de divisi\u00f3 per 0\");\n            valor = 10/valor;\n            System.out.println(\"Ara valor val: \" + valor);\n        } finally {\n            System.out.println(\"Entrem al finally\");\n            valor++;\n            System.out.println(\"Valor al final del finally: \" + valor);\n        }\n\n        System.out.println(\"Hem eixit de zona de control d'excepcions\");\n        valor++;\n        System.out.println(\"Valor final: \" + valor);\n    }\n}\n</code></pre> <ul> <li>Qu\u00e8 mostrar\u00e0 per pantalla si per teclat introdu\u00efm el 2?</li> <li>Qu\u00e8 mostrar\u00e0 per pantalla si per teclat introdu\u00efm el 0?</li> <li>Qu\u00e8 mostrar\u00e0 per pantalla si per teclat introdu\u00efm lletres?</li> </ul>"},{"location":"PRG05/#9-comentaris","title":"9. Comentaris","text":"<p>Els comentaris s'utilitzen per a explicar (al mateix programador, no a l'usuari final) alguna part del programa. Per exemple, servixen per a explicar el significat d'alguna variable o indicar a principi del programa l'autor del programa, data de creaci\u00f3...</p> <p>El compilador no analitza les l\u00ednies comentades. Simplement, passa d'elles.</p> <p>En Java podem incloure comentaris als nostres programaes de 3 formes diferents:</p>"},{"location":"PRG05/#91-comentaris-duna-linia","title":"9.1. Comentaris d'una l\u00ednia","text":"<p>A partir de la combinaci\u00f3 de car\u00e0cters <code>//</code></p> Java<pre><code>float quantitat; // guardar\u00e0 els diners, en euros\nchar torn: // guardar\u00e0 una 'N' si \u00e9s nocturn o una 'D' si \u00e9s di\u00fcrn\n</code></pre>"},{"location":"PRG05/#92-comentari-de-diverses-linies","title":"9.2. Comentari de diverses l\u00ednies","text":"<p>Per a comentar grans blocs. Es considera comentari tot all\u00f2 que queda entre <code>/*</code> i <code>*/</code></p> Java<pre><code>/*\nAutor: Paco Galera i Abd\u00f3 Garcia\nData: 01-11-2024\nUtilitat: Este programa nom\u00e9s \u00e9s per a explicar els comentaris\n*/\npublic static void main (String args[]){\n    ...\n}\n</code></pre>"},{"location":"PRG05/#93-javadoc","title":"9.3. Javadoc","text":"<p>Comentaris per a documentaci\u00f3 de Java. Sol servir per a documentar funcions (ja les vorem). Tot all\u00f2 que estiga entre <code>/**</code> i <code>*/</code></p> Exemple de Javadoc <p></p> <p>Una volta documentat amb el Javadoc, si el programador escriu el nom de la funci\u00f3, apareixer\u00e0 l'ajuda de la informaci\u00f3 que li hem posat, amb una est\u00e8tica est\u00e0ndard.</p>"},{"location":"PRG05/#10-exercicis","title":"10. Exercicis","text":"Exercici 21 <p>Qu\u00e8 valdran les seg\u00fcents expressions?</p> <ul> <li><code>(x&gt;=0)||(x&lt;0)</code></li> <li><code>(x==y)||(x!=y)</code></li> <li><code>(x==y)^(x!=y)</code></li> <li><code>(4&gt;3)^(3&lt;4)</code></li> </ul> Exercici 22 <p>Programa que demane per teclat una quantitat (entera) d'euros i el desglosse en bitllets (els m\u00ednims possibles) i monedes d'1 euro. Per exemple, si tenim 1397 euros:</p> <ul> <li>2 Bitllets de 500</li> <li>1 Bitllets de 200</li> <li>1 Bitllets de 100</li> <li>1 Bitllets de 50</li> <li>2 Bitllets de 20</li> <li>0 Bitllets de 10</li> <li>1 Bitllets de 5</li> <li>2 Monedes d'1 euro</li> </ul> Exercici 23 <p>Programa que demane 10 n\u00fameros per teclat. En acabant, caldr\u00e0 mostrar un missatge dient si s'ha introdu\u00eft algun n\u00famero negatiu o si no. A m\u00e9s, es mostrar\u00e0 la quantitat de n\u00fameros parells i la quantitat d'imparells.</p> Exercici 24 <p>Demana 2 n\u00fameros i calcula la pot\u00e8ncia (el primer elevat al segon) amb un bucle. En acabant mostra-la. Compte amb els exponents negatius!</p> Exercici 25 <p>Programa d'endevinar un n\u00famero. L'usuari pensa un n\u00famero de l'1 al 100. L'ordinador ha d'endevinar-lo. L'usuari anir\u00e0 indicant si el n\u00famero a encertar \u00e9s major o menor que el que ha dit, fins que siga encertat.</p> Exercici 26 <p>Altre programa d'endevinar un n\u00famero. L'ordinador tria un n\u00famero de l'1 al 100 (busca a Internet una funci\u00f3 que calcule un n\u00famero aleatori en Java). L'usuari ha d'intentar endevinar-lo amb els missatges que vaja dient l'ordinador de si el n\u00famero \u00e9s major o menor del que ha dit l'usuari.</p>"},{"location":"PRG05/#11-annex-i-funcionsiojava","title":"11. Annex I: <code>funcionsIO.java</code>","text":"<p>Per tal de facilitar l'entrada i la sortida, hem creat un fitxer de funcions \u00fatils que podeu emprar als vostres programes. Algunes de les solucions de les activitats anteriors faran refer\u00e8ncia a les funcions contingudes en aquest fitxer. Per emprar-lo, sols heu de emmagatzermar-lo a la mateixa carpeta on teniu els codis font dels vostres programes.</p> <p> funcionsIO.java</p>"},{"location":"PRG05/#12-annex-ii-gestio-i-format-de-dates","title":"12. Annex II: Gesti\u00f3 i format de dates","text":"<p>A continuaci\u00f3, explicarem com es poden manipular i convertir objectes entre <code>String</code> i <code>java.util.Date</code> fent \u00fas de la classe <code>SimpleDateFormat</code> de Java. Aquesta classe permet treballar amb dates i formats en un context llegible i f\u00e0cil d'entendre:</p> <p>La classe <code>SimpleDateFormat</code> \u00e9s una subclasse de <code>DateFormat</code> que permet donar format i analitzar dates segons un patr\u00f3 (pattern). Aix\u00f2 resulta \u00fatil per convertir String a Date o viceversa.</p>"},{"location":"PRG05/#121-conversio-de-string-a-date","title":"12.1. Conversi\u00f3 de String a Date","text":"<p>Quan es t\u00e9 una data com a cadena (<code>String</code>) i es vol convertir a un objecte <code>Date</code>, es fa mitjan\u00e7ant el m\u00e8tode <code>parse()</code>.</p> <p>Exemple d'\u00fas</p> Java<pre><code>import java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class StringToDateExample {\n    public static void main(String[] args) {\n        try {\n            // Patr\u00f3 de format de la data\n            String pattern = \"dd/MM/yyyy\"; //(1)!\n            SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n\n            // String que representa la data\n            String dateString = \"20/11/2024\";\n\n            // Conversi\u00f3 de String a Date\n            Date date = sdf.parse(dateString);\n\n            System.out.println(\"Data en format Date: \" + date);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre> <ol> <li>String que act\u00faa com a patr\u00f3 o m\u00e0scara, per definir el format de data rebut/desitjat.</li> </ol> <p>Passos clau:</p> <ul> <li>Definir el patr\u00f3 de format (<code>dd/MM/yyyy</code>, <code>yyyy-MM-dd</code>, etc.).</li> <li>Crear una inst\u00e0ncia de <code>SimpleDateFormat</code> amb el patr\u00f3.</li> <li>Utilitzar el m\u00e8tode <code>parse()</code> per convertir la cadena a un objecte <code>Date</code>.</li> </ul>"},{"location":"PRG05/#122-conversio-de-date-a-string","title":"12.2. Conversi\u00f3 de Date a String","text":"<p>Quan es vol convertir un objecte <code>Date</code> a <code>String</code>, s\u2019utilitza el m\u00e8tode <code>format()</code>.</p> <p>Exemple d'\u00fas</p> Java<pre><code>import java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class DateToStringExample {\n    public static void main(String[] args) {\n        // Patr\u00f3 de format de la data\n        String pattern = \"dd/MM/yyyy\";\n        SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n\n        // Objecte Date actual\n        Date date = new Date();\n\n        // Conversi\u00f3 de Date a String\n        String formattedDate = sdf.format(date);\n\n        System.out.println(\"Data en format String: \" + formattedDate);\n    }\n}\n</code></pre> <p>Passos clau:</p> <ul> <li>Definir el patr\u00f3 de format que es vol per la cadena.</li> <li>Crear una inst\u00e0ncia de <code>SimpleDateFormat</code> amb aquest patr\u00f3.</li> <li>Utilitzar el m\u00e8tode <code>format()</code> per obtenir una representaci\u00f3 de la data com a cadena.</li> </ul>"},{"location":"PRG05/#123-patrons-comuns","title":"12.3. Patrons comuns","text":"<p>Els patrons de <code>SimpleDateFormat</code> permeten definir com es vol mostrar la data i hora. Alguns exemples de patrons s\u00f3n:</p> Patr\u00f3 Exemple Descripci\u00f3 <code>dd/MM/yyyy</code> <code>20/11/2024</code> Dia/Mes/Any (format europeu) <code>yyyy-MM-dd</code> <code>2024-11-20</code> Any-Mes-Dia (format ISO 8601) <code>dd-MMM-yyyy</code> <code>20-Nov-2024</code> Dia-Mes-Abreviat-Any <code>EEEE, dd MMMM yyyy</code> <code>Dijous, 20 Novembre 2024</code> Nom complet del dia i del mes <code>HH:mm:ss</code> <code>14:35:50</code> Hora-Minuts-Segons (format 24 hores) <code>hh:mm:ss a</code> <code>02:35:50 PM</code> Hora-Minuts-Segons (12 hores amb AM/PM) <code>yyyy.MM.dd G 'at' HH:mm:ss z</code> <code>2024.11.20 AD at 14:35:50 CET</code> Any.Mes.Dia Era a Hora:Minuts:Segons Zona <code>E, MMM dd yyyy</code> <code>Thu, Nov 20 2024</code> Dia setmana abreviat, Mes abreviat, Any"},{"location":"PRG05/#124-gestionar-excepcions","title":"12.4. Gestionar excepcions","text":"<p>\u00c9s important tenir en compte que el m\u00e8tode <code>parse()</code> pot llan\u00e7ar una excepci\u00f3 (<code>ParseException</code>) si el format de la cadena no coincideix amb el patr\u00f3 definit.</p> Java<pre><code>try {\n    SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\n    Date date = sdf.parse(\"2024-11-20\"); // Error: format no coincideix\n} catch (ParseException e) {\n    System.out.println(\"Error: El format de la cadena no \u00e9s correcte.\");\n}\n</code></pre> Exercici 27 RESOLT <p>Crea un programa Java que realitze les seg\u00fcents accions:</p> <ul> <li>Entrada de l\u2019usuari: L'usuari introdueix una data en format <code>dd/MM/yyyy</code>.</li> <li>Conversi\u00f3 de String a Date:<ul> <li>El programa converteix la data introdu\u00efda a un objecte Date.</li> </ul> </li> <li>Conversi\u00f3 de Date a String:<ul> <li>El programa converteix l'objecte Date a una cadena en format <code>EEEE, dd MMMM yyyy</code> (per exemple, \"Thursday, 20 November 2024\").</li> </ul> </li> <li>Mostra la data en el nou format.</li> </ul> Java<pre><code>import java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class E27 {\n    public static void main(String[] args) {\n\n        try {\n            // 1. Demanar a l'usuari que introdueixca una data en format dd/MM/yyyy\n            String entrada = funcionsIO.readTextC(\"Introdueix una data en format dd/MM/yyyy: \");\n\n            // 2. Crear un SimpleDateFormat per convertir String a Date\n            SimpleDateFormat inputFormat = new SimpleDateFormat(\"dd/MM/yyyy\");\n            Date date = inputFormat.parse(entrada);\n\n            // 3. Crear un SimpleDateFormat per convertir Date a String en un altre format\n            SimpleDateFormat outputFormat = new SimpleDateFormat(\"EEEE, dd MMMM yyyy\");\n            String dataFormatada = outputFormat.format(date);\n\n            // 4. Mostrar la data amb el nou format\n            System.out.println(\"Data en el nou format: \" + dataFormatada);\n\n        } catch (Exception e) {\n            // Capturar errors (ex. format incorrecte)\n            System.out.println(\"Hi ha hagut un error amb la conversi\u00f3. Assegura't d'introduir la data correctament.\");\n        }\n    }\n}\n</code></pre>"},{"location":"PRG06/","title":"UD6. Arrays en Java","text":""},{"location":"PRG06/#1-introduccio","title":"1. Introducci\u00f3","text":"<p>Tots els tipus de dades que hem vist fins ara s\u00f3n tipus b\u00e0sics (tamb\u00e9 anomenats simples, at\u00f2mics o elementals). Es caracteritzen perqu\u00e8 les variables d'eixos tipus nom\u00e9s poden guardar un \u00fanic valor en cada moment.</p> <p>Ara vorem com guardar molts valors en una sola variable. Eixa variable ser\u00e0 d'un tipus de dades compost.</p> <p></p> <p>Per a qu\u00e8 serveixen estos tipus de dades?</p> <p>Imaginem que volem un programa que demana les notes de 100 alumnes i despr\u00e9s en modifique una en concret.</p> <p>Amb variables simples, el programa seria molt farrag\u00f3s:</p> Java<pre><code>double nota1, nota2, ..., nota100;\nint alu;\ndouble novaNota;\n\nnota1 = funcionsIO.readDoubleC(\"Nota de l'alumne 1\");\nnota2 = funcionsIO.readDoubleC(\"Nota de l'alumne 2\");\n...\nnota100 = funcionsIO.readDoubleC(\"Nota de l'alumne 100\");\n\nalu = funcionsIO.readIntC(\"Dis-me un alumne per a canviar nota\");\nnovaNota = funcionsIO.readDoubleC(\"Quina nota vols posar-li?\");\n\nswitch(alu){\n    case1: nota1 = novaNota; break;\n    case2: nota2 = novaNota; break;\n    ...\n    case3: nota3 = novaNota; break;\n}\n</code></pre> <p>En canvi, usant variables compostes el programa seria m\u00e9s f\u00e0cil i curt:</p> Java<pre><code>double notes[] = new double[100]; //(1)!\nint alu;\ndouble novaNota;\n\nfor (alu = 0; alu &lt; notes.lenght; alu++){\n    notes[alu] = funcionsIO.readDoubleC(\"Nota de l'alumne \" + alu);\n}\n\nalu = funcionsIO.readIntC(\"Dis-me un alumne per a canviar la nota\");\nnovaNota = funcionsIO.readDoubleC(\"Quina nota vols posar-li?\");\n\nnotes[alu] = novaNota;\n</code></pre> <ol> <li>Si foren m\u00e9s alumnes, simplement caldria canviar este n\u00famero.</li> </ol> <p>Usant variables simples encara es complicaria m\u00e9s si f\u00e9rem altres operacions amb les moltes notes, com calcular la m\u00e0xima, la m\u00ednim, la mitja, ordenar-les...</p> <p>Amb este exemple hem introdu\u00eft les variables compostes, per\u00f2 vorem en detall com crear-les, com introduir valors en elles, com accedir a eixos valors, etc.</p> <p>Hi ha molts tipus de dades compostes. Alguns s\u00f3n:</p> <ul> <li>Arrays<ul> <li>D'1 dimensi\u00f3: vectors</li> <li>De 2 dimensions: matrius</li> <li>De 3 dimensions: arrays tridimensionals</li> </ul> </li> <li>Cadenes: per a textos</li> <li>Llistes: grand\u00e0ria ampliable i amb moltes utilitats</li> <li>Objectes: per a guardar dades de distints tipus</li> </ul>"},{"location":"PRG06/#2-vectors-en-java","title":"2. Vectors en Java","text":"<p>Definici\u00f3 de vector</p> <p>Conjunt finit d'elements del mateix tipus, als quals podem accedir mitjan\u00e7ant el nom del vector i un \u00edndex (posici\u00f3 dins del vector).</p> <p>Com hem dit abans, un vector \u00e9s un array d'1 dimensi\u00f3. Per exemple, el lloc on podem guardar les notes de 100 alumnes.</p> <p>La forma general de declarar un vector \u00e9s:</p> <p><code>tipusDeDades[] nomVector = new tipusDeDades[dimensi\u00f3];</code></p> <ul> <li><code>tipusDeDades</code>: un dels tipus simples coneguts (int, char, boolean, float, double...) o b\u00e9 una classe(ja ho veurem) com String, etc.</li> <li><code>dimensi\u00f3</code>: Quantitat d'elements que tindr\u00e0 el vector.</li> </ul> <p>Estem fent dues coses: declarant el vector i assignant-li mem\u00f2ria. Ja vorem que a vegades conv\u00e9 separar estes dos coses. En eixos casos ho farem aix\u00ed:</p> Java<pre><code>...\ntipusDeDades[] nomVector; //(1)!\n...\nnomVector = new tipusDeDades[dimensi\u00f3]; //(2)!\n...\n\n\n...\n\nnomVector = new tipusDeDades[dimensi\u00f3]; //(3)!\n</code></pre> <ol> <li>Declarem el vector.</li> <li>Li assignem mem\u00f2ria.</li> <li>Si tornem a assignar una nova mem\u00f2ria per al vector, perdrem les dades que tenia abans.</li> </ol> <p>Exemple</p> <p>Veiem amb este exemple les 2 formes de declarar un vector:</p> Java<pre><code>int[] edats = new int[7]; // Declarem el vector i reservar-li mem\u00f2ria\nint anys[] = new int[5]; //(1)! \n</code></pre> <ol> <li>Altre vector. Es poden posar els [corxets] davant o darrere del nom del vector quan el declarem</li> </ol> Java<pre><code>int[] edats;         // Declarem el vector\n....\nedats = new int[7]; // Reservem mem\u00f2ria al vector\n</code></pre> <p>En Java, per defecte, els vectors d'enters s'inicialitzen a 0:</p> <p></p> <p>Declarar un vector amb valors inicials</p> <p>Igual que es fa en les variables simples, podem donar valors inicials en el moment de declarar-lo. EN este cas no s'indica la dimensi\u00f3 del vector, sin\u00f3 que el vector tindr\u00e0 tants elements com valors indicats:</p> Java<pre><code>int dies[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\nint edats[] = new int[]{19, 17, 23, 20, 19, 18, 20} //(1)!\n</code></pre> <ol> <li>Podem fer-ho d'eixes dos formes: amb el new int[], i sense.</li> </ol> <p>Per\u00f2 si volem donar un conjunt de dades despr\u00e9s de la declaraci\u00f3, nom\u00e9s aix\u00ed:</p> Java<pre><code>int edats[];\n// edats = {19, 17, 23, 20, 19, 18, 20}; &lt;-- ERROR DE COMPILACI\u00d3!\nedats = new int[]{19, 17, 23, 20, 19, 18, 20};\n</code></pre>"},{"location":"PRG06/#21-tractament-de-cada-element-del-vector","title":"2.1. Tractament de cada element del vector","text":"<p>Cada element del vector es pot tractar com una variable simple. Per a accedir a cada element del vector, ho farem amb el nom del vector i l'\u00edndex corresponent tancat entre claud\u00e0tors:</p> <p></p> <p>Com ja hem dit, cada element del vector es pot tractar com una variable simple. Per tant, vegem amb exemples qu\u00e8 podem fer amb cada element del vector:</p> <ul> <li>Assignar un valor a un element del vector:</li> </ul> Java<pre><code>edats[3] = 7;                                       // Assignem un valor directament\nedats[4] = funcionsIO.readIntC(\"Quina edat t\u00e9 la 5a persona?\"); // Assignem un valor des de teclat\n</code></pre> <ul> <li>Consultar el valor d'un element del vector:</li> </ul> Java<pre><code>System.out.println(edats[3]);   // Mostrem el valor per pantalla\nedatPep = edats[4];             // Copiem el valor a altra variable\nif(edats[4] &lt; 18) ...            // Utilitzem el valor en una expressi\u00f3\n</code></pre>"},{"location":"PRG06/#211-lindex-de-lelement-dun-vector","title":"2.1.1. L'\u00cdndex de l'element d'un vector","text":"<p>L'\u00edndex \u00e9s la posici\u00f3 de cada element del vector. Recordem que, per exemple, amb l'index 3 podrem accedir a la 4a posici\u00f3 del vector (ja que la primera posici\u00f3 \u00e9s la 0).</p> <p>Qu\u00e8 pot ser un \u00cdndex?</p> <p>L'\u00edndex del vector \u00e9s un enter. Podr\u00e0 ser una constant, variable o expressi\u00f3, per\u00f2 entera:</p> Java<pre><code>...\nnumPersona = funcionsIO.readIntC(\"De quina persona vols saber l'edat (de l'1 al 7)?\");\nSystem.out.println(\"La persona\" + numPersona + \" t\u00e9 \" + edats[numPersona-1] + \" anys.\"); //(1)!\n...\n</code></pre> <ol> <li>Ac\u00ed l'\u00edndex \u00e9s l'expressio numPersona-1. El -1 \u00e9s perqu\u00e8 si un array t\u00e9 7 elements, estos queden indexats del 0 al 6. Per aix\u00f2, si vull accedir al 3r element, haur\u00e9 de fer-ho posant un 2 a l'\u00edndex.</li> </ol> <p>En este cas, si per teclat es contesta, per exemple, un 9, el programa avostaria degut a l'error ArrayIndexOutOfBoundsException. Vegem per qu\u00e8:</p> <p>L\u00edmits de l'\u00edndex</p> <p>El m\u00ednim \u00edndex que podem posar en un vector \u00e9s el 0. El m\u00e0xim \u00edndex \u00e9s un menys que la dimensi\u00f3 del vector. Si accedim a una posici\u00f3 d'un vector fora dels seus l\u00edmits donar\u00e0 error quan s'execute el programa ja que estarem accedint a una zona de mem\u00f2ria no reservada per al vector. \u00c9s m\u00e9s: eixa zona de mem\u00f2ria podria estar reservada per a altra variable.</p> Java<pre><code>int edats[] = new int[7]; //(1)!\n...\nedats[0] = 10;\nedats[6] = 18;\n\nedats[7] = 10;  // ERROR (2)\nedats[8] = 9;   // ERROR\nedats[-1] = 10; // ERROR (3)\n</code></pre> <ol> <li>Podrem accedir a les posicions 0 a 6 del vector</li> <li>Qualsevol d'eixes intruccions donaria l'error d'execuci\u00f3 ArrayIndexOutOfBoundsException</li> <li>En Python amb el -1 accedirem a l'\u00faltima posici\u00f3, per\u00f2 en Java dona ERROR!</li> </ol>"},{"location":"PRG06/#22-recorregut-dun-vector","title":"2.2. Recorregut d'un vector","text":"<p>Imaginem que un vector t\u00e9 1000 posicions i volem mostrar-les totes. Com ho fem?</p> Java<pre><code>String noms[] = new String[1000];\n...\n</code></pre> <p>Ja vorem per qu\u00e8 NO podem fer-ho amb un \u00fanic println del nom del vector. Per tant, haurem de rec\u00f3rrer tots els seus components, amb un bucle. Tenim 2 opcions:</p> <p>a. Rec\u00f3rrer el vector amb un for tradicional:</p> <p></p> Java<pre><code>for(int i = 0; i &lt; noms.length; i++){\n    System.out.println(noms[i]);\n}\n</code></pre> <ul> <li>L'\u00edndex del vector \u00e9s una variable entera (en este cas i) que anir\u00e0 agafant tots els possibles valors de les posicions del vector (0, 1, 2 ... 999).</li> <li>En compte de posar 1000, usarem sempre la propietat length del vector (nomVector.length). Aix\u00ed, si despr\u00e9s el programador canvia eixe 1000 per altre n\u00famero, no ho ha de canviar en altres parts del programa.</li> </ul> <p>b. Rec\u00f3rrer el vector amb un for tipus foreach:</p> <p></p> Java<pre><code>for (String nom: noms){\n    System.out.println(nom);\n}\n</code></pre> <ul> <li>Este tipus de bucle serveix per a rec\u00f3rrer llistes (arrays, etc) quan no ens fa\u00e7a falta accedir a les posicions de cada element.</li> <li>Far\u00e0 tantes passades com elements tinga el vector.</li> <li>En cada passada, en la variable nom (del mateix tipus que el contingut del vector) s'anir\u00e0 copiant el contingut de cada posici\u00f3.</li> <li>Amb esta forma no podem modificar els elements del vector. Nom\u00e9s consultar-los.</li> </ul>"},{"location":"PRG06/#221-els-noms-de-vector-i-els-noms-dels-index","title":"2.2.1. Els noms de vector i els noms dels \u00edndex","text":"<p>Suposem que tenim un vector per guardar les notes dels alumnes:</p> <ul> <li>El nom del vector sol ser plural, ja que guarda molts valors. En este exemple el nom del vector \u00e9s notes i no nota. A m\u00e9s ha de tindre un nom significatiu: notes. No \u00e9s convenient dir-li vector1, ni dades, etc.</li> </ul> Java<pre><code>double notes[] = new double[50];\n</code></pre> <ul> <li>El nom de l'\u00edndex del for sol ser la variable i per\u00f2 a vegades conv\u00e9 posar un nom m\u00e9s significatiu. Podria ser nota? No, ja que eixa variable no guardar\u00e0 la nota d'un alumne, sin\u00f3 una posici\u00f3 d'un alumne, un identificador de l'alumne. Podr\u00edem dir-li, per exemple, alumne, ja que tindrem l'alumne 0, l'alumne 1 ... i l'alumne 49.</li> </ul> Java<pre><code>for (int alumne = 0; alumne &lt; notes.length; alumne++){\n    System.out.println(notes[alumne]);\n}\n</code></pre> <ul> <li>El nom de la variable del foreach conv\u00e9 que es diga igual que el vector per\u00f2 en singular, ja que el contingut de la variable ser\u00e0 el contingut de cada element del vector.</li> </ul> Java<pre><code>for (double nota: notes){\n    System.out.println(nota);\n}\n</code></pre>"},{"location":"PRG06/#23-inicialitzacio-dun-vector","title":"2.3. Inicialitzaci\u00f3 d'un vector","text":"<p>Recordem que un vector el declarem aix\u00ed:</p> Java<pre><code>int edats[] = new int[7];\n</code></pre> <p>Aixpo posa un 0 en cada component. Si el vector fora de booleans, cada element tindria un false, etc. I si volem que inicialment tinguen un altre valor? Podem fer-ho de distintes formes:</p> <p>a. Indicant els distints valors (ja ho hem vist)</p> <p>En el moment de la creaci\u00f3:</p> Java<pre><code>int edats[] = {18, 17, 20, 22, 20}; // Per tant, el vextor ser\u00e0 de dimensi\u00f3 5\n</code></pre> <p>En altre moment:</p> Java<pre><code>int edats[];\nedats = new int[]{18, 17, 20, 22, 20}; // Aix\u00ed tamb\u00e9 es pot fer en la declaraci\u00f3\n</code></pre> <p>b. Recorrent el vector amb un bucle que fa\u00e7a assignacions</p> <p>Igual que abans hem usat un for per a mostrar tots els elements del vector, tamb\u00e9 podem usar un for per a assignar un valor a cada element:</p> Java<pre><code>int edats[] = new int[7];\n\nfor (int i = 0; i &lt; edats.length; i++){ //(1)!\n    edats[i] = 18; // O b\u00e9: edats[i] = funcionsIO.readIntC(\"Dis-me edat de l'alumne \" + (i+1));\n}\n</code></pre> <ol> <li>Recorda usar el .length (no el 7)</li> </ol> <p>Compte amb el foreach</p> <p>No ho podem fer amb un foreach perqu\u00e8 ENS FALTARIA L'\u00cdNDEX!.</p>"},{"location":"PRG06/#24-representacio-grafica-dun-vector","title":"2.4. Representaci\u00f3 gr\u00e0fica d'un vector","text":"<p>Davant d'un problema sobre vectors, hem de plantejar-nos el dibuixet del vector amb les variables que li afecten.</p> <p>Per exemple, volem guardar les notes de 25 alumnes. Suposant estes definicions:</p> Java<pre><code>final int QALU = 25;    // Quantitat d'alumnes (maj\u00fascules)\n...\ndouble notes[QALU];     // Variable composta per a guardar les notes de 25 alumnes\nint alu;                // \u00cdndex (min\u00fascules). Cada volta guardar\u00e0 el n\u00famero d'un alumne\n</code></pre> <p>... far\u00edem la seg\u00fcent representaci\u00f3 gr\u00e0fica:</p> <p></p> <p>I a partir del dibuix \u00e9s m\u00e9s f\u00e0cil fer el codi per a guardar totes les  notes del vector:</p> Java<pre><code>for (int alu = 0; alu &lt; notes.legth; alu++){\n    notes[alu] = funcionsIO.readDoubleC(\"Dis-me la nota de l'alumne \" + alu);\n}\n</code></pre> Exercici 1. Vectors en Java <p>CONSELL: Abans de fer exercicis sobre vectors, fes el dibuixet del vector (o vectors) posant l'\u00edndex, nom de vector, grandr\u00e0ria... (com a l'apartat anterior).</p> <p>Fes un programa que fa\u00e7a el seg\u00fcent:</p> <p>a. Crear un array de nom edats, de qAlu elements de tipus enter, per a guardar les edats de qAlu alumnes. S'ha de demanar la variable qAlu a l'usuari.</p> <p>b. Omplir el vector demanant les dades per teclat.</p> <p>c. Demanar un n\u00famero d'alumne i mostrar la seua edat. El n\u00famero d'alumne ser\u00e0 la posici\u00f3 dels elements (0 a 9). No ha de donar error si s'introdueix un n\u00famero incorrecte.</p> <p>d. Mostrar quants alumnes s\u00f3n menors d'edat.</p> <p>e. Mostrar l'edat m\u00ednima dels alumnes i a quin n\u00famero d'alumne correspon. Si s\u00f3n molts alumnes que tenen la m\u00ednim edat, mostra el primer que aparega.</p> <p>f. Posar en altre vector de nom majors aquells n\u00fameros d'alumnes que s\u00f3n majors d'edat.</p> <p>g. Rec\u00f3rrer el vector majors per a mostrar els n\u00fameros d'eixos alumnes i les edats corresponents.</p>"},{"location":"PRG06/#25-vectors-parallels","title":"2.5. Vectors paral\u00b7lels","text":"<p>Suposem que volem guardar les notes (double) de 10 alumnes i els respectius n\u00fameros d'expediants (int). Per a aix\u00f2 necessitariem un vector de 10 n\u00fameros amb decimals per a guardar les notes i una altre vector de 10 n\u00fameros enters per a guardar els n\u00fameros d'expedients.</p> <p></p> <p><code>notes [8.0][9.3]</code>[5.6]<code>[7.3][7.0][5.4][6.7][4.2][3.8][9.4]</code> <code>expedients [133][137]</code>[139]<code>[138][136][130][140][142][131][134]</code></p> <p>L'alumna que figura a la posici\u00f3 n\u00famero 2 (0, 1 i 2) ha tret de nota un 5.6 i t\u00e9 el n\u00famero d'expedient 139</p> <p>Eixos 2 vectors diem que s\u00f3n paral\u00b7lels ja que tenen la mateixa quantitat d'elements, i en la mateixa posici\u00f3 de cada vector guarda informaci\u00f3 del mateix objecte (en este cas, del mateix alumne).</p> <p>AVANTATGE: un \u00fanic bucle per a rec\u00f3rrer diversos vectors paral\u00b7lels.</p> Java<pre><code>final int Q_ALUMNES = 10;\n...\nfor (int alu = 0; alu &lt; Q_ALUMNES; alu ++){\n    System.out.println(\"Alume n\u00fam. \" + alu + \" Exp: \" + expedients[alu] + \" Nota: \" + notes[alu]);\n}\n</code></pre> Exercici 2. Vectors paral\u00b7lels <p>Fes un programa en Java que demane el n\u00famero d'expedient, nota i edat de 15 alumnes (amb un \u00fanic bucle). Posteriorment, que mostre en 3 columnes les 3 dades de cada alumne. Despr\u00e9s, es demanar\u00e0 per teclat un n\u00famero d'expedient i es mostrar\u00e0 per pantalla la seua edat i nota.</p>"},{"location":"PRG06/#26-tractament-de-tot-el-vector-en-conjunt","title":"2.6. Tractament de tot el vector en conjunt","text":"<p>Abans de vore les operacions que podem fer en un vector en conjunt (no component a component), hem de tindre en compte que si usem el vector sense indicar la posici\u00f3, estem accedint a una adre\u00e7a de mem\u00f2ria RAM (on comencen les dades que guarda el vector).</p> <p>Exemple</p> <p>Suposem que tenim estos dos vectors:</p> Java<pre><code>int notesPep[] = {5, 7, 6};\nint notesPepa[] = {7, 8, 8};\n</code></pre> <p>i pososem que, quan s'ha executat el programa, se'ls han assignat estes zones de mem\u00f2ria RAM (que comencen en la 1004 i en la 1024):</p> <p></p> <p>A la vista d'este esquema, quan usem el nom d'un vector sense indicar l'\u00edndex (ni els claud\u00e0tros, clar), estarem accedint a eixe n\u00famero 1004 o 1024, no al contingut del vector.</p> <p>Per tant, hem d'anar en compte amb les operacions que fem amb els vectors sencers en conjunt, ja que, possiblement, no estarem fent all\u00f2 que pretenem. Ara ho vorem.</p>"},{"location":"PRG06/#261-copiar-vectors","title":"2.6.1. Copiar vectors","text":"<p>Qu\u00e8 pasa si copiem un vector a un altre?</p> Java<pre><code>int notesPep[] = {5, 7, 6};\nint notesPepa[] = {7, 8, 8};\n...\nnotesPepa = notesPep; //(1)!\n...\n</code></pre> <ol> <li>No donar\u00e0 error per\u00f2 est\u00e0 fent que notesPepa apunte a la mateixa adre\u00e7a que notesPep</li> </ol> <p>Efectivament, si mostrem ara les notes de Pepa, vorem que s\u00ed que mostra 5, 7, 6 (en compte de 7, 8, 8 que tenia abans), per\u00f2... compte! Si modifiquem una nota de Pep, tamb\u00e9 estarem modificant la de Pepa, i al rev\u00e9s.</p> <p>SOLUCI\u00d3: Si realment vol\u00edem que notesPepa tinguera els mateixos valors que notesPep (conservant l'adre\u00e7a de mem\u00f2ria que tenia) caldria copiar component a component, mitjan\u00e7ant un bucle. Vorem despr\u00e9s com fer-ho.</p>"},{"location":"PRG06/#262-comparar-vectors","title":"2.6.2. Comparar vectors","text":"<p>Qu\u00e8 passa si comparem vectors?</p> <p>No es compararan els seus valors sin\u00f3 l'adre\u00e7a de mem\u00f2ria que ocupen. Per tant:</p> Java<pre><code>int notesPep[] = {5, 7, 6};\nint notespepa[] = {5, 7, 6}; //(1)!\n\nif (notesPep == notesPepa){ //(2)!\n    ...\n}\n\nnotesPepa = notesPep; //(3)!\nnotesPepa[1] = 10; //(4)!\n\nif (notesPep == notesPepa){ //(5)!\n    ...\n}\n</code></pre> <ol> <li>Els 2 vectors tenen els mateixos valors per\u00f2 en distinta zona de mem\u00f2ria.</li> <li>Donar\u00e0 false ja que, encara que tinguen els mateixos valors, l'adre\u00e7a de mem\u00f2ria \u00e9s distinta.</li> <li>Els 2 vectors apunten a la mateixa zona de mem\u00f2ria.</li> <li>Estem canviant una nota de Pepa... i de Pep!</li> <li>Donar\u00e0 true ja que l'adre\u00e7a de mem\u00f2ria \u00e9s la mateixa.</li> </ol>"},{"location":"PRG06/#263-altres-operacions","title":"2.6.3. Altres operacions","text":"<p>No podem mostrar \"de colp\" un vector ni assignar-li un valor a tots els components:</p> Java<pre><code>int notesPep[] = {5, 7, 6};\nSystem.out.println(notesPep); //(1)!\nnotesPep = 7; //(2)!\n</code></pre> <ol> <li>No donar\u00e0 error de compilaci\u00f3 ni d'execuci\u00f3 per\u00f2 mostrar\u00e0 l'adre\u00e7a de mem\u00f2ria RAM on comen\u00e7a el vector (un n\u00famero en hexadecimal).</li> <li>Error de compilaci\u00f3.</li> </ol> <p>SOLUCI\u00d3: tant per mostrar els elements d'un vector, com per assignar un mateix valor a cada element, cal fer-ho mitjan\u00e7ant un bucle.</p> Exercici 3. Operacions amb vectors en conjunt <p>a. Crea 3 vectors d'enters (v1, v2 i v3) sense reservar mem\u00f2ria (sense indicar la grand\u00e0ria ni posar valors inicials).</p> <p>b. Pregunta per teclat quantes dades es volen guardar en els vectors (nom\u00e9s 1 quantitat, igual per als tres).</p> <p>c. Reserva mem\u00f2ria al vector1 amb eixa quantitat d'elements introdu\u00efda.</p> <p>d. Ompli v1 amb dades introdu\u00efdes per teclat.</p> <p>e. Copia el vector v1 al vector v2, en una sola operaci\u00f3.</p> <p>f. Copia el vector v1 al vector v3, copiant component a component. Primer caldr\u00e0  reservar mem\u00f2ria per a v3.</p> <p>g. Mostra per pantalla si v1 \u00e9s igual a v2, en una sola operaci\u00f3. Fes el mateix per a v1 i v3.</p> <p>h. Mostra per pantalla si v1 \u00e9s igual a v3, component a component (per\u00f2 nom\u00e9s haur\u00e0 de dir: \"vectors iguals\" o \"vectors diferents\").</p> <p>i. Mostra el que hi ha en cada posici\u00f3 de cada vector (format lliure).</p> <p>j. Fes que els 3 vectors ara tinguen 5 dades cadascun. I que totes les dades tinguen el valor -1. Torna a mostrar el contingut dels vectors.</p> <p>k. Pensa quin resultat de mostrar per pantalla i comprova el resultat despr\u00e9s d'executar el programa.</p>"},{"location":"PRG06/#3-matrius-en-java","title":"3. Matrius en Java","text":"<p>S\u00f3n com els vectors que hem vist, per\u00f2 en 2 dimensions (arrays bidimensionals). Tamb\u00e9 poden haver *arrays de 3 dimensions, de 4...</p> <p></p> <p>S'utilitzen per a guardar moltes dades, del mateix tipus, quan cadascuna d'eixes dades es pot identificar per dos (o m\u00e9s) \u00edndexos. Per exemple:</p> <ul> <li>Les notes dels alumnes en distintes avaluacions:</li> </ul> <p></p> <ul> <li>Els taulers de jocs:</li> </ul> <p></p> <ul> <li>Una imatge .bmp o .jpg es guarda internament com una matriu de 3 dimensions. Cada element representa un p\u00edxel de la foto, i est\u00e0 indexat per una posici\u00f3 de la foto (alt, ample) i per un valor depenent del color (roig, verd o blau).</li> </ul> <p></p> <p>Per exemple, suposant que el verd \u00e9s la posici\u00f3 2, si volem que el p\u00edxel 150,300 tinga una tonalitat de 10 verd, podr\u00edem fer: <code>foto[150][300][2] = 10;</code></p>"},{"location":"PRG06/#31-declaracio-de-matrius-en-java","title":"3.1. Declaraci\u00f3 de matrius en Java","text":"<p>Podem definir una matriu com un conjunt finit d'elements del mateix tipus, als quals podem accedir mitjan\u00e7ant el nom de la matriu i dos \u00edndexs.</p> <p>Exemple de declaraci\u00f3 d'una matriu</p> Java<pre><code>final int ALU = 6                       // Quantitat d'alumnes\nfinal int EXER = 5                      // Quantitat d'exercicis\nfloat notes[][] = new float[ALU][EXER]; // Guardar\u00e0 30 notes (6*5) (1)!\nint alu;                                // \u00cdndex per a rec\u00f3rrer els alumnes\nint exer;                               // \u00cdndex per a rec\u00f3rrer els exercicis\n</code></pre> <ol> <li>O b\u00e9 [EXER][ALU], per\u00f2 la disposici\u00f3 que triem s'ha de respectar en tot el programa.</li> </ol> <p></p>"},{"location":"PRG06/#32-una-matriu-es-un-vector-de-vectors","title":"3.2. Una matriu \u00e9s un vector de vectors","text":"<p>Tamb\u00e9 podem definir una matriu com un vector on cadascun dels seus elements \u00e9s un altre vector.</p> <p>Veiem-ho amb l'exemple anterior, on volem guarar les notes que han tret 6 alumnes en cadascun dels 5 exercicis.</p> Java<pre><code>final int ALU = 6;                      // Quantitat d'alumnes\nfinal int EXER = 5;                     // Quantitat d'exercicis \nfloat notes[][] = new float[ALU][EXER]; // Per a guardar 30 notes\n</code></pre> <p>En el seg\u00fcent gr\u00e0fic (part esquerre) veiem que, per a guardar les notes dels 6 alumnes tenim el vector de notes. El que passa \u00e9s que cada alumne no t\u00e9 una nota, sin\u00f3 5. \u00c9s a dir, en cada posici\u00f3 del vector de notes, hi ha un altre \"vectoret\".</p> <p></p> <p>En el gr\u00e0fic (part dreta) veiem que eixa estructura de vector de vectors \u00e9s realment una matriu. Aleshores, tenim que:</p> <ul> <li>notes: \u00e9s tota la matriu (les notes de tots els alumnes en tots els exercicis).</li> <li>notes[2]: \u00e9s un vector de notes (les notes de l'alumne 2).</li> <li>notes[4][3]: \u00e9s un element nota (la nota de l'alumne 4 a l'exercici 3).</li> </ul>"},{"location":"PRG06/#33-inicialitzacio-de-matrius","title":"3.3. Inicialitzaci\u00f3 de matrius","text":"<p>Ja hem vist que, igual que en els vectors, les matrius es declaren aix\u00ed:</p> <p><code>tipusDeDades nomMatriu[][] = new tipusDeDades[qFiles][qColumnes];</code></p> <p>O b\u00e9, igual que en els vectors, podem separar la part de la reserva de mem\u00f2ria:</p> Java<pre><code>tipusDeDades nomMatriu[][]; //(1)!\n...\nnomMatriu = new tipusDeDades[qFiles][qColumnes]; //(2)!\n</code></pre> <ol> <li>Declarem la matriu</li> <li>Li assignem mem\u00f2ria</li> </ol> <p>Igual que en els vectors, en compte de la reserva de mem\u00f2ria, es poden donar uns valors inicials als elements de la mtriu.</p> <p>Per exemple, si volem que tinga estos valors:</p> 10 20 30 40 50 60 <p>Farem el seg\u00fcent:</p> Java<pre><code>int matriu[][]={{10, 20, 30}, {40, 50, 60}}; //(1)!\n</code></pre> <ol> <li>Cada \"grupet de n\u00fameros\" \u00e9s la inicialitzaci\u00f3 de cada vector de la matriu. Per tant, hauran de ser de la mateixa grand\u00e0ria.</li> </ol>"},{"location":"PRG06/#34-la-propietat-length-en-les-matrius","title":"3.4. La propietat length en les matrius","text":"<p>Suposem que tenim esta matriu:</p> Java<pre><code>float m[][]=new float[6][5];\n</code></pre> <ul> <li>Amb <code>m.length</code> tindrem eixe 6 (quantitat de files)</li> <li>Amb <code>m[0].length</code> tindrem eixe 5 (quantitat de columnes)</li> </ul> <p>Ja vorem que, en ocasions, en alguna part del programa no sabrem la quantitat de files i columnes que t\u00e9 eixa matriu m (no coneixerem eixe 6 i 5). En eixos casos accedirem amb m.length per a accedir a la grand\u00e0ria de la 1a component de la matriu, i amb m[0].length per a accedir a la grand\u00e0ria de la 2a component de la matriu. Per\u00f2 per qu\u00e8?</p> <p>Recordem que una matriu \u00e9s un \"vectorot\" de \"vectorets\". Per tant, m.length \u00e9s la longitud d'eixe \"vectorot\". I com m[0] \u00e9s el primer dels \"vectorets\", m[0].length \u00e9s la longitud d'eixe \"vectoret\" (i dels altres, ja que tots s\u00f3n igual de grans). Sabent aix\u00f2, tamb\u00e9 podrem accedir als \"cantons\" de la matriu, etc. \u00c9s a dir:</p> <p></p>"},{"location":"PRG06/#35-recorreguts-duna-matriu","title":"3.5. Recorreguts d'una matriu","text":"<p>Si volem mostrar tots els elements d'una matriu, o assignar-los un valor, etc., haurem de rec\u00f2rrer-la tota. \u00c9s a dir, haurem de passar per cadascun dels seus elements. Podem fer eixe recorregut de 2 maneres: per files o per columnes.</p> <p>Recorregut per files:</p> <p></p> <p>Recorregut per columnes:</p> <p></p> <p>Per\u00f2 si nom\u00e9s volem rec\u00f3rrer una fila, per exemple la 2, NO hem de rec\u00f3rrer tota la matriu, sin\u00f3 simplement la fila que volem:</p> <p></p> <p>I si volem rec\u00f3rrer nom\u00e9s una columna, per exemple la 1, farem:</p> <p></p> <p>Un error freq\u00fcent \u00e9s que, per a rec\u00f3rrer una columna (per exemple la 1), es rec\u00f3rrega tota la matriu:</p> <p></p> Exercici 5 RESOLT <p>Estad\u00edstica de temperatures</p> <p>A un centre meteorol\u00f2gic volem guardar les temperatures d'un mes (31 dies), mesurades 4 voltes al dia (a les 0, 6, 12 i 18 hores de cada dia).</p> <p>Al principi del programa es demanaran totes les temperatures del mes: per cada dia es demanaran les 4 temperatures.</p> <p>posteriorment, el programa presentar\u00e0 un men\u00fa perqu\u00e8 l'usuari fa\u00e7a una an\u00e0lisi de les dades recol\u00b7lectades:</p> Text Only<pre><code>1. Temperatura mitja d'un dia demanat per programa.\n2. Temperatura mitja d'una hora demanada per programa.\n3. Temperatura mitja del mes.\n0. Eixir.\n</code></pre> <p>Repetidament es mostrar\u00e0 el men\u00fa, es demanar\u00e0 una opci\u00f3 i s'executar\u00e0, fins posar l'opci\u00f3 0.</p> <p>Plantejament de la soluci\u00f3</p> <p>Caldr\u00e0 guardar les dades en una matriu. Podem plantejar-ho de moltes formes. Per a vore l'estructura de dades que ens far\u00e0 falta, hem de fer-nos un \"dibuxet\" amb el que volem. Aix\u00ed veiem que ens vindria b\u00e9 una matriu de 32 x 4:</p> <p></p> <p>(*) Si definir\u00edem una matriu de 31 files, els n\u00fameros de fila anirien de 0 a 30 per\u00f2 els dies s\u00f3n de l'1 al 31. Per tant, definiriem una matriu de 32 files, i nom\u00e9s usarem de la fila 1 a la 31. Simplement, no usarem la fila 0.</p> Java<pre><code>public class ExerciciTemperatures{\n    public static void main (String args[]){\n\n        // DECLARACI\u00d3 DE VARIABLES ------------------------------\n        final int DIES = 3;\n        final int FRANGES = 4;\n\n        int temp[][] = new int[DIES+1][FRANGES];\n\n        int diaTriat, horaTriada, franjaTriada;\n        int opcio;\n        float total, mitjana;\n\n        // INTRODUCCI\u00d3 DE DADES ---------------------------------\n        System.out.println(\"--- INTRODUCCI\u00d3 DE TEMPERATURES ---\");\n\n        for (int dia = 1; dia &lt;= DIES; dia++){  // No agafem el dia 0\n            System.out.println(\"\\nDia \" + dia);\n\n            for (int franja = 0; franja &lt; FRANGES; franja++){\n                temp[dia][franja] = funcionsIO.readIntC(\"Temperatura a les \" + (franja * 6) + \": \");\n            }\n        }\n\n        // MOSTREM LES TEMPERATURES POSADES ---------------------\n\n        // Mostrem el titolet de les hores\n        for(int franja = 0; franja &lt; FRANGES; franja++){\n            System.out.print(\"\\t\" + (franja * 6) + \"h\");\n        }\n        System.out.println(\"\");\n\n        // Mostrem les files de la matriu\n        for(int dia = 1; dia &lt;= DIES; dia++){\n            System.out.print(\"Dia_\" + dia + \"\\t\");\n\n            for(int franja = 0; franja &lt; FRANGES; franja++){\n                System.out.print(temp[dia][franja] + \"\\t\");\n            }\n\n            System.out.println(\"\");\n        }\n\n        // BUCLE: Mostrar men\u00fa, demanar opci\u00f3 i executar opci\u00f3\n        do{\n            // MOSTREM MENU\n            System.out.println(\"***********************************\");\n            System.out.println(\"1. Mostrar temp. mitjana d'un dia\");\n            System.out.println(\"2. Mostrar temp. mitjana d'una hora\");\n            System.out.println(\"3. Mostrar temp. mitjana del mes\");\n            System.out.println(\"0. Eixir\");\n            System.out.println(\"***********************************\");\n\n            // DEMANEM UNA OPCIO CORRECTA\n            do{\n                opcio = funcionsIO.readIntC(\"Tria opci\u00f3: \");\n            } while ((opcio &lt; 0) || (opcio &gt; 3));\n\n            // EXECUTEM L'OPCI\u00d3 TRIADA\n            switch(opcio){\n                case 1: // Mitjana de les temperatures d'un dia\n                    do{\n                        diaTriat = funcionsIO.readIntC(\"De quin dia vols la mitjana: \");\n                    } while ((diaTriat &lt;= 0)||(diaTriat &gt; DIES));\n\n                    total = 0;\n                    for(int franja = 0; franja &lt; FRANGES; franja++){\n                        total = total + temp[diaTriat][franja];\n                    }\n                    mitjana = total / FRANGES;\n                    System.out.println(\"La mitjana del dia \" + diaTriat + \" \u00e9s \" + mitjana);\n                    break;\n\n                case 2: // Mitjana de les temperatures d'una hora\n                    do{\n                        horaTriada = funcionsIO.readIntC(\"De quina hora vols la mitjana (0, 6, 12, o 18): \");\n                        franjaTriada = horaTriada / 6;\n                    } while (franjaTriada &lt; 0 || franjaTriada &gt; 3);\n\n                    total = 0;\n                    for(int dia = 1; dia &lt;= DIES; dia++){\n                        total = total + temp[dia][franjaTriada];\n                    }\n                    mitjana = total / DIES;\n                    System.out.println(\"La mitjana de les \" + (franjaTriada * 6) + \" \u00e9s \" + mitjana);\n                    break;\n\n                case 3: // Mitjana de les temperatures de tot el mes\n                    total = 0;\n                    for(int dia = 1; dia &lt;= DIES; dia++){\n                        for(int franja = 0; franja &lt; FRANGES; franja++){\n                            total += temp[dia][franja];\n                        }\n                    }\n                    mitjana = total / (DIES * FRANGES);\n                    System.out.println(\"La mitjana del mes \u00e9s \" + mitjana);\n                    break;\n\n                case 0: // Eixir\n                    System.out.println(\"Ad\u00e9u!\");\n                    break;\n\n                default:\n                    System.out.println(\"Opci\u00f3 incorrecta\");\n\n            } // Fi del switch\n        } while (opcio != 0); //Fi del bucle\n    }\n}\n</code></pre> Exercici 6. Matrius en Java <p>Modifica l'exercici anterior sobre l'estad\u00edstica de temperatures, afegint estes opcions al men\u00fa:</p> <ul> <li>4.Mostra temperatura en un dia i hora en concret.</li> <li>5.Mostra la m\u00ednima i la m\u00e0xima d'un dia.</li> <li>6.Canviar una temperatura.</li> </ul> <p>Pensa altres possibles opcions que podries fer i implementa-les.</p> Exercici 7 <p>Fes un programa que guarde en una matriu les notes de programaci\u00f3 que han tret 15 alumnes en cadascuna de les 3 avaluacions. A continuaci\u00f3 trau de cada alumne: el n\u00famero (1 a 15), la nota mitjana i quantes suspeses. Tamb\u00e9 trau de cada avaluaci\u00f3: el n\u00famero (1 a 3), la nota m\u00e0xima i la m\u00ednima. Per exemple, l'eixida de resultats podria ser:</p> Exemple de sortida<pre><code>ALUMNE   MITJA   SUSPESES\n 1       3.33     3\n 2       5.00     1\n 3       6.67     0\n 4       8.76     0\n...\n\nAVAL   M\u00cdNIMA   M\u00c0XIMA\n 1      3.5      5.7\n 2      3.0      8.0\n 3      4.0      9.0\n</code></pre> Exercici 8 <p>Modifica el programa anterior perqu\u00e8 es puguen guardar, en la mateixa matriu (ara ser\u00e0 tridimensional), a m\u00e9s de les notes del m\u00f2dul de programaci\u00f3, les de bases de dades i les de llenguatge de marques. Mostra quantes avaluacions han susp\u00e9s en total els alumnes.</p>"},{"location":"PRG06/#4-cadenes-de-caracters","title":"4. Cadenes de car\u00e0cters","text":"<p>Com es guarda un nom de persona, per exemple? Alguns llenguatges com C, ho guarden en un vector de car\u00e0cters. Per\u00f2 en Python i Java ho tracten com un tipus de dades, amb moltes operacions disponibles sobre variables d'eixe tipus.</p> <ul> <li>Python t\u00e9 el tipus de dades str</li> <li>Java t\u00e9 la classe String (una classe \u00e9s m\u00e9s que un tipus, ja ho vorem)</li> </ul>"},{"location":"PRG06/#41-cadenes-de-java-la-classe-string","title":"4.1. Cadenes de Java: la classe <code>String</code>","text":""},{"location":"PRG06/#411-declaracio-de-variables-string","title":"4.1.1. Declaraci\u00f3 de variables <code>String</code>","text":"Java<pre><code>String nom; //(1)\n\nnom = \"Pep Garcia\"; //(2)\n</code></pre> <ol> <li>Ja vorem que, m\u00e9s que \"variables de tipus String\", realment s\u00f3n \"objectes de la classe String\".</li> <li>En Java es tanquen entre \"cometes dobles\". En Python, \"cometes dobles\" o 'simples'.</li> </ol>"},{"location":"PRG06/#412-alguns-metodes-sobre-cadenes-en-java","title":"4.1.2. Alguns m\u00e8todes sobre cadenes en Java","text":"<p>Com ja hem dit, String no \u00e9s un tipus, \u00e9s una classe (les classes comencen en maj\u00fascula). I, per tant, tindr\u00e0 uns m\u00e8todes associats, per a treballar amb cadenes. Vegem uns exemples. Partim que tenim: <code>String nom = \"Pep Garcia\"</code></p> M\u00c8TODE DE CADENES JAVA RETORNA EXPLICACI\u00d3 nom.length() 10 Longitud de la cadena. En un vector seria nom.lenght (sense par\u00e8ntesis). \"Hola\".length() 4 nom.charAt(0) 'P' Primera lletra. nom.charAt(4) 'G' Lletra posici\u00f3 4. En un vector seria nom[4] nom.charAt(nom.legth()-1) 'a' \u00daltima lletra. nom.charAt(10) ERROR No existeix la posici\u00f3 10 en nom. nom.substring(4, 7) \"Gar\" De la posici\u00f3 4 a la 6. nom.substring(4) \"Garcia\" De la posici\u00f3 4 al final. nom.indexOf('a') 5 Primera posici\u00f3 de la 'a'. nom.indexOf('x') -1 Si no troba la lletra. nom.indexOf('a', 6) 9 Primera posici\u00f3 de la 'a' a partir de la 6. nom.indexOf(\"Gar\") 4 Primera posici\u00f3 del text \"Gar\" nom.contains(\"Gar\") true Per a saber si una cadena n'inclou altra nom.equals(\"Pep Garcia\") true Per a saber si 2 cadenes s\u00f3n iguals. nom.equals(\"pep garcia\") false nom.equalseIgnoreCase(\"pep garcia\") true Per a saber si 2 cadenes s\u00f3n iguals sense importar les maj\u00fascules. nom.compareTo(\"Pop\") n\u00fam. &lt; 0 Pep Garcia &lt; Pop \"Pop\".compareTo(nom) n\u00fam. &gt; 0 Pop &gt; Pep Garcia nom.compareTo(\"Pep Garcia\") 0 Cadenes iguals nom.toLowerCase() \"pep garcia\" A min\u00fascules. nom.toUpperCase() \"PEP GARCIA\" A maj\u00fascules. \"\u00a0\u00a0\u00a0Hola, Pep!\u00a0\u00a0\u00a0\".trim() \"Hola, Pep!\" Lleva espais davant i darrere. nom.replace(\"Pep\", \"Josep\") \"Josep Garcia\" Reempla\u00e7a subcadena. nom.replace('a', 'A') \"Pep GArciA\" Reempla\u00e7a car\u00e0cter. String s = \"IES Jaume II\";String[] paraules = s.split(\" \"); [\"IES\",\"Jaume\",\"II\"] Obt\u00e9 un vector de Strings les parts de la cadena, segons el car\u00e0cter separador (igual que en Python). Exemple d'\u00fas dels m\u00e8todes de les cadenes en Java Java<pre><code>public class ExempleStrings {\n    public static void main(String[] args) {\n        String nom = funcionsIO.readTextC(\"Com et diuen? \");\n        System.out.println(\"HOLA, \" + nom.toUpperCase());\n        System.out.println(\"El teu nom t\u00e9 \" + nom.length() + \" lletres\");\n        char utlLletra = nom.charAt(nom.length()-1);\n        if (utlLletra == 'a'){\n            System.out.println(\"Tens nom de xica\");\n        }\n        if (nom.equals(\"Pep\")){\n            System.out.println(\"Tamb\u00e9 eres Josep\");\n        }\n        if (nom.indexOf('\u00e7') &gt;= 0){ // O b\u00e9: nom.contains(\"\u00e7\")\n            System.out.println(\"Tens nom valenci\u00e0\");\n        }\n        if (nom.compareTo(\"Pep\") &gt; 0){\n            System.out.println(\"Alfab\u00e8ticament vas despr\u00e9s de Pep\");\n        }\n        nom = nom.trim(); // Llevem espais davant i darrere\n        if (nom.contains(\" \")){ // Si \u00e9s nom compost\n            System.out.println(\"Nom d'usuari: \" + nom.replace(' ', '_'));\n            String[] noms = nom.split(\" \");\n            System.out.println(\"Tens estos \" + noms.length + \" noms:\");\n            for (String nom1 : noms){\n                System.out.println(nom1);\n            }\n        }\n    }\n}\n</code></pre> <p>En executar-se dona la seg\u00fcent sortida:</p> <p></p>"},{"location":"PRG06/#42-cadenes-de-python-la-classe-str","title":"4.2. Cadenes de Python: la classe <code>str</code>","text":""},{"location":"PRG06/#421-declaracio-de-variable-str","title":"4.2.1. Declaraci\u00f3 de variable <code>str</code>","text":"Python<pre><code>nom1 = \"Pep\"\nnom2 = 'Pepa' #(1)!\nnom3 = '''Estimat Sr. Pep:\nBla, bla, bla...\nTavernes, 25-12-2024''' #(2)!\n</code></pre> <ol> <li>En Python podem usar cometes dobles o simples.</li> <li>Si usem 3 cometes(simples o dobles), la cadena pot ocupar diverses l\u00ednies.</li> </ol>"},{"location":"PRG06/#5-llistes-dinamiques","title":"5. Llistes din\u00e0miques","text":"<p>Els arrays que hem vist en Java s\u00f3n llistes est\u00e0tiques: tenen una grand\u00e0ria fixa que s'estableix al principi i ja no pot variar durant l'execuci\u00f3 del programa. T\u00e9 sentit que siga aix\u00ed per a certes utilitats, ja que el dia sempre tindr\u00e0 24 hores, els alumnes sempre tenen 3 avaluacions, un tauler d'escacs sempre \u00e9s 8x8...</p> <p>Per\u00f2 a voltes la quantitat d'elements podr\u00e0 canviar. Per exemple, podem tindre en un principi20 alumnes per\u00f2 en poden vindre m\u00e9s (o anar-se'n). Per a aix\u00f2 estan les llistes din\u00e0miques: tindran una grand\u00e0ria inicial per\u00f2 podran canviar durant l'execuci\u00f3 del programa. De fet, les llistes que hem vist en Python s\u00f3n din\u00e0miques.</p> <p>Hi ha diferents tipus de llistes din\u00e0miques o \"col\u00b7leccions\" de dades. Cada llenguatge de programaci\u00f3 t\u00e9 les seues. Algunes de Java i Python s\u00f3n:</p> COL\u00b7LECCIONS Llistes Conjunts Diccionaris Els elements estan ordenats? S\u00cd NO NO Els elements estan indexats? S\u00cd NO S\u00cd, per la clau Permet elements repetits? S\u00cd NO NO <p></p> <p>A continuaci\u00f3 vorem un esquema resum dels principals m\u00e8todes o operacions que es poden fer amb els diferents tipus de col\u00b7leccions de Java i Python:</p> M\u00c8TODES DE LES COL\u00b7LECCIONS Llistes Conjunts Diccionaris Llenguatge J P J P J P Classe ArrayList list HashSet set HashMap dict Afegir al final .add .append - - - - Afegir a un lloc .add .insert - - - - Afegir a cap lloc - - .add .add put [clau]= Modificar .set [i]= - - put [clau]= Esborrar posici\u00f3 .remove .pop - - - - Esborrar element .remove .remove .remove .remove.discard .remove(clau) .pop(clau) Buidar .clear .clear .clear .clear .clear .clear Consultar posici\u00f3 .get [i] - - .get(clau) .get(clau)[clau] Saber si est\u00e0 un element .contains.indexof in.index .contains in .containsKey.containsValue in Longitud .size len .size .size .size .size Ordenar Collections.sort .sort - - - - Altres .union.intersection.difference.issubset.issuperset .values.keyset .values().keys().items() <p>A continunaci\u00f3 vorem en detall les col\u00b7leccions que m\u00e9s s'utilitzen: les llistes. Java usa la classe ArrayList; Python, la classe list.</p>"},{"location":"PRG06/#51-llistes-en-java-la-classe-arraylist","title":"5.1. Llistes en Java: la classe ArrayList","text":"<p>Un ArrayList \u00e9s una llista en Java. La difer\u00e8ncia entre un vector i una llista \u00e9s que la grand\u00e0ria d'un vector no es pot modificar i la d'una llista, s\u00ed. A m\u00e9s, es poden fer moltes m\u00e9s coses en una llista. Ara vorem com fer tot aix\u00f2 en Java, amb exemples:</p> Exemples d'\u00fas de llistes en Java Java<pre><code>import java.util.ArrayList; //(1)!\nimport java.util.Collections;\n\npublic class ProvesLlistes {\n    public static void main(String[] args) {\n        ArrayList&lt;String&gt; amics = new ArrayList(); //(2)!\n\n        // AFEGIR\n        amics.add(\"Pep\");\n        amics.add(\"Pepa\"); //(3)!\n        amics.add(\"Pepet\");\n        amics.add(1, \"Pepeta\"); //(4)!\n\n        // CONSULTAR\n        System.out.println(amics.get(0)); //(5)!\n        String amiguet = amics.get(2);\n        System.out.println(amics.contains(\"Pepa\")); //(6)!\n        System.out.println(amics.indexOf(\"Pepa\")); //(7)!\n        System.out.println(amics.indexOf(\"Josep\")); //(8)!\n        System.out.println(amics.size()); //(9)!\n        System.out.println(amics); //(10)!\n\n        // REC\u00d3RRER\n        for (int i = 0; i &lt; amics.size(); i++) { //(11)!\n            System.out.println(amics.get(i));\n        }\n        for (String amic : amics){ //(12)!\n            System.out.println(amic);\n        }\n\n        // MODIFICAR\n        amics.set(1, \"Pau\"); //(13)!\n\n        // ORDENAR\n        Collections.sort(amics); //(14)!\n\n        // ESBORRAR\n        amics.remove(1); //(15)!\n        amics.remove(\"Pepet\"); //(16)!\n        amics.clear(); //(17)!\n    }\n}\n</code></pre> <ol> <li>Cal importar eixa classe Arrayist</li> <li>Creem una llista d'amics.</li> <li>Afegim elements al final: <code>[\"Pep\", \"Pepa\", \"Pepet\"]</code></li> <li>Afegim en la 2a posici\u00f3: <code>[\"Pep\", \"Pepeta\", \"Pepa\", \"Pepet\"]</code></li> <li>Consultem el 1r element (\"Pep\")</li> <li>Comprovem si est\u00e0 Pepa: <code>true</code></li> <li>Posici\u00f3 on est\u00e0 Pepa: <code>2</code></li> <li>Posici\u00f3 on est\u00e0 Josep: <code>-1</code></li> <li>Consultem la grand\u00e0ria de la llista: <code>4</code></li> <li>Mostrem la llista \"de colp\": <code>[Pep, Pepeta, Pepa, Pepet]</code></li> <li>Recorrem la llista amb un for tradicional</li> <li>Recorrem la llista amb un bucle foreach</li> <li>Modifiquem el 2n element: <code>[\"Pep\", \"Pau\", \"Pepa\", \"Pepet\"]</code></li> <li>Ordenem la llista: <code>[\"Pau\", \"Pep\", \"Pepa\", \"Pepet\"]</code></li> <li>Esborrem el 2n element: <code>[\"Pau\", \"Pepa\", \"Pepet\"]</code></li> <li>Esborrem l'element Pepet: <code>[\"Pau\", \"Pepa\"]</code></li> <li>Esborrem la llista: <code>[]</code></li> </ol> <p>Per practicar m\u00e9s...</p> <p>En www.w3schools.com podem consultar i practicar l'ArrayList (llistes) i altres tipus de col\u00b7leccions, com els HashSet, els HashMap (diccionaris), etc.</p>"},{"location":"PRG06/#52-llistes-de-python-la-classe-list","title":"5.2. Llistes de Python: la classe <code>list</code>","text":"<p>Una list \u00e9s una llista en Python. Recordem que els vectors de Python s\u00f3n realment llistes. Per tant, ja hem vist les llistes de Python, per\u00f2 anem a vore altres operacions que es poden feer sobre elles.</p> <p>La list de Python permet m\u00e9s coses que l'ArrayList de Java:</p> <ul> <li>Una llista de Python pot inicialitzar-se amb una s\u00e8rie d'elements:</li> </ul> Python<pre><code>assignatures = [\"prg\", \"bd\", \"lm\", \"edd\", \"si\", \"ang\", \"fol\"]\n# O b\u00e9:\nassignatures = list((\"prg\", \"bd\", \"lm\", \"edd\", \"si\", \"ang\", \"fol\"))\n</code></pre> <ul> <li>Els elements d'una mateixa llista de Python poden ser de distints tipus:</li> </ul> Python<pre><code>dadesInsti = [\"Jaume II el Just\", \"Cam\u00ed la Dula\", 46760, True]\n</code></pre> <p>Exemples d'inicialitzaci\u00f3 de les distintes col\u00b7leccions de Python</p> Python<pre><code>amics = [\"Pep\", \"Pepa\", \"Pepet\", \"Pep\"]     # Llista\nsiOno = (\"s\", \"S\", \"n\", \"N\")                # Tupla (1)\nanimals = {\"gos\", \"gat\", \"peix\", \"tortuga\"} # Conjunt\nnotes = {\"Pep\":9, \"Pepa\":10, \"Pepet\":7}     # Diccionari (2)\n</code></pre> <ol> <li>Una tupla \u00e9s una llista per\u00f2 invariable (no podrem afegir, modificar ni llevar elements).</li> <li>Cada tipus de col\u00b7lecci\u00f3 t\u00e9 el seu delimitador.</li> </ol> <p>O b\u00e9, aix\u00ed:</p> Python<pre><code>amics = list((\"Pep\", \"Pepa\", \"Pepet\", \"Pep\"))       # Llista\nsiOno = tuple((\"s\", \"S\", \"n\", \"N\"))                 # Tupla\nanimals = set((\"gos\", \"gat\", \"peix\", \"tortuga\"))    # Conjunt\nnotes = dict((Pep=9, Pepa=10, Pepet=7))             # Diccionari\n</code></pre> <p>Vegem amb exemples algunes operacions que podem fer amb les llistes de Python:</p> Operacions amb llistes Python<pre><code># AFEGIR\namics = [\"Pep\", \"Pepa\"]     # Creem una llista d'amics\namics.append(\"Pepet\")       # Afegim elements al final: ['Pep', 'Pepa', 'Pepet']\namics.insert(1, \"Pepeta\")    # Afegim en la 2a pos: ['Pep', 'Pepeta', 'Pepa', 'Pepet']\n\n# CONSULTAR\nprint(amics[0])             # Consultem el 1r element ('Pep')\namiguet = amics[2]          # Consultem el 3r element ('Pepa')\n\nprint(len(amics))           # Consultem la grand\u00e0ria de la llista: 4\n\nprint(\"Pepa\" in amics)      # Consultem si Pepa est\u00e0 en amics: True\nprint(amics.index(\"Pepa\"))  # Consultem l'\u00edndex de Pepa: 2\n#print(amics.index(\"Josep\")) # Consultem \u00edndex d'element inexistent: error!!!\n\nprint(amics)                # Mostrem la llista de colp: ['Pep', 'Pepeta', 'Pepa', 'Pepet']\nprint(*amics)               # Mostrem els distints elements: Pep Pepeta Pepa Pepet\nprint(\"Amics:\", *amics, sep='\\n - ')    # Mostrar\u00e0 cada element en una linia:\n\n'''\nAmics:\n- Pep\n- Pepeta\n- Pepa\n- Pepet\n'''\n\n# RECORRER\nfor i in range (len(amics)):    # Recorrem la llista amb un for tradicional\n    print(amics[i])\n\nfor amic in amics:              # Recorrem la llista amb un bucle foreach\n    print(amic)\n\n# MODIFICAR\namics[1] = \"Pau\"    # Modifiquem el 2n element: ['Pep', 'Pau', 'Pepa', 'Pepet']\n\n# ORDENAR\namics.sort()        # Ordenenm la llista\n\n# ESBORRAR\namics.pop(1)            # Esborrem el 2n element: ['Pep', 'Pepa', 'Pepeta']\namics.remove(\"Pepeta\")  # Esborrem l'element Pepeta: ['Pep', 'Pepa']\namics.clear()           # Buidem la llista: []\n</code></pre> Exercici 12. Llistes en Java <p>Fes un programa en Java sobre una agenda d'amics. Haur\u00e0 de mostrar el seg\u00fcent men\u00fa, demanar una opci\u00f3 i executar-la. Tornar\u00e0 a fer-se el mateix fins eixir del programa:</p> <ul> <li>Introduir un amic. Es demanar\u00e0 el nom de l'amic, si ja existia l'amic en la llista avisar\u00e0 i no el tornar\u00e0 a posar.</li> <li>Esborrar un amic. Es demanar\u00e0 el nom i l'esborrar\u00e0. Avisar\u00e0 que s'ha esborrat o que no estava.</li> <li>Mostrar la llista. Cada amic en una l\u00ednia. Al final dir\u00e0 quants amics hi ha.</li> <li>Mostrar per inicial. Es demanar\u00e0 una lletra i es mostraran tots els amics que comencen per eixa lletra.</li> <li>Modificar amic. Es demanar\u00e0 una posici\u00f3 i un nou nom i el modificar\u00e0. Avisar\u00e0 del resultat.</li> <li>Ordenar la llista alfab\u00e8ticament.</li> <li>Buidar la llista.</li> <li>Eixir.</li> </ul> Exercici 12b. LListes en Python <p>Fes el Python el programa anterior sobre l'agenda d'amics.</p>"},{"location":"PRG06/#53-diccionaris-de-java-la-classe-hashmap","title":"5.3. Diccionaris de Java: la classe <code>HashMap</code>","text":"<p>Un HashMap \u00e9s un diccionari en Java. Un diccionari est\u00e0 format per parelles clau-valor, on no t\u00e9 import\u00e0ncia l'ordre de les parelles.</p> <p>Veiem-ho amb un exemple, on volem guardar el preu de cada article:</p> Exemple HashMap HashMap.java<pre><code>import java.util.HashMap;\n\npublic class ExempleHashMap {\n    public static void main(String[] args) {\n        HashMap&lt;String, Double&gt; articles = new HashMap();\n\n        articles.put(\"tomaques\", 4.5);\n        articles.put(\"cebes\", 2.2);\n        articles.put(\"melons\", 1.5);\n        articles.put(\"melons\", 1.7);    // Sobreescriu l'entrada de melons\n\n        System.out.println(\"Tinc \" + articles.size() + \" articles:\");\n        System.out.println(articles); // {melons = 1.7, tomaques = 4.5, cebes = 2.2}\n        System.out.println(\"Qu\u00e8 vols comprar? \");\n        String art = funcionsIO.readTextC(\"\");\n\n        if (!articles.containsKey(art)) {\n            System.out.println(\"No existeix l'article\");\n        }\n        else {\n            System.out.println(\"S\u00f3n a \" + articles.get(art) + \" \u20ac/kg\");\n        }\n\n        System.out.println(\"ARTICLES\\tPREU\");\n        for (String a : articles.keySet()) {    // Recorrem el diccionari\n            System.out.println(a + \"\\t\" + articles.get(a));\n        }\n    }\n}\n</code></pre> <p>Per\u00f2 els HashMap tenen m\u00e9s m\u00e8todes: per a esborrar una entrada, esborrar tot el diccionari, comprovar si est\u00e0 buit, comprovar si existeix tal valor...</p> <p>Pots investigar m\u00e9s creant un programa al teu IDE: posael nom d'un HashMap i el punt, i apareixeran tots els m\u00e8todes amb informaci\u00f3 de com emprar-los. O b\u00e9:</p> <p> HashMap en Java</p>"},{"location":"PRG07/","title":"UD7. Programaci\u00f3 modular. Funcions en Java","text":""},{"location":"PRG07/#1-introduccio","title":"1. Introducci\u00f3","text":"<p>Si un programa \u00e9s molt llarg, \u00e9s a dir, ocupa moltes l\u00ednies de codi, tendix a complicar-se molt i a ser cost\u00f3n d'entendre.</p> <p>Per tant, basant-nos en la idea de dividix i vencer\u00e0s, farem \u00fas de la t\u00e8cnica coneguda com descomposici\u00f3 modular, amb la qual cosa es descompon el programa (m\u00f2dul) en m\u00f2duls m\u00e9s xicotets i, per tant, m\u00e9s f\u00e0cils d'entendre. Eixe proc\u00e9s tamb\u00e9 \u00e9s conegut com disseny descendent o top-down.</p> <p><pre><code>graph TD\n    A[PROGRAMA PRINCIPAL]\n    A --&gt; B[SUBPROBLEMA A]\n    A --&gt; C[SUBPROBLEMA B]\n    B --&gt; B1[SUBPROBLEMA A.1]\n    B --&gt; B2[SUBPROBLEMA A.2]\n    C --&gt; C1[SUBPROBLEMA B.1]\n    C --&gt; C2[SUBPROBLEMA B.2]\n    C --&gt; C3[SUBPROBLEMA B.3]</code></pre></p> <p>Aix\u00f2 s'aconseguix amb les subrutines. Tamb\u00e9 anomenades subprogrames, funcions o procediments. O b\u00e9, m\u00e8todes, en el cas de llenguatges orientats a objectes, com Java.</p> <p>Cal anar fent eixa descomposici\u00f3 successivament. Per\u00f2 fins quan? Hem de parar de descompondre quan un m\u00f2dul (o funci\u00f3, m\u00e8tode...) fa\u00e7a una feina molt concreta.</p> <p>Altre avantatge que aconseguim amb les subrutines \u00e9s no haver de repetir constantment fragments de codi.</p>"},{"location":"PRG07/#2-tipus-de-subrutines-procediments-i-funcions","title":"2. Tipus de subrutines: procediments i funcions","text":"<p>Una subrutina \u00e9s un bloc d'instruccions que executa una tasca concreta i a la qual se li dona un nom. Esta subrutina \u00e9s invocada des d'altra o altres subrutines.</p> <p>Per emprar una subrutina cal fer:</p> <ol> <li>Definir la subrutina (nomes 1 vegada).</li> <li>Invocar (usar, cridar) eixa subrutina sempre que ho necessitem.</li> </ol> <p>Depenent de si la subrutina ha de retornar un valor o no, ser\u00e0 diferent eixa definici\u00f3 de la subrutina i les invocacions a ella. Per tant, cal distingir 2 tipus de subrutines:</p> <ul> <li>Procediments: no retornen cap valor</li> <li>Funcions: retornen un valor</li> </ul> <p>Podem pensar que una subrutina \u00e9s com una m\u00e0quina a la qual se li entren unes dades i fa unes accions determinades segons eixes dades. Si la m\u00e0quina fa eixir alguna cosa fora d'ella direm que \u00e9s una funci\u00f3. Si no, \u00e9s un procediment.</p> <p>FUNCI\u00d3</p> <p></p> <p>Una funci\u00f3 podria ser com una m\u00e0quina de caf\u00e9:</p> <ul> <li>Entrada: la selecci\u00f3 del tipus de caf\u00e9, quantitat de sucre...</li> <li>Accions: preparar el caf\u00e9</li> <li>Eixida: el caf\u00e9</li> </ul> <p>PROCEDIMENT</p> <p></p> <p>Un procediment podria ser com una m\u00e0quina de pinball:</p> <ul> <li>Entrada: les pulsacions dels botons</li> <li>Accions: moure la boleta i mostrar punts per pantalla</li> <li>Eixida: (res)</li> </ul>"},{"location":"PRG07/#21-procediments","title":"2.1. Procediments","text":""},{"location":"PRG07/#211-procediments-sense-parametre-dentrada","title":"2.1.1. Procediments sense par\u00e0metre d'entrada","text":"<p>Per\u00f2 ara pensem que estaria b\u00e9 poder iniciar cada vegada que posem una l\u00ednia, quants guionets volem pintar. Per a fer aix\u00f2, caldr\u00e0 dir-ho en la crida al procediment i, clar est\u00e0, tamb\u00e9 a la definici\u00f3 del procediment:</p> <p>Exemple de subrituna</p> Rutina principal (main)Subrutina (linia) Java<pre><code>public static void main (String args[]){\n    ...\n    System.out.println(\"Vaig a dibuixar una l\u00ednia de longitud 15\\n\");\n    linia(15); //(1)!\n\n    int longitud = funcionsIO.readIntC(\"Dis-me la longitud de la l\u00ednia: \");\n    linia(longitud); //(2)!\n    ...\n}\n</code></pre> Java<pre><code>static void linia (int lon){\n    for (int i = 1; i &lt;= lon; i++){\n        System.out.print(\"-\");\n    }\n    System.out.println();\n}\n</code></pre> <p>Els valors que fan d'ella\u00e7 entre les 2 rutines que es comuniquen s'anomenen par\u00e0metres:</p> <ul> <li>Par\u00e0metres actuals: s\u00f3n els que s'envien a la subrituna. Poden ser constants, variables o expressions.</li> <li>Par\u00e0metres formals: s\u00f3n els que rep la subrutina (les variables que estan en la definic\u00f3 de la funci\u00f3, nom\u00e9s poden ser variables).</li> </ul> <p>En qualsevol moment podem eixir d'un procediment amb una sent\u00e8ncia return;, encara que \u00e9s recomanable no posar-lo i eixir en l'\u00faltima instrucci\u00f3 del procediment.</p> <p>M\u00e9s avantatges d'usar subrutines:</p> <ul> <li>Podem aprofitar un mateix tros de codi per a fer coses amb diferents valors o variables.</li> <li>Podem escriure eixe tros de codi sense saber el nom de les variables amb les quals es cridar\u00e0 a la subrutina.</li> </ul> <p>A l'exemple anterior hem passat un par\u00e0metre al procediment. Per a fer aix\u00f2 hem hagut de modificar la crida i definici\u00f3 del procediment. Una subrutina pot tindre tots els par\u00e0metres que necessiten. Pensem per exemple, que tamb\u00e9 volem donar-li el car\u00e0cter amb el qual ha de pintar la l\u00ednia. Calrien 2 par\u00e0metres:</p> <p>Exemple de subrutina amb 2 par\u00e0metres</p> Rutina principal (main)Subrutina amb dos par\u00e0metres (linia) Java<pre><code>public static void main(String[] args) {\n        linia(15, \"=\"); //(1)!\n        int longitud = funcionsIO.readIntC(\"Longitud de la linia: \");\n        String caracter = funcionsIO.readTextC(\"Car\u00e0cter a repetir: \");\n        linia(longitud, caracter);\n}\n</code></pre> <ol> <li>Crida a la subrutina</li> </ol> Java<pre><code>static void linia (int lon, String car){ //(1)!\n    for (int i = 0; i &lt; lon; i++) {\n        System.out.print(car);\n    }\n    System.out.println();\n}\n</code></pre> <ol> <li>Definici\u00f3 de la subrutina</li> </ol> <p>Tractarem el \"car\u00e0cter\" com a String i no Char per simplificar el codi.</p> <p>Com veiem, quan es crida a una subrutina, el valor del 1r par\u00e0metre de la crida es copia en el 1r par\u00e0metre de la definici\u00f3 de la subrutina; el 2n en el 2n...</p> <p>Resumint el que hem vist de procediment: quan s'invoca un procediment, este fa una tasca determinada, acaba despr\u00e9s de l'\u00faltima sent\u00e8ncia (o b\u00e9, quan ve una sent\u00e8ncia return) i torna a cedir el control a on s'havia fet la crida.</p> <p>Ara b\u00e9: els procediments poden tindre par\u00e0metres d'entrada per\u00f2 no d'eixida. No retornen cap valor. Despr\u00e9s vorem que les funcions (a m\u00e9s de poder tindre par\u00e0metres d'entrada) s\u00ed que tenen un par\u00e0metre d'eixida: retornaran un valor a qui ha invocat la funci\u00f3.</p> Exercici 1. Procediments <p>Fes un programa anomenat ProvesProcediments. En ell fes els procediments que es detallen i prova'l amb crides des del main.</p> <p>Fes un procediment anomenat maxim al quan li passes 2 enters com a par\u00e0metres. El procediment haur\u00e0 de mostrar el m\u00e0xima dels 2 n\u00fameros.</p> Exercici 2 <p>Prova el procediment anterior fent crides des del main:</p> <ul> <li>Mostra el m\u00e9s gran entre el 10 i el 20, fent una crida a \"maxim\".</li> <li>Demana 2 n\u00fameros per teclat i mostra el major usant \"maxim\".</li> </ul> Exercici 3 <p>Fes els seg\u00fcents procediments sobre figures geom\u00e8triques:</p> <p>3.1. Fes el procediment rectangle, el qual rep 3 par\u00e0metres:</p> <ul> <li>Un enter indicant la quantitat de files</li> <li>Un enter indicant la quantitat de columnes</li> <li>Un car\u00e0cter</li> </ul> <p>El procediment ha de mostrar un rectangle amb eixe car\u00e0cter i amb tantes files i columnes com indiquen els par\u00e0metres. Exemple:</p> Java<pre><code>rectangle(3, 4, \"*\");\n</code></pre> <p><code>* * * *</code></p> <p><code>* * * *</code></p> <p><code>* * * *</code></p> <p>3.2. Fes un altre procediment que es diga tamb\u00e9 rectangle per\u00f2 que nom\u00e9s li passes la quantitat de files i de columnes. El procediment ha de pintar un rectangle d'eixes files i columnes per\u00f2 sempre amb el car\u00e0cter \"X\" (Pots passar-lo com a String, si \u00e9s m\u00e9s f\u00e0cil). Nota: dins d'eixa funci\u00f3 nom\u00e9s hi haur\u00e0 una \u00fanica instrucci\u00f3 (usa la funci\u00f3 anterior).</p> <p>3.3. Fes un altre procediment anomenat quadrat, que rep nom\u00e9s dos par\u00e0metres: la longitud d'un costat i el car\u00e0cter amb el qual s'ha de pintar el quadrat. Nota: dins de la funci\u00f3 nom\u00e9s hi haur\u00e0 1 \u00fanica instrucci\u00f3. </p> Exercici 4 <p>Fes el procediment de nom titol, al qual li passes com a par\u00e0metre una cadena de text (String) i ha de mostrar eixa cadena envoltada d'asteriscos. Per exemple:</p> Java<pre><code>titol(\"Pep Garcia\");\n</code></pre> <p></p> Exercici 5 <p>Procediment taulaMultiplicar al qual li passes un n\u00famero de taula i et mostra la taula corresponent. El procediment tamb\u00e9 rebr\u00e0 un car\u00e0cter, que ser\u00e0 una C o una D. Si \u00e9s una D, mostrar\u00e0 la taula decreixent. Per exemple, si li passem 22, D:</p> Text Only<pre><code>22 x 10 = 220\n...\n22 x 2 = 44\n22 x 1 = 22\n</code></pre> Exercici 6 <p>Procediment repetirNumeros tal que, a partir d'un n\u00famero n, mostre:</p> Text Only<pre><code>1\n22\n333\n...\nnnn ... n (n vegades el n\u00famero n)\n</code></pre>"},{"location":"PRG07/#22-funcions","title":"2.2. Funcions","text":"<p>Hem vist que un procediment podia tindre 0, 1 o molts par\u00e0metres s'entrada. Les funcions tamb\u00e9 per\u00f2, a m\u00e9s, tamb\u00e9 poden tindre 1 par\u00e0metre de sortida. \u00c9s a dir: les funcions poden calcular un valor i retornar-lo a qui invoca la funci\u00f3.</p> <p>Exemple de funci\u00f3</p> <p>Imagina que necessitem demanar per teclat un n\u00famero enter entre un rang determinat de valors possibles, i que mentre no es tecletge un valor correcte, caldr\u00e0 tornar-lo a demanar. Aix\u00f2 es pot fer amb un bucle. Per\u00f2 si al llarg del programa necessitem demanar diversos n\u00fameros entre un rang, haur\u00edem de copiar eixe bucle moltes vegades. Soluci\u00f3: fem un a subrutina (una funci\u00f3) que retorne un enter correcte cada vegada que invoquem la funci\u00f3:</p> Java<pre><code>static int enterCorrecte (int minim, int maxim){ //(1)!\n    Scanner teclat = new Scanner(System.in); //(2)!\n    int num;\n    num = teclat.nectInt();\n    while (num &lt; minim || num &gt; maxim){\n        System.out.println(\"El n\u00famero ha d'estar entre \" + minim + \" i \" + maxim);\n        num = teclat.nectInt()\n    }\n    return num; //(3)!\n}\n</code></pre> <ol> <li>int enterCorrecte --&gt; el par\u00e0metre de sortida ser\u00e0 un int</li> <li>Podiem haver fet \u00fas de funcionsIO, per\u00f2 per recordar com es feia sense fitxer de funcions...</li> <li>Moment on es retorne el valor (el par\u00e0metre de sortida). Pot ser una constant, una variable o una expressi\u00f3. En una funci\u00f3 pot haver m\u00e9s d'una sent\u00e8ncia return.</li> </ol> <p>\u00c9s a dir: les funcions s\u00ed que retornen un valor, mitjan\u00e7ant la instrucci\u00f3 return. I el tipus de la informaci\u00f3 que es retorna s'especifica en la declaraci\u00f3 de la funci\u00f3 (en les procediments es posa void, ja que no retorna res).</p> <p>IMPORTANT!</p> <p>Les crides a les funcions (a difer\u00e8ncia de les crides a procediments) han d'estar dins d'alguna expressi\u00f3, ja que arrepleguen un valor. Han d'estar en una assignaci\u00f3 de variable, en una condici\u00f3, com a par\u00e0metre d'altra funci\u00f3 (println...), etc.</p> Java<pre><code>public static void main(String args[]){\n    ...\n    System.out.println(\"Dis-me l'edat: \");\n    int edat = enterCorrecte(0,120); //(1)!\n    ...\n    System.out.println(\"Tria una opci\u00f3 del men\u00fa: \");\n    switch(enterCorrecte(1, 5)){ //(2)!\n        case 1: ...\n        case 2: ...\n        ...\n    }\n    ...\n    System.out.println(\"Endevina un n\u00famero entre 1 i 10: \");\n    System.out.println(\"No, no \u00e9s el \" + enterCorrecte(1,10) + \"!\"); //(3)!\n    ...\n    System.out.println(\"Dis-me el dia del mes: \");\n    enterCorrecte(1,31); //(4)!\n}\n</code></pre> <ol> <li>La crida a la funci\u00f3 est\u00e0 en una instrucci\u00f3 d'assignaci\u00f3.</li> <li>La crida a la funci\u00f3 est\u00e0 en una condici\u00f3 switch.</li> <li>La crida a la funci\u00f3 est\u00e0 en una expressi\u00f3 de concatencaci\u00f3 de cadenes com a par\u00e0metre de la funci\u00f3 println.</li> <li>Compte! Esta crida a la funci\u00f3 no est\u00e0 dins de cap expressi\u00f3. Eixa crida no donar\u00e0 error per\u00f2 no t\u00e9 sentit, ja que el valor retornat per la funci\u00f3 no \u00e9s utilitzat en cap lloc (no estem guardant-lo en una variable ni estem usant-lo en cap expressi\u00f3).</li> </ol> <p>Notes:</p> <ul> <li>Dins la definici\u00f3 d'una subrutina poden haver crides a altres subrutines.</li> <li>En els par\u00e0metres d'una subrutina poden haver crides a altres subrutines.</li> </ul> Altre exemple Java<pre><code>public class ProvaFuncions {\n    public static void main(String[] args) {\n        float a = 6.3f, b = -4.2f, c = 5.7f; // si no posem la f, \u00e9s double i d\u00f3na error\n        float prod;\n        int n;\n        // Arrepleguem resultats i imprimim\n        prod = producte(a, b);\n        System.out.printf(\"El producte de a i b \u00e9s %3.4f \\n\", prod);\n\n        // Imprimim el resultat directament\n        System.out.printf(\"El producte de a i c \u00e9s %3.4f \\n\", producte(a, c));\n\n        // Podem cridar la funci\u00f3 sense arreplegar el resultat,\n        // per\u00f2 no tindria sentit, ja que perdem el valor que\n        // retornem de la funci\u00f3 producte(b, c)\n\n        // Les crides a les funcions poden estar niuades. \u00c9s a dir,\n        // podem posar la crida a una funci\u00f3 com a par\u00e0metre d'una altra funci\u00f3\n\n        prod = producte(positiu(a*b), producte(c*(positiu(b)), a));\n    }\n\n    static float producte (float x, float y){\n        return x * y;\n    }\n\n    static float positiu(float x){\n        if (x &lt; 0) return -x;\n        else return x;\n    }\n}\n</code></pre>"},{"location":"PRG07/#3-el-control-de-flux","title":"3. El control de flux","text":"<p>Per si encara no ha quedat clar, anem a vore amb un exemple els passos que seguix el flux de control del programa quan hi ha crides a subrutines. Ho vorem amb un algorisme (no \u00e9s de Java) ja que \u00e9s igual per a qualsevol llenguatge de programaci\u00f3.</p> <p></p> <ol> <li>S'executen les instruccions fins arribar a una crida a una funci\u00f3 (o procediment).</li> <li>Es copien els par\u00e0metres actuals de la crida als corresponents par\u00e0metres formals de la definici\u00f3 de la funci\u00f3 (el 2 es copia en la variable base i el 4 en la variable altura). </li> <li>Continua el flux de control per dins de la funci\u00f3.</li> <li>Quan arriba la sent\u00e8ncia return, es torna un valor a on s'ha fet la crida. En este cas es retorna el valor de la variable area. Com que eixa variable tenia el valor de 10, \u00e9s com si ara tingu\u00e9rem en el main la seg\u00fcent assignaci\u00f3: areatri = 10;</li> <li>Continua el flux de control per on s'havia quedat el main. \u00c9s a dir, ara que ja se sap que el valor de area_triangle(5, 4) t\u00e9 el valor de 10, es fa l'assignaci\u00f3 d'eixe 10 a la variable areatri.</li> <li>Continuen executant-se les instruccions del main fins una altra crida a altra funci\u00f3 (o a la mateixa).</li> </ol> Exercici 7. Funcions <p>Fes un programa anomenat ProvesFuncions. En ell fes les funcions que es demanen i prova-les amb crides des del main.</p> <ul> <li>Funci\u00f3 booleana esBixest que li passes com a par\u00e0metre un any i retorna si \u00e9s bixest o no. La funci\u00f3 no ha de demanar res per teclat ni mostrar res per pantalla. Un any \u00e9s bixest nom\u00e9s si complix alguna d'estes 2 condicions:<ul> <li>\u00e9s m\u00faltiple de 4 i no de 100 (per exemple, el 2008)</li> <li>\u00e9s m\u00faltiple de 400 (per exemple, el 2000) Observem que, per exemple, l'any 1900 no \u00e9s bixest.</li> </ul> </li> </ul> Exercici 8 <p>Funci\u00f3 dataLletra que li passes una data amb 3 enters (19,2,2009) i que retorne la data amb el format \"19 de febrer de 2009\". Utilitza un switch. Si \u00e9s un mes incorrecte, que retorne directament \"error\". Despr\u00e9s, des del main, crida a la funci\u00f3 amb la data que cregues convenient. Si \u00e9s correcta, la mostres. Si no, mostra el text \"Data incorrecta\".</p> Exercici 9 <p>Fes les seg\u00fcents funcions, que et serviran per a usar-les en altres Exercicis. Passa com a par\u00e0metre a cadascuna el text que es mostrar\u00e0 en pantalla:</p> <ul> <li>La funci\u00f3 llegirString que llija una cadena de teclat i la retorne.</li> <li>Fes la funci\u00f3 llegirChar que llija un car\u00e0cter de teclat i el retorne.</li> <li>Fes la funci\u00f3 llegirInt que llija un int de teclat i el retorne.</li> <li>Fes la funci\u00f3 llegirFloat que llija un float de teclat i el retorne.</li> </ul> <p>NOTA: Aquestes funcions ja estan fetes en funcionsIO, per\u00f2 fes-les de nou, en un fitxer nou i fes l'entrada de dades amb la classe Scanner</p> Exercici 10 <p>Funci\u00f3 esTriangle que, a partir de 3 dades, retorne un boole\u00e0 dient si eixes dades es poden correspondre amb les longituds d'un triangle o no. Nota: formaran triangle si cada costat \u00e9s menor que la suma dels altres dos.</p> Exercici 11 <p>Funci\u00f3 tipusTriangle que, a partir de les longituds dels costats, retorne el tipus de triangle: equil\u00e0ter, is\u00f2sceles o escal\u00e9. O b\u00e9, \"error\" si les dades no es corresponen amb un triangle (utilitza la funci\u00f3 esTriangle).</p> <p></p> Exercici 12 <p>Funci\u00f3 factorial que, a partir d'un enter, retorne el factorial. Sabent que:</p> <ul> <li> <p>0! = 1</p> </li> <li> <p>n! = 1 * 2 * ... * (n-1) * n</p> </li> </ul> Exercici 13 <p>Funci\u00f3 booleana numeroPrimer que diga si el n\u00famero passat \u00e9s primer o no (\u00e9s a dir, si \u00e9s divisible nom\u00e9s per ell mateix i per 1).</p> Exercici 14 <p>Funci\u00f3 booleana numeroPerfecte que diga si el n\u00famero passat \u00e9s perfecte o no. \u00c9s a dir, si \u00e9s igual a la suma dels seus divisors excepte ell. Per exemple, el 6 \u00e9s perfecte perqu\u00e8: - 6 = 1 + 2 + 3     (1, 2 i 3 s\u00f3n els divisors de 6, llevat del 6).</p> Exercici 15 <p>Funci\u00f3 sumaPotencies que, a partir d'un n\u00famero n, retorne un enter que ser\u00e0 el resultat de fer este c\u00e0lcul: - 1\u00b9 + 2\u00b2 + 3\u00b3 + ... + n^n</p>"},{"location":"PRG07/#4-classificacio-dels-moduls","title":"4. Classificaci\u00f3 dels m\u00f2duls","text":"<p>Hi ha distints tipus de m\u00f2duls. Anem a classificar-los atenent a distints criteris.</p> <p>Segons el valor de retorn</p> <ul> <li>Funcions: retornen un valor al m\u00f2dul que l'ha invocat. El valor ha de ser arreplegat per una expressi\u00f3. Per exemple, si la funci\u00f3 maxim() retorna el m\u00e0xima de 2 n\u00fameros, la crida a eixa funci\u00f3 la trobarem a una expressi\u00f3 com per exemple k = maxim(i,j).</li> <li>Procediments: el m\u00f2dul no retorna cap valor, simplement fa una determinada feina i punt.</li> </ul> <p>Segons el moment en qu\u00e8 ha estat desenvolupat</p> <ul> <li>De llibreria: implementades pr\u00e8viament i guardades als fitxers de llibreria (els fitxers .h de C), com per exemple printf, strlen, scanf, o directament les llibreries de classe de Java.</li> <li>De programa: la funci\u00f3 s'ha desenvolupat mentre f\u00e9iem el programa.</li> </ul> <p>Segons la quantitat de m\u00f2duls que el criden</p> <ul> <li>Subprograma: nom\u00e9s l'invocar\u00e0 un m\u00f2dul (normalment ser\u00e0 main).</li> <li>Rutina o subrutina: poden ser invocats per qualsevol m\u00f2dul.</li> </ul> <p>Segons la situaci\u00f3 respecte al m\u00f2dul que l'invoca</p> <ul> <li>Intern: quan est\u00e0 al mateix fitxer que el m\u00f2dul que invoca.</li> <li>Extern: quan est\u00e0 en un fitxer distint que el m\u00f2dul que invoca.</li> </ul> <p>A partir d'aix\u00f2 podem trobar altres avantatges de la descomposici\u00f3 modular:</p> <ul> <li>Reduix el temps de desenvolupament, usant m\u00f2duls ja implementats.</li> <li>Diversos programadors poden col\u00b7laborar en la resoluci\u00f3 d'un problema.</li> <li>Millora la depuraci\u00f3, ja que podem anar corregint m\u00f2duls individualment.</li> <li>Facilita modificacions posteriors ja que els programes s\u00f3n m\u00e9s f\u00e0cils de llegir.</li> </ul>"},{"location":"PRG07/#5-variables-globals-i-locals","title":"5. Variables globals i locals","text":"<p>Hi ha diferents tipus de variables depenent d'on es definisquen.</p> <p></p>"},{"location":"PRG07/#6-comunicacio-entre-les-funcions","title":"6. Comunicaci\u00f3 entre les funcions","text":"<p>Quan una funci\u00f3 A invoca a una altra B, hi ha un possible intercanvi de dades. En este apartat vorem les formes en qu\u00e8 es poden passar eixa informaci\u00f3.</p>"},{"location":"PRG07/#61-formes-de-comunicacio","title":"6.1. Formes de comunicaci\u00f3","text":"<p>Variables globals</p> <p></p> <p>Potser siga la forma m\u00e9s senzilla per\u00f2 es desaconsella el seu \u00fas ja que:</p> <ul> <li>Les funcions que invoquen B han de saber el nom de les variables globals que usa B, etc.</li> <li>Les variables poden ser modificades en qualsevol lloc no desitjat i interessa restringir eixe acc\u00e9s.</li> </ul> <p>Pas de par\u00e0metres per valor</p> <p></p> <p>El par\u00e0metre actual (X) es copia en el par\u00e0metre formal (X') per\u00f2 si B modifica el valor de X', el valor de X no es vor\u00e0 alterat.</p> <p>X pot ser una constant, variable at\u00f2mica (no vector ni objecte) o una expressi\u00f3. X' ha de ser una variable at\u00f2mica.</p> <p>Valor retornat</p> <p></p> <p>B podr\u00e0 passar un valor X a A mitjan\u00e7ant la instrucci\u00f3 return X.</p> <p>A haur\u00e0 de tindre la crida a B dins d'alguna expressi\u00f3 per a usar el valor retornat per B.</p> <p>X pot ser una constant, variable (at\u00f2mica, array o objecte) o una expressi\u00f3.</p> <p>Pas de par\u00e0metres per refer\u00e8ncia</p> <p></p> <p>El par\u00e0metre actual (X) \"es copia\" en el par\u00e0metre formal (X') i, a m\u00e9s, si B modifica el valor de X', el valor de X tamb\u00e9 es vor\u00e0 alterat.</p> <p>X i X' han de ser arrays (vectors o matrius) o objcetes. Ja vorem qu\u00e8 son els objectes per\u00f2 per exemple, un ArrayList o un HashMap s\u00f3n objectes.</p> <p>De les 4 formes de comunicaci\u00f3 anteriors nom\u00e9s no hem vist el pas de par\u00e0metres per refer\u00e8ncia. Anem a vore-ho mitjan\u00e7ant un vector com a par\u00e0metre. Tamb\u00e9 vorem com retornar un vector. De forma an\u00e0loga, en compte de vectors podr\u00edem passar matrius (o altres objectes, que ja vorem m\u00e9s endavant).</p>"},{"location":"PRG07/#62-com-passar-un-vector-com-a-parametre","title":"6.2. Com passar un vector com a par\u00e0metre","text":"<p>En la funci\u00f3 main, abans de cridar a inivec, la variable vector tindr\u00e0 zeros als seus elements. I despr\u00e9s de cridar a la funci\u00f3, eixa variable estar\u00e0 tota a cincs.</p> <p>Aix\u00f2 \u00e9s degut a que els arrays no es passen per valor (no es passa una c\u00f2pia del valor) sin\u00f3 per refer\u00e8ncia: realment es passa com a par\u00e0metre l'adre\u00e7a en mem\u00f2ria (la \"refer\u00e8ncia\") del vector. Per aix\u00f2, vector i v apuntaran a la mateixa adre\u00e7a de mem\u00f2ria i, si els components de v es modifiquen, tamb\u00e9 es modificaran els de vector, como podem vore ac\u00ed:</p> <p></p> <p>Compte! Si en la funci\u00f3 reservem mem\u00f2ria per al vector del par\u00e0metre formal. NO podrem accedir a eixa informaci\u00f3 en el par\u00e0metre actual (el de la crida):</p> <p></p>"},{"location":"PRG07/#63-com-fer-que-una-funcio-retorne-un-vector","title":"6.3. Com fer que una funci\u00f3 retorne un vector","text":"<p>Veiem que ara \u00e9s la funci\u00f3 qui reserva mem\u00f2ria per al vector v. Despr\u00e9s de cridar a la funci\u00f3, la variable vector apuntar\u00e0 a eixa zona de mem\u00f2ria:</p> <p></p> Exercici 16. Procediments i funcions amb vectors <p>Fes el procediment mostrarVectorInt, que imprimisca un vector d'enters passat com a par\u00e0metre. Cal mostrar els elements separats per comes i amb salt de l\u00ednia final.</p> Exercici 17 <p>Procediment mostrarMatriuInt, que imprimisca una matriu d'enters passada com a par\u00e0metre. Cal mostrar-la en forma de matriu on, en cada fila, els elements han d'estar separats per comes. Pots ajudar-te del procediment mostrarVectorInt.</p> Exercici 18 <p>Procediment copiarVector. Rebr\u00e0 2 vectors com a par\u00e0metres i ha de copiar el primer vector al segon. Si el vector origen t\u00e9 mes elements que el vector dest\u00ed, es copiaran els elements que c\u00e0piguen. Feu-ho sense utilitzar System.arraycopy.</p> Exercici 19 <p>Funci\u00f3 igualsVectors. Rebr\u00e0 2 vectors. La funci\u00f3 ha de retornar un boole\u00e0 dient si els 2 vectors s\u00f3n iguals (igual grand\u00e0ria i mateixos elements). Feu-ho sense utilitzar Array.equals.</p> Exercici 20 <p>Fes un procediment que llija un vector d'enters. La crida ser\u00e0 llegirVectorInt(vector). \u00c9s a dir, li passem com a argument un vector (que ja t\u00e9 mem\u00f2ria reservada) i la funci\u00f3 l'ha d'omplir amb enters llegits per teclat. Ajuda't de la funci\u00f3 llegirInt que has fet anteriorment.</p> Exercici 21 <p>Funci\u00f3 perfectes4 que retorne en un vector els primers 4 n\u00fameros perfectes. Ajuda't de la funci\u00f3 numeroPerfecte que ja has fet.</p> Exercici 22 <p>Fes un procediment grafic que li passes un vector d'enters possitius i mostre la gr\u00e0fica. Per exemple, si el vector \u00e9s [2][7][4][1], ha de mostrar la gr\u00e0fica:</p> <p>0   ==</p> <p>1   =======</p> <p>2   ====</p> <p>3   =</p>"},{"location":"PRG07/#7-els-parametres-de-main","title":"7. Els par\u00e0metres de main","text":"<p>Fins ara hem parlat de par\u00e0metres de les funcions en general, per\u00f2 no hem parlat dels par\u00e0metres de la funci\u00f3 main.</p> <p>En Java, la funci\u00f3 main nom\u00e9s t\u00e9 un par\u00e0metre formal: un vector de Strings:</p> <p><code>public static void main (String args[])</code></p> <p>Per\u00f2... per a qu\u00e8 serveix?</p> <p>Des de consola, en la l\u00ednia de comandaments, l'usuari llan\u00e7a el programa amb l'ordre java i el nom del fitxer java (sense extensi\u00f3 .java). Aix\u00ed:</p> <p><code>java nomPrograma</code></p> <p>Per\u00f2 tamb\u00e9 podem passar-li al programa uns par\u00e0metres (arguments). Per exemple, si tenim un programa anomenat HolaPersona.java i volem executar-lo passant-li com a par\u00e0metres un nom, un cognom i una edat, ho farem aix\u00ed:</p> <p><code>java HolaPersona Pep Garcia 33</code></p> <p>Eixa ordre far\u00e0 que s'execute la funci\u00f3 main() de HolaPersona.java, de forma que cadascun dels arguments es copiaran en una posici\u00f3 del vector de Strings args (encara que es podria dir d'una altra fomra, en compte d'args). \u00c9s a dir, quan s'execute el main, com li hem passat 3 arguments, el vector args tindr\u00e0 3 posicions.</p> <p>Si volem fer eixe programa, editem el fitxer HolaPersona.java, escrivim a\u00e7\u00f2 i el guardem:</p> Java<pre><code>class HolaPersona{\n    public static void main (String args[]){\n        System.out.println(\"Hola \" + args[0] + \" \" + args[1]);\n        System.out.println(\"Tens \" + args[2] + \" anys.\");\n    }\n}\n</code></pre> <p>El compilem:</p> <p><code>javac HolaPersona.java</code></p> <p>L'executem amb els arguments:</p> <p><code>java HolaPersona Pep Garcia 33</code></p> <p>Comprovem que per pantalla apareix:</p> <p></p> <p>Si executem HolaPersona sense par\u00e0metres, el programa donar\u00e0 error d'execuci\u00f3 (ArrayIndexOutOfBoundsException), ja que intentar\u00e0 accedir a args[0] per\u00f2 com no li hem passat cap argument, el vector args no tindr\u00e0 reservada cap mem\u00f2ria.</p> <p>Si no volem executar l'aplicaci\u00f3 de de consola, sin\u00f3 des de intelliJ, i volem passar-li par\u00e0metres al main, li'ls hem de posar aix\u00ed:</p> <ul> <li>Bot\u00f3 dret del ratol\u00ed sobre el nom de la aplicaci\u00f3 o a sobre del m\u00e8tode main.</li> <li>Seleccionar More Run/Debug</li> <li>Opci\u00f3 Modify Run Configuration...</li> <li>Escriure els arguments en l'apartat Program arguments: Pep Garcia 33</li> <li>Acceptar els canvis i executar l'aplicaci\u00f3 (no cal tornar a compilar-la).</li> </ul> <p></p> <p>En main, amb args.length podem saber quants par\u00e0metres ens passen cada vegada.</p> Exercici 23 RESOLT. Par\u00e0metres del main <p>Programa que mostre per pantalla els arguments passats com a par\u00e0metres al programa (\u00e9s a dir, a main).</p> Java<pre><code>public static void main(String args[]){\n    for(int i = 0; i &lt; args.length; i++){\n        System.out.println(args[i]);\n    }\n}\n</code></pre>"},{"location":"PRG07/#8-arguments-variables","title":"8. Arguments variables","text":"<p>Podem cridar una funci\u00f3 amb distinta quantitat d'arguments. Tenim 3 solucions:</p>"},{"location":"PRG07/#81-sobrecarrega-de-funcions","title":"8.1. Sobrec\u00e0rrega de funcions","text":"<p>Podem tindre diverses funcions amb el mateix nom per\u00f2 distinta quantitat de par\u00e0metres o de tipus diferents.</p> <p></p>"},{"location":"PRG07/#82-passar-un-vector-darguments","title":"8.2. Passar un vector d'arguments","text":"<p>Realment \u00e9s un \u00fanic argument, per\u00f2 com \u00e9s un vector, podem posar tots els valors que volem.</p> <p></p>"},{"location":"PRG07/#83-us-de-varargs","title":"8.3. \u00das de varargs","text":"<p>Amb els \"...\" en l'\u00faltim par\u00e0metre d'una funci\u00f3 podrem arreplegar distinta quantitat de par\u00e0metres (com si fora un vector).</p> <p></p> Exercici 24. Procediments i funcions amb vectors <p>Volem una funci\u00f3 que calcule el m\u00e0xim de distinta quantitat de n\u00fameros enters.</p> <ul> <li>Sobrec\u00e0rrega: Fes una funci\u00f3 maxim que retorne el m\u00e0xim de 2 enters passats com a par\u00e0metre. Fes-ne una altra que es diga igual per\u00f2 que accepte 3 enters. Usa-la des del main per comprovar el resultat.</li> <li>Vector d'arguments: Fes una funci\u00f3 maxim que li passes un vector d'enters i que retorne el major. Fes crides des del main.</li> <li>Varargs: Fes una funci\u00f3 que accepte qualsevol quantitat d'enters com a par\u00e0metre i ha de tornar el major. No es podr\u00e0 dir maxim, ja que entraria en conflicte amb la funci\u00f3 del mateix nom que rep un vector. Prova-la al main.</li> </ul>"},{"location":"PRG07/#9-recursivitat","title":"9. Recursivitat","text":"<p>La recursivitat \u00e9s la forma d'especificar un proc\u00e9s basant-se en la seua pr\u00f2pia definici\u00f3. Per tant, una funci\u00f3 recursiva \u00e9s aquella que es crida a ella mateixa.</p> <p>Un mateix problema pot tindre una soluci\u00f3 iterativa (amb bucles) o recursiva (funci\u00f3 que s'autocrida). Exemple: Com podem baixar una escala de 10 escalons?</p> <p>Baixar una escala de 10 escalons</p> Soluci\u00f3 iterativaSoluci\u00f3 recursiva Baixar una escala<pre><code>Fes 10 voltes{\n    Baixar 1 escal\u00f3\n}\n</code></pre> Baixar una escala<pre><code>Baixar 1 escal\u00f3\nBaixar una escala de 9 escalons\n</code></pre> <p>Sol usar-se quan la soluci\u00f3 d'un programa pot expressar-se com un problema igual, per\u00f2 de menor complexitat (com hem vist a l'exemple).</p> <p>Ja hem dit que una funci\u00f3 recursiva \u00e9s aquella que es crida a ella mateixa (directament o indirecta). Quan parar\u00e0? Quan es complisca una determinada condici\u00f3. Eixa condici\u00f3 (o condicions) s'anomena cas base.</p> <p>Calcular la suma dels n primers n\u00fameros naturals</p> <p><code>n + (n-1) + (n-2) + ... + 1</code></p> <p></p>"},{"location":"PRG07/#91-implementacio","title":"9.1. Implementaci\u00f3","text":"<p>Dins d'una funci\u00f3 recursiva trobem 2 parts.</p> <ul> <li>Cas general: es torna a cridar a la funci\u00f3, amb valors de par\u00e0metres m\u00e9s menuts.</li> <li>Cas base: no es torna a cridar a la funci\u00f3. El cas o casos base s\u00f3n situacions que es poden resoldre amb molta facilitat.</li> </ul>"},{"location":"PRG07/#92-funcionament","title":"9.2. Funcionament","text":"<p>El programa principal (main) crida a la funci\u00f3 recursiva, on, generalment, s\u2019executa el cas general. Este cas consistix en cridar altra volta a la mateixa funci\u00f3, on es torna a executar el cas general i aix\u00ed successivament fins que arriba un punt en qu\u00e8 s\u2019executa el cas base. En eixe moment acaba la recursi\u00f3 i el flux de control \"va tornant per on havia vingut\". A\u00e7\u00f2 \u00faltim queda reflectit en les fletxes verdes de l'esquema que vorem a continuaci\u00f3.</p> <p>Per a entendre millor el funcionament, hem d'imaginar-nos que, cada vegada que es fa una crida a la recursi\u00f3, \u00e9s com si es cridara a un \"clon de la funci\u00f3\", amb els seus par\u00e0metres i variables locals que no tenen res a vore amb els de \"l'altre clon\".</p> <p></p> <p>La recursi\u00f3 va (fletxes blaves):</p> <p>Quan fem la crida a suma(4), s'executa la funci\u00f3, que li direm clon A. Esta fa una crida a suma(3) i s'executa B. Esta fa una crida a sumar(2) i s'executa C. Esta fa una crida a suma(1) i s'executa D. Esta arriba al cas base i ja no crida a ning\u00fa.</p> <p>...i la recursi\u00f3 torna (fletxes verdes):</p> <p>La funci\u00f3 D acaba i retorna el valor 1 a qui l'havia cridat, que era el clon C, qui continua executant-se per on ho havia deixat. El clon C fa uns c\u00e0lculs i retorna un 3 al clon B. Este fa uns c\u00e0lculs i retorna un 6 al clon A. I este fa uns c\u00e0lculs i retorna un 10 al main, qui havia iniciat la crida.</p>"},{"location":"PRG07/#93-com-vore-si-la-recursio-esta-ben-feta","title":"9.3. Com vore si la recursi\u00f3 est\u00e0 ben feta","text":"<p>Per a vore que \u00e9s correcte l'algorisme recursiu, hem de vore almenys:</p> <ul> <li>Existix al menys un cas base</li> <li>El par\u00e0metre de la crida a la recursi\u00f3 de dins de la funci\u00f3 \u00e9s cada volta \"m\u00e9s menut\" (va acostant-se al cas base).</li> <li>Finalment la crida recursiva acaba passant per algun cas base.</li> </ul>"},{"location":"PRG07/#94-recursivitat-vs-iteracio","title":"9.4. Recursivitat vs Iteraci\u00f3","text":"<p>Com hem de resoldre un problema determinat? De forma iterativa o recursiva? Per a saber-ho, veiem els inconvenients i avantatges de la recursi\u00f3:</p> <p>Inconvenients:</p> <ul> <li>La funci\u00f3 recursiva usa m\u00e9s RAM ja que per a cada clon reserva nova mem\u00f2ria per als seus par\u00e0metres i variables locals.</li> <li>La funci\u00f3 recursiva tarda m\u00e9s en executar-se ja que fa moltes crides a funcions i ha de reservar mem\u00f2ria per a les variables dels clons.</li> </ul> <p>Avantatges</p> <ul> <li>A vegades, la soluci\u00f3 recursiva \u00e9s molt m\u00e9s f\u00e0cil de trobar que la iterativa. Fins i tot, en ocasions \u00e9s l'\u00fanica alternativa.</li> </ul>"},{"location":"PRG07/#95-exemples-dus-de-recursio","title":"9.5. Exemples d'\u00fas de recursi\u00f3","text":"<ul> <li>C\u00e0lcul del factorial d'un n\u00famero.</li> <li>Destapar les caselles en el joc del buscamines.</li> <li>Buscar la soluci\u00f3 a un laberint.</li> <li>Trobar la ruta \u00f2ptima entre 2 pobles.</li> <li>Mostrar els fitxers que hi ha en un arbre de direccions i subdirectoris.</li> </ul> Exercici 25. Recursi\u00f3. RESOLT <p>Fes una funci\u00f3 que calcules el factorial d'un n\u00famero de forma iterativa i altra funci\u00f3 que el calcule de forma recursiva. Suposem que mai es crida a la funci\u00f3 amb un n\u00famero negatiu.</p> Versi\u00f3 iterativaVersi\u00f3 recursiva Java<pre><code>static long factorial(int n){\n    long fact = 1;\n    for (int i = n; i &gt;= 2; i--){\n        fact = fact * i;\n    }\n    return fact;\n}\n</code></pre> Java<pre><code>static long factorial(int n){\n    if (n == 0 || n == 1) return 1;\n    else return n*factorial(n-1);\n}\n</code></pre> Exercici 26. RESOLT <p>Fes el procediment recursiu anomenat mostraBinari, que reba un n\u00famero enter (en el sistema decimal) i mostre el corresponent n\u00famero en binari. Despr\u00e9s fes la funci\u00f3 recursiva calculaBinari que, en compte de mostrar el n\u00famero en binari, retorne una cadena amb eixe binari.</p> mostraBinaricalculaBinari Java<pre><code>static void mostraBinari(int n){\n    if (n &lt;= 1) System.out.print(n);\n    else{\n        mostraBinari(n/2);\n        System.out.print(n%2);\n    }\n}\n</code></pre> Java<pre><code>static String calculaBinari(int n){\n    if (n &lt;= 1) return \"\" + n;\n    else{\n        return calculaBinari(n/2) + (n%2);\n    }\n}\n</code></pre> Exercici 27. RESOLT <p>Procediment recursiu anomenat mostraInvers, que mostre en pantalla els d\u00edgits d'un n\u00famero enter positiu en ordre invers.</p> <p>Exemple de crida: mostraInvers(3478) --&gt; 8743</p> Java<pre><code>static void mostraInvers(int n){\n    System.out.print(n%10);\n    if (n &gt;= 10) mostraInvers(n/10);\n}\n</code></pre>"},{"location":"PRG07/#951-exercicis-de-recursio","title":"9.5.1. Exercicis de recursi\u00f3","text":"Exercici 28 <p>Observa el seg\u00fcent procediment recursiu. Quin \u00e9s el cas base? Quin \u00e9s el cas general? Sense executar-lo, intenta vore qu\u00e8 mostrar\u00e0 per pantalla si l'invoquem amb hola(4).</p> Java<pre><code>static void hola(int n){\n    System.out.println(n);\n    if(n &gt; 0){\n        hola(n-1);\n    }\n    System.out.println(n);\n}\n</code></pre> Exercici 29 <p>Calcula la pot\u00e8ncia de forma recursiva:</p> <p></p> Exercici 30 <p>Funci\u00f3 recursiva que calcule un n\u00famero de la s\u00e8rie Fibonacci:</p> <p></p> Exercici 31 <p>Funci\u00f3 recursiva anomenada palindrom que retorne un boole\u00e0 que indique si la cadena passada com a par\u00e0metre \u00e9s un pal\u00edndrom o no (si es llig igual d'asquerra a dreta que de dreta a esquerra). Exemples (sense tindre en compte accents ni espais ni maj\u00fascules):</p> <ul> <li>Sen\u00e9n t\u00e9 sis nens i set nenes</li> <li>Ad\u00e1n no cede con Eva y Yav\u00e9 no cede con nada</li> <li>S\u00e9 verla al rev\u00e9s</li> <li>D\u00e1bale arroz a la zorra el abad</li> <li>Anita lava la tina</li> <li>La ruta nos aport\u00f3 otro paso natural</li> </ul> <p>NOTA: Intenta millorar la funci\u00f3, de forma que no fa\u00e7a cas dels possibles espais de la frase. Usa el m\u00e8tode replace dels String de Java per a \"canviar\" els espais per res.</p>"},{"location":"PRG08/","title":"UD8. Programaci\u00f3 Orientada a Objectes. Classes amb atributs.","text":""},{"location":"PRG08/#1-introduccio-a-la-poo","title":"1. Introducci\u00f3 a la POO","text":"<p>Un mon orientat a objectes</p> <p>Tot el que ens envolta s\u00f3n objectes:</p> <p></p> <p>I, com podem veure, cada objecte \u00e9s d'una classe en concret:</p> <p></p> <p>Qu\u00e8 \u00e9s la Programaci\u00f3 Orientada a Objectes (POO)?</p> <p>\u00c9s una forma de programar (un paradigma de programaci\u00f3) que es basa precissament en aix\u00f2: en els objectes. Primer definiriem una classe i, a partir d'aquesta, podrem crear els objectes d'eixa classe (igual com creem variables d'un tipus determinat).</p> <p>Qu\u00e8 es posa en una classe?</p> <p>En una classe posarem all\u00f2 que volem que descriga els objectes d'eixa classe. Si ens adonem, podem descriure un objecte per \"com \u00e9s\" i \"qu\u00e8 pot fer\":</p> <ul> <li>Com \u00e9s l'objectes? Voldrem indicar unes caracter\u00edstiques o atributs.</li> <li>Qu\u00e8 pot fer l'objecte? Voldrem indicar unes operacions o m\u00e8todes.</li> </ul> <p>Aclariment</p> <p>Per anar pas a pas, en aquest tema nom\u00e9s vorem els atributs de les classes. Els m\u00e8todes els veurem en el tema seg\u00fcent.</p> <p>Exemple gr\u00e0fic d'una classe i els seus objectes</p> <p>Suposem que volem fer un programa sobre la gesti\u00f3 dels alumnes de l'institut. Cada alumne \u00e9s un objecte.</p> <ul> <li>Com \u00e9s cada alumne? Voldr\u00edem saber el seu codi, nom, domicili i curs.</li> <li>Qu\u00e8 pot fer cada alumne? Matricular-se, examinar-se...</li> </ul> <p>Si l'institut no estiguera, per a guardar les dades de cada alumne caldrien fitxer amb la mateixa estructura (codi, nom, domicili i curs). Per tant, necessitar\u00edem una plantilla on estiguera eixa estructura i fer fotoc\u00f2pies d'ella:</p> <p></p> <p>Terminologia de la POO</p> CONCEPTES POO TERMINOLOGIA INFORMAL ANALOGIA EN LA VIDA REAL EXEMPLES Classe Tipus Plantilla plastificada Alumne Objectes Variables Fotoc\u00f2pies a emplenar alu1, alu2, alu3 Atributs Variables membre Apartats de la fitxa num, nom, dom, curs M\u00e8todes Funcions i proced. Accions sobre la fotoc\u00f2pia matricularAlumne(), canviDeCurs()... Estat de l'objecte Valors dels atributs El que s'escriu en la fotoc\u00f2pia num = 3, nom = \"Pep\" <p>M\u00e9s endavant vorem altres conceptes relacionats amb la POO, com her\u00e8ncia, abtracci\u00f3, polimorfisme, encapsulament, acoblament i cohesi\u00f3.</p>"},{"location":"PRG08/#2-classes-i-objectes-en-java","title":"2. Classes i objectes en Java","text":"<p>Com ja hem dit, per a poder declarar un objecte, primer necessitem crear una classe (plantilla). Despr\u00e9s ja podrem definir els nostres objectes en base a eixa classe.</p>"},{"location":"PRG08/#21-definicio-de-la-classe","title":"2.1. Definici\u00f3 de la classe","text":"<p>Anem a vore com podem definir una classe en Java. Per\u00f2 com ja hem dit, en este tema nom\u00e9s vorem una classe com un conjunt d'atributs. En el tema seg\u00fcent dins la classe posarem tamb\u00e9 les operacions o m\u00e8todes que es poden fer en cada objecte.</p> <p>Exemple</p> Java<pre><code>class Alumne{ //(1)!\n    int num;\n    String nom;\n    String cicle;\n    int curs;\n}\n</code></pre> <ol> <li>La classe Alumne \u00e9s la plantilla a partir de la qual crearem objectes on guardarem les dades de cada alumne. Per convenci\u00f3, el nom de la classe sempre comen\u00e7ar\u00e0 en maj\u00fascula.</li> </ol> <p>Sintaxi</p> Java<pre><code>class NomClasse { \n    [public | private] tipus camp1; //(1)!\n    [public | private] tipus camp2;\n    ...\n    [public | private] tipus campN;\n}\n</code></pre> <ol> <li>Ja vorem si hem de posar que  un atribut \u00e9s public o private.</li> </ol> <p>De moment crearem les classes en el mateix fitxer on tenim el main, fora de la classe principal, per\u00f2 ja vorem que convindria que cada classe anara en un fitxer (que tindria el mateix nom de la classe).</p> ProjecteMeu.java<pre><code>class Alumne{\n    int num;\n    String nom;\n    String cicle;\n    float curs;\n}\n\nclass ProjecteMeu{\n    public ctatic void main (String args[]){\n        ...\n    }\n}\n</code></pre> Exercici 1. Definir classes en Java <p>Crea un projecte de nom Proves i defineix en ell les classes corresponents a les seg\u00fcents estructures de dades:</p> <ol> <li>Una data: dia, mes i any.</li> <li>Un temps: hores, minuts, segons i cent\u00e8simes.</li> <li>Un rectangle: cant\u00f3 superior dreta (x1, y1) i cant\u00f3 inferior esquerra (x2, y2).</li> <li>Un concursant: nom complet, nom art\u00edstic i any de naixement.</li> <li>Un CD d'\u00e0udio: grup, t\u00edtol del disc, any publicaci\u00f3, quantitat de can\u00e7ons.</li> <li>Un nom complet de persona: nom, primer cognom i segon cognom.</li> <li>Un n\u00famero de tel\u00e8fon: prefix i resta del n\u00famero.</li> <li>Un domicili: carrer, n\u00famero, pis, porta, codi postal, poblaci\u00f3 i comarca.</li> <li>Un color RGB: format per 3 enters (quantitat de roig, de verd i de blau).</li> </ol>"},{"location":"PRG08/#22-definicio-dels-objectes","title":"2.2. Definici\u00f3 dels objectes","text":"<p>Abans hem vist com crear en Java la classe (\"plantilla\") Alumne. Ara volem guardar les dades de cada alumne. Per a aix\u00f2 crearem objectes (\"fotocopies\") a partir d'eixa classe.</p> <p>En Java, esta definici\u00f3 d'objectes es fa amb la paraula clau new (la que usem per als vectors, ja que tamb\u00e9 s\u00f3n objectes) i indicant la classe a partir de la qual es creen.</p> <p></p> Exemple b\u00e0sic Java<pre><code>class Alumne{\n    int num;\n    String nom;\n    String cicle;\n    int curs;\n}\n\nclass ProjecteMeu{\n    public static void main (String args[]){\n        Alumne alu1 = new Alumne(); //(1)!\n        Alumne alu2 = new Alumne();\n        Alumne alu3 = new Alumne();\n    }\n}\n</code></pre> <ol> <li>Amb la paraula clau new creem un objecte de la classe Alumne i el guardem en la variable alu1. A partir d'ara, alu1 \u00e9s un objecte de la classe Alumne. El mateix per a alu2 i alu3.</li> </ol> Exercici 2. Definir objectes en Java <p>En el main del projecte Proves, crea els objectes corresponents a les classes que has definit en l'exercici anterior. Practica amb les 2 forme vistes.</p>"},{"location":"PRG08/#23-us-dels-atributs-dels-objectes","title":"2.3. \u00das dels atributs dels objectes","text":"<p>Ja hem creat la classe (el nou \"tipus\") i els objectes (\"variables\" d'eixe nou tipus). Ara anem a utilitzar eixos objectes.</p> <p>Per a accedir als atributs d'un objecte, utilitzarem l'operador punt (.). Aix\u00ed, per a accedir a l'atribut num de l'objecte alu1, farem alu1.num.</p> Exemples d'usos d'atributs Java<pre><code>...\n\nSystem.out.println(\"INTRODUEIX LES DADES DE L'ALUMNE:\");\nSystem.out.print(\"N\u00famero: \"); alu1.num = funcionsIO.readIntC(); //(1)!\nSystem.out.print(\"Nom: \"); alu1.nom = funcionsIO.readString();\nSystem.out.print(\"Curs: \"); alu1.curs = funcionsIO.readIntC();\n\nalu1.cicle = \"DAM\"; //(2)!\n\n...\n\nif(alu1.curs == 1 &amp;&amp; totAprovat){ //(3)!\n    System.out.println(\"L'alumne \" + alu1.nom + \" passa a segon curs.\"); //(4)!\n    alu1.curs++; //(5)!\n}\n</code></pre> <ol> <li>Assignaci\u00f3 per teclat</li> <li>Assignaci\u00f3 directa</li> <li>Consulta</li> <li>Concatenaci\u00f3, impressi\u00f3...</li> <li>Autoincrement</li> </ol> <p>Veiem que els atributs dels objectes es poden utilitzar com qualsevol variable \"normal\": assignar valors, llegir-los, mostrar-los per pantalla, operar amb ells...</p> Exemple complet de definici\u00f3 de classe, objectes i \u00fas dels atributs Java<pre><code>import java.io.*;\n\n//******** CLASSE Alumne ********\nclass Alumne{ //(1)!\n    String nom;\n    String cognom;\n    String[] telefons = new String[3];\n    int edat;\n}\n\n//******** CLASSE P\u00fablica Principal ********\npublic class NomPrograma{\n    public static void main(String[] args){\n        // Definicici\u00f3 d'objectes\n        Alumne a1 = new Alumne();\n        Alumne a2 = new Alumne(); //(2)!\n\n        // \u00das dels atributs\n        a1.nom = \"Miquel Josep\";\n        a1.cognom = \"Garcia\"; //(3)!\n        a1.edat = 17;\n        a1.telefons[0] = \"96282287\";\n        a1.telefons[1] = \"96283613\";\n\n        System.out.println(a1.nom + \" \" + a1.cognom);\n\n        for(int i=0; i&lt;a1.telefons.length; i++){\n            System.out.println(a1.telefons[i]);\n        }\n    } \n}\n</code></pre> <ol> <li>Definirem la classe fora de la classe principal (encara que en un futur cada classe anir\u00e0 en un fitxer diferent).</li> <li>Crearem els objectes a1 i a2 de la classe Alumne dins del main (o de qualsevol m\u00e8tode).</li> <li>Assignarem els atributs.</li> </ol> Exercici 3. \u00das dels atributs dels objectes <p>En el projecte Proves assigna valors als atributs dels objectes que has creat i mostra'ls per pantalla.</p>"},{"location":"PRG08/#24-us-dels-propis-objectes","title":"2.4. \u00das dels propis objectes","text":"<p>Ja hem vist com treballar amb els atributs dels objectes. Ara vorem com tractar els objectes en conjunt (sense indicar els atributs).</p> <p>Quan usem un objecte (sense indicar cap atribut), estarem accedint a l'adre\u00e7a de mem\u00f2ria on estan es dades de l'objecte, igual que passa en els arrays.</p> <p>Exemple</p> Java<pre><code>class Alumne{\n    int num;\n    int edat;\n    int curs;\n}\n\nclass ProgramaPrincipal{\n    public static void main(String[] args){\n\n        Alumne a1 = new Alumne(); // IMAGINEM QUE SE LI ASSIGNA L'ADRE\u00c7A 1002\n        Alumne a2 = new Alumne(); // IMAGINEM QUE SE LI ASSIGNA L'ADRE\u00c7A 1007\n\n        a1.num = 5;\n        a1.edat = 18;\n        a1.curs = 1;\n\n        a2.num = 6;\n        a2.edat = 22;\n        a2.curs = 1;\n        ...\n    }\n}\n</code></pre> <p></p> <p>Per tant, hem d'anar en compte quan fem coses com:</p> Java<pre><code>if(alu_1 == alu_2) ... //(1)!\nalu_1 = alu_2;\nSystem.out.println(alu_1);\n</code></pre> <ol> <li>Segurament no estarem fent all\u00f2 que pretenem ja que estem comparant les adreces de mem\u00f2ria dels objectes (1002 != 1007), no els seus valors.</li> </ol>"},{"location":"PRG08/#241-copiar-objectes","title":"2.4.1. Copiar objectes","text":"<p>Qu\u00e8 passa si copiem objectes amb alu_1 = alu_2?</p> <p></p> <p>PROBLEMA: En realitat, el que estem fent \u00e9s copiar l'adre\u00e7a de mem\u00f2ria, no les dades. Per tant, si canviem un atribut d'un dels objectes, canviarem l'atribut de l'altre objecte tamb\u00e9.</p> <p>SOLUCI\u00d3: Si el que vol\u00edem fer \u00e9s una c\u00f2pia dels valors de l'objecte, haur\u00edem de copiar els atributs un a un.</p> Java<pre><code>alu_1.num = alu_2.num;\nalu_1.edat = alu_2.edat;\nalu_1.curs = alu_2.curs;\n</code></pre> <p></p>"},{"location":"PRG08/#242-comparar-objectes","title":"2.4.2. Comparar objectes","text":"<p>Qu\u00e8 passa si comparem objectes amb if(alu_1 == alu_2)?</p> <ul> <li>Nom\u00e9s ser\u00e0 true si els dos objectes apunten a la mateixa adre\u00e7a de mem\u00f2ria.</li> </ul> <p></p> <ul> <li>Per\u00f2 si apunten a adreces diferents, encara que tinguin els mateixos valors, ser\u00e0 false.</li> </ul> <p></p> <p>SOLUCI\u00d3: Si el que vol\u00edem fer \u00e9s comparar els valors dels atributs, haur\u00edem de comparar-los un a un.</p> Java<pre><code>if(alu_1.num == alu_2.num &amp;&amp; alu_1.edat == alu_2.edat &amp;&amp; alu_1.curs == alu_2.curs){\n    ...\n}\n</code></pre> <p>Representaci\u00f3 gr\u00e0fica dels objectes</p> <p>Per a recalcar que un objecte no guarda directament els valors dels seus atributs sin\u00f3 una adre\u00e7a a elles, a partir d'ara ho representarem gr\u00e0ficament amb una fletxa.</p> <p>Per exemple, tenim 3 objectes de tipus Alumne. Imaginem que en un moment donat tenim els seg\u00fcents valors:</p> <p></p>"},{"location":"PRG08/#243-passar-un-objecte-a-una-funcio","title":"2.4.3. Passar un objecte a una funci\u00f3","text":"<p>Podem passar un objecte com a par\u00e0metre a una funci\u00f3. I estarem passant-lo per refer\u00e8ncia (no per valor). Com ja vam vore, aix\u00f2 significa que si canviem els valors dels atributs de l'objecte dins de la funci\u00f3, aquests canvis es veuran fora de la funci\u00f3.</p> <p></p> Exercici 4. Passar objectes a procediments <p>En el projecte Proves, crea els procediments llegirCD i imprimirCD semblants a l'exemple anterior, passant un CD com a par\u00e0metre. Crida-les des del main.</p>"},{"location":"PRG08/#244-retornar-un-objecte","title":"2.4.4. Retornar un objecte","text":"<p>Una funci\u00f3 tamb\u00e9 pot retornar un objecte. Veiem un exemple on tenim dos funcions que retornen un objecte. Una que no li passa cap par\u00e0metre i una altra que s\u00ed.</p> <p></p> Exercici 5 <p>Modifica el projecte Proves:</p> <p>Crea el procediment incrementaAny, al qual li passes una data (de la classe Data) i t'incrementa l'any en 1 (per\u00f2 no mostra res). \u00c9s a dir, cal fer el seg\u00fcent:</p> <ul> <li>Fes el procediment al qual li passes com a par\u00e0metre una data (dis-li de nom: data). Incrementa en 1 l'any de la data.</li> <li>En el main, crea una data (dis-li de nom: d1), posa-li valors i crida al procediment anterior passant-li la data d1.</li> <li>Comprova que l'any de la data d1 ha canviat (mostra-ho per pantalla).</li> </ul> Exercici 6. Retornar objectes <p>Modifica el projecte Proves:</p> <p>Funci\u00f3 incrementaAnyEnDataNova, a la qual li passes una data (de la classe Data) i et retorna una nova data amb l'any incrementat en 1. \u00c9s a dir, cal fer el seg\u00fcent:</p> <ul> <li>Crear una altra data, de nom dNova (declarar-la i reservar-li mem\u00f2ria amb new).</li> <li>Copiar en eixa altra data (dNova) les dades de la data del par\u00e0metre per\u00f2 amb un any m\u00e9s.</li> <li>Retornar eixa nova data.</li> </ul> <p>En el main crea una data (dis-li de nom: dOrigen), posa-li valors i crida a la funci\u00f3 incrementaAnyEnDataNova passant-li eixa data com a par\u00e0metre. Recorda que haur\u00e0s d'arreplegar la data retornada. Per a aix\u00f2, caldr\u00e0 crear-te pr\u00e8viament una altra data (dis-li de nom: dDesti), la qual no caldr\u00e0 que li reserves mem\u00f2ria amb el new.</p> <p>Comprova en el main que la nova data (dDesti) t\u00e9 els valors esperats: els mateixos que dOrigen per\u00f2 amb un any m\u00e9s (mostra-ho per pantalla).</p>"},{"location":"PRG08/#3-classes-niuades","title":"3. Classes niuades","text":"<p>Ja hem vist que una classe \u00e9s una estructura que cont\u00e9 distints atributs. Eixos atributs poden ser variables (d'un cert tipus)... o objectes (d'una certa classe).</p> <p>\u00c9s com si tingu\u00e9rem una classe dins d'altra. Eixa classe de dins es diu que \u00e9s una classe niuada.</p> <p></p> <p>IMPLEMENTACI\u00d3</p> <p>Primer crearem la classe Domicili:</p> Java<pre><code>class Domicili{ //(1)!\n    String carrer;\n    int codPostal;\n    String poble;\n}\n</code></pre> <ol> <li>Esta classe podr\u00e0 estar definida dins la classe Client per\u00f2 nosaltres la posarem fora (per si volgu\u00e9rem crear objectes de la classe Domicili).</li> </ol> <p>A continuaci\u00f3 crearem la classe Client:</p> Java<pre><code>class Client{\n    int dni;\n    String nom;\n    Domicili dom; //(1)!\n    float deute;\n}\n</code></pre> <ol> <li>O b\u00e9: Domicili dom = new Domicili();</li> </ol> <p>Ara vorem la difer\u00e8ncia d'indicar o no la reserva de mem\u00f2ria per a la subclasse.</p> <ol> <li>Sense instanciar l'atribut objecte (\u00e9s a dir, sense new):</li> </ol> <p></p> <ol> <li>Instanciant l'atribut objecte (\u00e9s a dir, amb new):</li> </ol> <p></p> <p>A la vista d'aix\u00f2... quan definirem un atribut objecte amb el new i quan sense new?</p> <ul> <li> <p>Si anem a tindre molts objectes de la classe Client per\u00f2 nom\u00e9s a uns pocs d'ells els posarem domicili, reservarem mem\u00f2ria per al domicili nom\u00e9s als que ho necessiten. Per tant, sense new.</p> </li> <li> <p>Si tots els objectes de la classe Client han de tindre un domicili, reservarem mem\u00f2ria per a tots ells. Per tant, amb new.</p> </li> </ul> <p></p> Exercici 7. Classes niuades <p>En el projecte Proves:</p> <ol> <li> <p>Crea la classe Cercle amb els atributs radi, colorVora i colorDins, tenint en compte que els colors han de ser objectes de la classe Color que ja estava definida. Fes-ho de la primera forma que hem vist: la que en la definici\u00f3 de la classe NO es reserva mem\u00f2ria per a la subclasse.</p> </li> <li> <p>Despr\u00e9s, en el main crea l'objecte cercle1 (de la classe Cercle) i ompli'l de dades qualseol.</p> </li> <li> <p>Mostra per pantalla les dades de cercle1.</p> </li> <li> <p>Executa el projecte per vore que funciona.</p> </li> </ol> Exercici 8 <p>Crea el projecte Institut. A continuaci\u00f3:</p> <ol> <li> <p>Copia en ell les classes NomComplet, Domicili i TelFix (que tenies en el projecte Proves).</p> </li> <li> <p>Crea la classe Alumne que tinga 4 atributs: un nom complet, un domicili, un tel\u00e8fon del pare i un tel\u00e8fon de la mare, basant-te en les classes anteriors. \u00c9s a dir: caldr\u00e0 fer \u00fas de les classes niuades. Com de tots els alumnes \u00e9s normal guardar eixes dades, ho farem de la segona forma que hem vist: la que en la definici\u00f3 de la classe es reserva mem\u00f2ria per a la subclasse.</p> </li> <li> <p>Crea la classe Ordinador, sabent que de cadascun voldrem guardar el n\u00famero de s\u00e8rie (enter), la cpu (String), ram (enter) i dd (enter) i, a m\u00e9s, qui \u00e9s l'alumne que l'utilitza. L'alumne ser\u00e0 un objecte de la classe Alumne. \u00c9s a dir: cadr\u00e0 fer \u00fas de les classes niuades. Com no tots els ordinadors tenen un alumne assignat, ho farem de la primera forma que hem vist: la que en la definici\u00f3 de la classe NO es reserva mem\u00f2ria per a la subclasse.</p> </li> </ol> Exercici 9 <p>En el projecte Institut, en el main:</p> <ol> <li> <p>Crea 2 alumnes (alu1 i alu2) i ompli'ls de dades qualsevol.</p> </li> <li> <p>Crea 3 ordinadors (ord1, ord2 i ord3), sense omplir-los de dades.</p> </li> <li> <p>Ompli ord1 de dades qualsevol per\u00f2 sense assignar-li cap alumne.</p> </li> <li> <p>Ompli ord2 de dades qualsevol assignant-li les dades d'un nou alumne.</p> </li> <li> <p>Assigna a l'ordinador 1 l'alumne 2.</p> </li> <li> <p>Canvia el n\u00famero de tel\u00e8fon del pare de l'alumne 2 (per exemple 5555555)</p> </li> <li> <p>Mostra per pantalla el tel\u00e8fon del pare de l'alumne que est\u00e0 usant l'ordinador 1. No ho faces a partir de l'alumne 2, sin\u00f3 a partir de l'ordinador 1. Comprova que ha canviat (ha de mostrar 5555555).</p> </li> <li> <p>Posa un breakpoint en el punt 7 i observa les variables del programa per comprovar com s'han anat omplint els objectes.</p> </li> </ol>"},{"location":"PRG08/#4-vectors-dobjectes","title":"4. Vectors d'objectes","text":"<p>L'\u00fas simultani de vectors i objectes ens proporciona una eina potent per a guardar i manipular informaci\u00f3.</p> <p>Per exemple, suposem que volem guardar les dades dels N clients d'una empresa:</p> 0 1 2 ... N-1 dni 10 20 30 nom Pep Pepa Pepet deute 500.0 0.0 200.0 <p>Abans de vore este tema, hagu\u00e9rem implementat aix\u00f2 com 3 vectors paral\u00b7lels:</p> <p></p> <p>Per\u00f2 ara ho implementarem com un \u00fanic vector... de clients. \u00c9s a dir, d'objectes de la classe Client:</p> <p></p> <p>Compte!</p> <p>El vector \u00e9s d'objectes. Recordem que un objecte \u00e9s nom\u00e9s una refer\u00e8ncia i cal reservar mem\u00f2ria per a eixe objecte. Per tant, el new del vector d'objectes nom\u00e9s reserva espai per a les referencies i caldr\u00e0 fer un new per a cada objecte del vector. Ara ho vorem amb la implementaci\u00f3 d'un exemple.</p> Exemple de creaci\u00f3 i \u00fas d'un vector d'objectes (100 clients) <p></p> <p>NOTA: tamb\u00e9 es poden crear matrius n-dimensionals d'objectes, o objectes que tenen alguna matriu com a atribut...</p> Exercici 10. Arrays d'objectes <p>BIBLIOTECA</p> <p>Una biblioteca vol emmagatzemar informaci\u00f3 de cada llibre que t\u00e9:</p> <ul> <li>Codi de refer\u00e8ncia (alfanum\u00e8ric)</li> <li>Autors (m\u00e0xim, 3)</li> <li>T\u00edtol</li> <li>Editorial</li> <li>Any de publicaci\u00f3</li> </ul> <ol> <li>Implementa l'estructura necess\u00e0ria per a guardar 100 llibres.</li> <li>Reserva mem\u00f2ria per a cadascun d'eixos llibres.</li> <li>Dona d'alta un llibre qualsevol.</li> </ol> Exercici 11 <p>LLOGUER DE COTXES</p> <p>Una empresa de lloguer de cotxes vol tindre guardada la informaci\u00f3 de cadascun dels cotxes:</p> <ul> <li>Matr\u00edcula (lletres i n\u00famero)</li> <li>Marca</li> <li>Model</li> <li>Data de compra (una la classe Data que ja tenim definida)</li> <li>Kil\u00f2metres</li> </ul> <ol> <li>Implementa l'estructura necess\u00e0ria per a guardar 100 cotxes (per\u00f2 no reserves mem\u00f2ria per als cotxes).</li> <li>Fes un bucle per a omplir les dades dels cotxes.</li> <li>Mostra les dades de tots els cotxes.</li> </ol> Exercici 12 <p>EMPRESA CONSTRUCTORA</p> <p>L'empresa constructora \"MACA S.A.\" promou la construcci\u00f3 de l'edifici de luxe \"Xequin-Pis\". L'edifici est\u00e0 organitzat en 6 escales (de l'A a l'F). Per cada escala hi ha 8 plantes, i en cada planta hi han 5 portes. La constructora vol tindre registrat de cada vivenda els metres quadrats, habitacions i preu. A m\u00e9s, si la vivenda est\u00e0 venuda, tamb\u00e9 vol guardar el nom i NIF del nou propietari.</p> <ol> <li>Definix la classe Vivenda amb les variables: m2, q_hab, preu, nom i nif.</li> <li>Definix edifici (al main), com una matriu tridimensional de vivendes. Utilitza les constants necess\u00e0ries per a establir les dimensions de la matriu.</li> <li>Definix el procediment contruirVivenda, al qual se li passa com a par\u00e0metre l'edifici. El procediment demanar\u00e0 per teclat la identificaci\u00f3 de la vivenda i les caracter\u00edstiques i les guardar\u00e0.</li> <li>Definix el procediment comprarVivenda, al qual se li passa com a par\u00e0metre l'edifici. El procediment demanar\u00e0 per teclat la identificaci\u00f3 de la vivenda. Si est\u00e0 fabricada (m2 &gt; 0) i per vendre (camp propietari buit), es demanaran les dades del propietari i es guardaran en el lloc corresponent.</li> <li>Definix el procediment propietats, al qual se li passa com a par\u00e0metre l'edifici i el nif d'una persona, i ha de mostrar les dades de totes les seues vivendes.</li> <li>Crea al main l'aplicaci\u00f3 principal amb un bucle i un men\u00fa amb les opcions:<ol> <li>Construir vivenda</li> <li>Comprar vivenda</li> <li>Mostrar propietats d'alg\u00fa</li> <li>Eixir</li> </ol> </li> </ol> Exercici 13 <p>TALLER DE COTXES</p> <p>En un taller de cotxes, cada volta que un treballador acaba una feina, inserix en l'ordinador el seu nom, la data (dia, mes i any) i quantes hores i minuts ha estat treballant.</p> <ol> <li>Defineix la classe Feina amb les variables: nom, dia, mes, any, hores i minuts.</li> <li>El programa ser\u00e0 un bucle amb un men\u00fa:<ol> <li>Afegir feina</li> <li>Llistar feines d'un treballador</li> <li>Eixir</li> </ol> </li> </ol> <p>Opci\u00f3 1: Demanar dades d'una feina i afegir-la en una llista de feines.     - Si ho fas amb un vector de feines, caldr\u00e0 tindre una variable on indicar quantes feines tenim en cada moment, per a saber on posar la nova feina.     - Per\u00f2 seria millor un ArrayList de feines, ja que realment \u00e9s una llista perqu\u00e8 va variant la grand\u00e0ria al llarg del programa.</p> <p>Opci\u00f3 2: Demanar el nom del treballador. Es mostrar\u00e0 per pantalla una l\u00ednia per cada feina seua (amb les dades corresponents) i, a la dreta, l'import a cobrar corresponent, a 40\u20ac l'hora. Al final del llistat, es posar\u00e0 la quantitat d'hores i minuts totals, aix\u00ed com l'import total del treballador.</p> Exercici 14 <p>HORARIS DE L'INSTITUT</p> <p>Volem crear una aplicaci\u00f3 que ens permeta introduir les dades dels horaris dels grups de l'institut.</p> <p>Per a cada grup volem guardar el codi del grup i el seu horari. En este horari ha de guardar informaci\u00f3 de cada sessi\u00f3 de la setmana (5 dies x 6 franges hor\u00e0ries).No cal guardar en cap lloc els dies de la setmana ni les franges hor\u00e0ries.</p> <p>Per a cada sessi\u00f3 caldr\u00e0 guardar el codi del m\u00f2dul (assignatura), el nom del professor i el n\u00famero de l'aula on s'impartir\u00e0 la classe.</p> <p>Tria l'estructura de dades m\u00e9s adient per a emmagatzemar tota eixa informaci\u00f3.</p> <p>El programa tindr\u00e0 un men\u00fa amb estes opcions:</p> <ol> <li>Crear horari</li> <li>Mostrar horari</li> <li>Modificar horari</li> </ol> <p>Caldr\u00e0 definir i utilitzar adequadament estes seg\u00fcents:</p> <ul> <li>getGrup. Se li passa la llista de grups i un codi de grup. Retornar\u00e0 l'objecte del grup corresponent. O null si no l'ha trobat.</li> <li>creaGrup. Se li passa la llista de grups. Es demanar\u00e0 per teclat un codi de grup. Si ja est\u00e0 el grup en la llista (crida a getGrup), avisar\u00e0. Si no, per cada sessi\u00f3 de la setmana es preguntar\u00e0 el m\u00f2dul, qui l'imparteix i a quina aula, i afegir\u00e0 eixe grup a la llista. Retornar\u00e0 l'objecte del grup creat (o null si no l'ha creat).</li> <li>mostraHorari. Se li passa la llista de grups, el codi de grup i quina dada d'estes 3 volem mostrar: (M)\u00f2dul / (P)rofe / (A)ula. Es mostrar\u00e0 l'horari per pantalla (en forma de matriu) amb la informaci\u00f3 corresponent. SI no existeix el grup retornar\u00e0 false.</li> <li>modificaHorari. Se li passa la llista de grups i el codi del grup que volem modificar. Si existeix, es mostrar\u00e0 el seu horari i es preguntar\u00e0 per dia de la setmana (1 a 5) i hora (1 a 6) que es vol modificar. A continuaci\u00f3 es preguntar\u00e0 l'assignatura, el professor i l'aula a canviar (si alguna d'estes dades es deixa en blanc, no es modificar\u00e0). A continuaci\u00f3 s'actualitzaran les dades corresponents. Si no existeix el grup retornar\u00e0 false.</li> </ul> <p>A m\u00e9s d'eixes funcions, crea-te'n altres si creus que et fan falta.</p>"},{"location":"PRG09/","title":"UD9. Programaci\u00f3 Orientada a Objectes. Classes amb m\u00e8todes","text":""},{"location":"PRG09/#1-introduccio","title":"1. Introducci\u00f3","text":"<p>Ja digu\u00e9rem que la POO (Programaci\u00f3 Orientada a Objectes) \u00e9s una metodologia que basa l'estructura dels programes en objectes. I que els objectes es classifiquen en classes. I que de cada classe ens poden interessar determinades caracter\u00edstiques i operacions per a descriure cadascun dels seus objectes.</p> <p>Per tant, per a descriure una classe necessitem:</p> <ul> <li>Atributs o caracter\u00edstiques (Vist al tema anterior)</li> <li>M\u00e8todes o operacions (Ho vorem en este tema)</li> </ul> <p>Exemple: la classe Casa</p> <ul> <li>Atributs: Quantitat de pisos, al\u00e7ada total en metres, color de la fa\u00e7ana, quantitat de finestres, quantitat de portes, carrer i n\u00famero on est\u00e0 ubicada...</li> <li>M\u00e8todes: Contruir-la, destruir-la, pintar la fa\u00e7ana, obrir una nova finestra, pintar habitacions...</li> </ul> <p>Evidentment, a partir dels requeriments de l'aplicaci\u00f3, definirem les classes amb els seus atributs i m\u00e8todes.</p> <p>No ve mal recordar els conceptes de la POO</p> <p></p>"},{"location":"PRG09/#2-estructura-dun-programa-oo","title":"2. Estructura d'un programa OO","text":"<p>Exemple de l'estructura d'un programa OO</p> Classe AlumnePrograma principal Java<pre><code>public class Alumne{\n    // ATRIBUTS\n    String nom;\n    int edat;\n\n    // M\u00c8TODES\n    void setNom(String n){ this.nom = n; }\n    void setEdat(int e){ this.edat = e; }\n    String getNom(){ return this.nom; }\n    int getEdat(){ return this.edat; }\n    String dades(){ return this.nom + \" \" + this.edat; }\n    void augmentarEdat(int anys){ this.edat += anys; }\n\n    // CONSTRUCTOR d'objectes de la classe Alumne\n    Alumne(String n, int e){\n        this.nom = n;\n        this.edat = e;\n    }\n}\n</code></pre> Java<pre><code>public class Main{\n    public static void main(String[] args){\n        // DEFINICI\u00d3 I \u00daS D'OBJECTES\n        Alumne a1 = new Alumne(\"Pep\", 18);\n        if(a1.getEdat() &gt;= 18){\n            System.out.println(a1.getNom() + \" pot eixir\");\n        }\n        a1.setEdat(20);\n        a1.augmentarEdat(3);\n        System.out.println(a1.dades());\n    }\n}\n</code></pre> Exercici 1. Introductoris <p>Per vore si t'han quedat clars els conceptes d'objecte, classe, atributs, m\u00e8todes i estat, pensa en els distints objectes que solen apar\u00e9ixer en un programa de marcianets. Quines classes d'objectes apareixen? Apareixen molts objectes de la mateixa classe? Pensa en alguns atributs i alguns m\u00e8todes per a cada classe, aix\u00ed com l'estat que podria tindre algun objecte.</p> <p></p> Exercici 2 <p>Al llarg del tema farem exercicis sobre un concessionari per a tindre un control dels vehicles que ven. De moment crea una aplicaci\u00f3 anomenada Concessionari. All\u00ed crea la classe Cotxe, en un fitxer diferent al de la classe principal on est\u00e0 el main. De moment crea la classe sense atributs ni m\u00e8todes (ja anirem ampliant-la conforme anem veient m\u00e9s temari).</p>"},{"location":"PRG09/#3-definicio-duna-classe","title":"3. Definici\u00f3 d'una classe","text":""},{"location":"PRG09/#31-sintaxi","title":"3.1. Sintaxi","text":"Java<pre><code>&lt;modeD'Acc\u00e9s&gt; class nomClasse{\n    // ---------- DEFINICI\u00d3 D'ATRIBUTS ----------\n    &lt;modeD'Acc\u00e9s&gt; tipus atribut_1;\n    ...\n    &lt;modeD'Acc\u00e9s&gt; tipus atribut_N;\n    // ---------- DEFINICI\u00d3 DE M\u00c8TODES ----------\n    &lt;modeD'Acc\u00e9s&gt; tipus m\u00e8tode_1 (llista_de_par\u00e0metres){\n        // Cos del m\u00e8tode\n    }\n    ...\n    &lt;modeD'Acc\u00e9s&gt; tipus m\u00e8tode_M (llista_de_par\u00e0metres){\n        // Cos del m\u00e8tode\n    }\n    // ---------- DEFINICI\u00d3 DE CONSTRUCTORS ----------\n    &lt;modeD'Acc\u00e9s&gt; nomClasse (llista_de_par\u00e0metres){\n        // Inicialitzaci\u00f3 dels atributs\n    }\n}\n</code></pre>"},{"location":"PRG09/#32-modes-dacces-de-la-classe","title":"3.2. Modes d'acc\u00e9s de la classe","text":"<p>Els modes d'acc\u00e9s de la classe poden ser una combinaci\u00f3 d'entre les seg\u00fcents:</p> <ul> <li>public / (res): s'utilitza per a indicar des d'on es pot utilitzar.<ul> <li>Si no es posa cap mode d'acc\u00e8s, eixa classe nom\u00e9s podr\u00e0 ser accedida des de fitxers del mateix paquet on est\u00e0 la classe.</li> <li>Si es posa public la classe podr\u00e0 ser usada des de qualsevol lloc de l'aplicaci\u00f3. En un fitxer .java nom\u00e9s pot haver una classe p\u00fablica i ha de tindre el mateix nom que el fitxer (sense l'extensi\u00f3, clar).</li> </ul> </li> <li>abstract / final / (res): s'utilitza per a l'her\u00e8ncia de classes (ja ho vorem).<ul> <li>Si una classe \u00e9s abstract no podrem crear objectes d'eixa classe, sin\u00f3 que s'hauran de definir classes filles d'eixa classe.</li> <li>Si una classe \u00e9s final no es podran crear subclasses d'ella.</li> </ul> </li> </ul>"},{"location":"PRG09/#33-atributs","title":"3.3. Atributs","text":"<p>Com ja hem vist al tema anterior, s\u00f3n les variables membre que caracteritzen l'objecte. El seu valor en un moment donat indica l'estat de l'objecte.</p> <p>Esta \u00e9s la sintaxi de Java per a definir un atribut:</p> <p><code>&lt;nivellD'Acc\u00e9s&gt; &lt;tipusDeDades&gt; nomAtribut;</code></p>"},{"location":"PRG09/#331-tipus-de-dades-dels-atributs","title":"3.3.1. Tipus de dades dels atributs","text":"<p>Recordem que el tipus de dades dels atributs pot ser qualsevol: enter, real, l\u00f2gic, car\u00e0cter, cadena, vector, matriu... o una altra classe (classes niuades).</p>"},{"location":"PRG09/#332-nivell-dacces-dels-atributs-i-dels-metodes","title":"3.3.2. Nivell d'acc\u00e9s dels atributs (i dels m\u00e8todes)","text":"<p>Els atributs (i m\u00e8todes) sempre s\u00f3n accessibles des de la classe on estan definits per\u00f2 podem fer que tamb\u00e9 puguen ser accessibles des d'altres llocs. Per a fer aix\u00f2, davant de la definici\u00f3 dels atributs posarem un modificador que ens indicar\u00e0 el nivell d'acc\u00e9s que t\u00e9 cada atribut (o m\u00e8tode):</p> <p></p> <p>Consell</p> <p>Els atributs solen ser privats, i la classe que els inclou, si cal, donar\u00e0 acc\u00e9s a ells mitjan\u00e7ant els m\u00e8todes (generalment p\u00fablics) de lectura i modificaci\u00f3 d'eixos atributs. \u00c9s el que es coneix com a encapsulament (que vorem en detall m\u00e9s endavant).</p> <p>Per si no ha quedat clar, a la seg\u00fcent taula tenimi resumits els diferents nivells d'acc\u00e9s dels atributs i m\u00e8todes:</p> <p></p> Exercici 3 <p>Posa els seg\u00fcents atributs a la classe Cotxe: numBastidor, matricula, marca, model, color i preu. Tamb\u00e9 l'atribut privat revisions (vector de 5 booleans).</p>"},{"location":"PRG09/#34-metodes","title":"3.4. M\u00e8todes","text":"<p>S\u00f3n les operacions (procediments o funcions) que s'apliquen sobre els objectes. Entre altres coses, permeten canviar el seu estat (valor dels atributs), fer operacions sobre el seu estat, consultes... per\u00f2 tenen un funcionament un poc diferent ja que actuen sobre un objecte. Veiem com invocar\u00edem un m\u00e8tode i com es defineix:</p>"},{"location":"PRG09/#341-us-dels-metodes","title":"3.4.1. \u00das dels m\u00e8todes","text":"<p>Despr\u00e9s de crear un objecte (en el main o on siga), si volem fer alguna cosa sobre ell, \"li enviarem un missatge\": indicarem el nom de l'objecte, un punt, i el missatge (nom del m\u00e8tode amb els par\u00e0metres). Per exemple, si tenim un objecte de la classe Cercle (on tindr\u00e0 el radi, etc), podr\u00edem fer:</p> Java<pre><code>public class Main{\n    public static void main(String[] args){\n        Cercle c1 = new Cercle();\n        c1.radi = 10;\n        System.out.println(\"L'\u00e0rea del cercle \u00e9s \" + c1.area()); //(1)!\n        c1.incrementaRadi(3); //(2)!\n        ...\n    }\n}\n</code></pre> <ol> <li>Missatge a c1: \"c1, dona'm la teua \u00e0rea\".</li> <li>Missatge a c1: \"c1, incrementa el teu radi en 3\".</li> </ol>"},{"location":"PRG09/#342-definicio-dels-metodes","title":"3.4.2. Definici\u00f3 dels m\u00e8todes","text":"Java<pre><code>public class Cercle{\n    // ---------- ATRIBUTS ----------\n    int radi;\n\n    // ---------- M\u00c8TODES ----------\n    int diametre(){\n        return (2 * this.radi); //(1)!\n    }\n    float area(){\n        return (Math.PI * this.radi * this.radi);\n    }\n    float per\u00edmetre(){\n        return (2 * Math.PI * this.radi);\n    }\n    void incrementaRadi(int increment){\n        this.radi += increment;\n    }\n}\n</code></pre> <ol> <li>El this \u00e9s una refer\u00e8ncia a cercle1 (l'objecte de la crida). Per tant, usarem el this per a accedir als atributs, encara que \u00e9s opcional.</li> </ol>"},{"location":"PRG09/#343-modificador-static-dels-metodes","title":"3.4.3. Modificador static dels m\u00e8todes","text":"<p>Recordem que sempre pos\u00e0vem la paraula static en la declaraci\u00f3 de funcions i procediments. Per\u00f2 observem que ara no l'estem posant.</p> <p>Quan posarem el modificador static en un m\u00e8tode?</p> <p>M\u00e8tode sense static: Quan volem que s'invoque amb el nom de l'objecte:</p> Java<pre><code>cercle1.diametre(); //(1)!\n</code></pre> <ol> <li>Posem el nom de l'objecte davant del m\u00e8tode.</li> </ol> <p>Dins del m\u00e8tode podrem accedir als atributs de l'objecte (amb this):</p> Java<pre><code>class Cercle{\n    // ---------- ATRIBUTS ----------\n    int radi;\n\n    // ---------- M\u00c8TODES ----------\n    int diametre(){  //(1)!\n        return (2 * this.radi);\n    }\n}\n</code></pre> <ol> <li>Si li pos\u00e0rem static int diametre() ens donaria error de compilaci\u00f3 (ja que usa el this): non-static variable cannot be referenced from a static context</li> </ol> <p>M\u00e8tode amb static: Quan volem que s'invoquen sense cap objecte:</p> Java<pre><code>diametre(10); //(1)!\n\nTrigonometria.diametre(10); //(2)!\n</code></pre> <ol> <li>No posem res davant del m\u00e8tode.</li> <li>Si el m\u00e8tode est\u00e0 definit en altra classe, posarem el nom d'eixa classe.</li> </ol> <p>En estos casos no tindr\u00e0 sentit que el m\u00e8tode accedisca els atributs de la classe ja que no estem treballant en cap objecte.</p> Java<pre><code>static int diametre(int r){\n    return (2 * r); //(1)!\n}\n</code></pre> <ol> <li>Si en la funci\u00f3 us\u00e0rem this ens donaria error de compilaci\u00f3 ja que hem posat static.</li> </ol> Exercici 4. M\u00e8todes <p>Modifica la classe Cotxe que tens creada: afegix-li els seg\u00fcents m\u00e8todes:</p> <p></p> Exercici 5 <p>En el main, crea 2 cotxes (cotxe1 i cotxe2) i fes les seg\u00fcents operacions sobre ells usant els m\u00e8todes corresponents:</p> <ul> <li>Demana una matr\u00edcula per teclat i posa-li-la a cotxe1. \u00cddem al cotxe2.</li> <li>Pinta el cotxe1 de groc i el cotxe2 de lila.</li> <li>Passa la revisi\u00f3 del 1r any de cotxe1, i la del 2n any dels 2 cotxes. Comprova que no podries fer-ho sense el m\u00e8tode, ja que l'atribut revisions \u00e9s privat.</li> <li>Evita que done error si intentem passar un n\u00famero de revisi\u00f3 inexistent (fora de les dimensions del vector) per\u00f2 no ho faces en el main, sin\u00f3 en el m\u00e8tode corresponent.</li> <li>Mostra les dades del cotxe que ha passat m\u00e9s revisions.</li> </ul>"},{"location":"PRG09/#35-metodes-constructors","title":"3.5. M\u00e8todes constructors","text":"<p>Definici\u00f3</p> <p>Un constructor \u00e9s un m\u00e8tode especial que s'executa autom\u00e0ticament quan es crea un objecte (quan li assignem mem\u00f2ria amb el new).</p> <p>Utilitat</p> <p>Serveix, principalment, per a donar valors inicials als atributs de l'objecte.</p> <p>Exemple</p> AlumneMain Java<pre><code>// ---------- CLASSE Alumne ----------\npublic class Alumne{\n    // ATRIBUTS\n    String nom;\n    int edat;\n    String poble;\n\n    // M\u00c8TODES\n    ...\n\n    // CONSTRUCTORS\n    Alumne (String nom, int edat, String poble){ //(1)!\n        this.nom = nom;\n        this.edat = edat; //(2)!\n        this.poble = poble;\n    }\n\n    Alumne(){ //(3)!\n        this.poble = \"Tavernes\";\n    }\n}\n</code></pre> <ol> <li>Exemple de constructor amb par\u00e0metres.</li> <li>Hav\u00edem dit que l'\u00fas de this \u00e9s opcional, per\u00f2 no en este cas, ja que hi hauria conflicte de noms amb els par\u00e0metres.</li> <li>Exemple de contructor sense par\u00e0metres.</li> </ol> Java<pre><code>// ---------- CLASSE PRINCIPAL ----------\npublic class Main{\n    public static void main (String args[]){\n        // DEFINICI\u00d3 D'OBJECTES\n        Alumne a1 = new Alumne(\"Pep\", 18, \"Sueca\"); //(1)!\n        Alumne a2 = new Alumne(); //(2)!\n        Alumne a3 = new Alumne();\n        ...\n    }\n}\n</code></pre> <ol> <li>Invoquem el constructor de 2 par\u00e0metres.</li> <li>Invoquem el constructor sense par\u00e0metres.</li> </ol>"},{"location":"PRG09/#351-propietats-dels-constructors","title":"3.5.1. Propietats dels constructors","text":"<ul> <li>El nom del constructor sempre \u00e9s el nom de la classe.</li> <li>Rep zero o m\u00e9s par\u00e0metres d'entrada i els utilitza per a inicialitzar els valors dels atributs de l'objecte.</li> <li>No t\u00e9 par\u00e0metres de sortida (ni void ni cap altre tipus).</li> <li>No podem invocar els constructors directament des del programa principal. S'invocaran autom\u00e0ticament quan creem un objecte amb new.</li> <li>El constructor pot estar sobrecarregat: una classe pot tindre m\u00e9s d'un constructor (sempre amb el mateix nom) per\u00f2 amb diferent llista de par\u00e0metres. En eixe cas, des d'un constructor de la classe es pot cridar a un altre constructor de la mateixa classe (sempre en la primera l\u00ednia del constructor) amb this;</li> </ul> Java<pre><code>pucli class Alumne{\n    ...\n    // CONSTRUCTORS\n    Alumne (String nom){\n        System.out.println(\"Estic creant l'alumne \" + nom);\n        this.nom = nom;\n    }\n\n    Alumne (String nom, int edat, String poble){\n        this(nom); //(1)!\n        this.edat = edat;\n        this.poble = poble;\n    }\n}\n</code></pre> <ol> <li> <p>Estem cridant a l'altre constructor. Nom\u00e9s podem fer-ho en la primera instrucci\u00f3 del constructor.</p> </li> <li> <p>Constructor per defecte. Si no hem especificat cap constructor, es crea autom\u00e0ticament un constructor sense par\u00e0metres. No es veu, per\u00f2 est\u00e0:</p> </li> </ol> Java<pre><code>Alumne (){ //(1)!\n}\n</code></pre> <ol> <li>Per\u00f2 compte! Si creem un constructor amb par\u00e0metres, el constructor per defecte sense par\u00e0metres deixa d'existir.</li> </ol> Exercici 6 <p>Crea un constructor de la classe Cotxe que reba com a par\u00e0metres el n\u00famero de bastidor, la matr\u00edcula, marca, model, color i preu. El constructor deu inicialitzar l'estat de l'objecte amb estos. El vector de revisions es posar\u00e0 tot a fals. Vor\u00e0s que ara dona error la creaci\u00f3 dels cotxes anteriors que usaven el constructor per defecte. Qu\u00e8 ha passat? Passa a l'exercici seg\u00fcent per a solucionar-ho.</p> Exercici 7 <p>Totes les classes tenen un constructor per defecte (sense par\u00e0metres) per\u00f2 \"desapareix\" si creem altre constructor. Per tant, crea un constructor sense par\u00e0metres que no fa\u00e7a res. Comprova que ara ja no et dona error la creaci\u00f3 dels cotxes que usaven el constructor sense par\u00e0metres.</p> Exercici 8 <p>Crea un altre constructor de la classe Cotxe que reba com a par\u00e0metre el n\u00famero de bastidor, la marca i el model. No inicialitzar\u00e0 cap atribut, sin\u00f3 que cridar\u00e0 a l'altre constructor per a que ho fa\u00e7a ell, amb l'\u00fas de this(par\u00e0metres).</p> Exercici 9 <p>Crea altre constructor a la classe Cotxe, que reba nom\u00e9s la matr\u00edcula. El constructor haur\u00e0 de preguntar per pantalla els valors del n\u00famero de bastidor, marca i model. Igual que l'exercici anterior, intenta cridar al primer constructor amb this per a que s'encarregue dels seus atributs. Per qu\u00e8 no et deixa? Perqu\u00e8 la crida a un altre constructor ha de ser la primera instrucci\u00f3 del constructor. Per tant, no hi haur\u00e0 m\u00e9s remei que repetir el codi de la inicialitzaci\u00f3 dels atributs.</p>"},{"location":"PRG09/#352-crides-als-constructors-instanciacio-dobjectes","title":"3.5.2. Crides als constructors (instanciaci\u00f3 d'objectes)","text":"<p>Sempre hav\u00edem creat els objectes amb el new. Est\u00e0vem cridant al constructor per defecte (el que no t\u00e9 par\u00e0metres).</p> <p><code>NomClasse nomObjecte = new nomClasse();</code> {.center}</p> <p>Com ara ens hem creat els nostres constructors, podem usar-los posant els corresponents par\u00e0metres al new:</p> <p></p> <p>\u00c9s a dir, una instrucci\u00f3 d'instanciaci\u00f3 d'un objecte (crear-lo, amb el new) fa a\u00e7\u00f2:</p> <ul> <li>Reserva mem\u00f2ria per a l'objecte.</li> <li>Crida al constructor corresponent, qui sol omplir dades en eixa mem\u00f2ria.</li> <li>Assigna a l'objecte una refer\u00e8ncia (adre\u00e7a) a la mem\u00f2ria reservada.</li> </ul> <p>Nota</p> <p>L'String no \u00e9s un tipus sin\u00f3 una classe (per aix\u00f2 es posa en maj\u00fascula, a difer\u00e8ncia de int, char, float...) Per tant, si volem una variable de tipus cadena, el que haur\u00edem de fer \u00e9s declarar un objecte de la classe String.</p> <p><code>String nom = new String(\"Pep\");</code></p> <p>Ara b\u00e9, com sabem, hi ha una forma abreujada de fer-ho per als objectes de la classe String:</p> <p><code>String nom = \"Pep\";</code></p> Exercici 10. Crides als constructors <p>Crea els objectes cotxe3, cotxe4 i cotxe5, amb valors qualsevol, usant els 3 constructors de cotxes que has definit.</p> Exercici 11 <p>Demana per teclat les dades d'un cotxe (bastidor, marca, model, color i preu). Crea l'objecte cotxe6 passant-li com a par\u00e0metres al constructor les dades que s'han arreplegat per teclat. Nota: passa una cadena buida per a la matr\u00edcula.</p> Exercici 12 <p>Intenta crear l'objecte cotxe7 passant-li al constructor nom\u00e9s el preu. Per qu\u00e8 no et deixa?</p> Exercici 13 <p>Crea el vector cotxesAparador de 5 cotxes. Inicialitza'ls tots usant el constructor al qual nom\u00e9s se li passa la matr\u00edcula. Les matr\u00edcules aniran de l'1 al 5.</p>"},{"location":"PRG09/#36-destructors","title":"3.6. Destructors","text":"<p>Igual que es creen els objectes (amb new), com que ocupen espai en mem\u00f2ria, cal alliberar eixe espai quan ja no els necessitem.</p> <p>En molts llenguatges de programaci\u00f3, com C++, es poden definir els destructors per a que s'executen autom\u00e0ticament quan ja no es fa\u00e7a servir l'objecte. En Java, no es poden definir els destructors. Java t\u00e9 un sistema de recollida d'escombraries, el Garbage Collector que s'encarrega de recollir els objectes que ja no s'utilitzen. Per tant, el programador no ha de preocupar-se de l'alliberament de mem\u00f2ria.</p> <p></p> <p>Exemples d'alliberament de mem\u00f2ria:</p> <ul> <li>Si fem un 2n new a un objecte, el primer ja no es pot accedir i el Garbage Collector el recollir\u00e0.</li> <li>En eixir d'una funci\u00f3 on s'ha creat un objecte, eixe objecte ja no es pot accedir i el Garbage Collector el recollir\u00e0.</li> </ul>"},{"location":"PRG09/#4-abstraccio","title":"4. Abstracci\u00f3","text":"<p>Els llenguatges de programaci\u00f3 OO han de complir unes propietats b\u00e0siques:</p> <p></p> <p>En este apartat veurem l'abstracci\u00f3:</p> <p>Definici\u00f3</p> <p>Capacitat per a a\u00efllar un conjunt d'informaci\u00f3 i/o comportaments relacionats.</p> <p>Avantatges</p> <ul> <li>Reduix la complexitat dels programes (dividix i guanyar\u00e0s)</li> <li>Fomenta la reutilitzaci\u00f3 del codi.</li> </ul> <p>Mecanismes d'abstracci\u00f3</p> <p>L'abtracci\u00f3 en la POO \u00e9s la capacitat per a a\u00efllar en una classe els atributs i m\u00e8todes comuns a un determinat conjunt d'objectes. Per\u00f2 l'abstracci\u00f3 no la trobem \u00fanicament en les classes:</p> MECANISMES D'ABSTRACCI\u00d3 CARACTER\u00cdSTIQUES Funcions Conjunt d'instruccions que es pot parametritzar i ser invocat en qualsevol moment. M\u00f2duls Conjunt de funcions que guarden alguna relaci\u00f3. S\u00f3n fitxers, paquets, llibreries... Classes Conjunt de dades i funcions que descriuen una s\u00e8rie d'objectes. Incorpora t\u00e8cniques com l'her\u00e8ncia, polimorfisme..."},{"location":"PRG09/#5-encapsulament","title":"5. Encapsulament","text":""},{"location":"PRG09/#51-introduccio","title":"5.1. Introducci\u00f3","text":"<p>Els usuaris dels objectes (main, per exemple) poden accedir als atributs directament, per\u00f2 no \u00e9s aconsellable.</p> <p>En compte d'aix\u00f2, els usuaris dels objectes haurien d'accedir als atributs mitjan\u00e7ant una interf\u00edcie (enlla\u00e7): el conjunt de noms dels m\u00e8todes p\u00fablics de la classe. Estos m\u00e8todes faran d'intermediaris entre l'usuari i l'objecte.</p> <p></p> <p>Aix\u00ed, si el programador vol canviar la forma d'accedir a un atribut, no ha de canviar tot el programa sin\u00f3 solament els m\u00e8todes de la classe que accedeixen a eixe atribut.</p> <p>L'encapsulament \u00e9s la propietat que tenen els objectes d'ocultar els seus atributs a altres parts del programa.</p> <p>Com ho farem?</p> <ul> <li>Atributs: privats.</li> <li>M\u00e8todes: p\u00fablics (o protegits, si cal).</li> </ul> <p>\u00c9s a dir: l'estructira interna d'un objecte normalment est\u00e0 oculta als usuaris de l'objecte, i l'\u00fanica forma que t\u00e9 l'usuari d'un objecte de comunicar-se amb ell \u00e9s a trav\u00e9s dels m\u00e8todes p\u00fablics de l'objecte. El conjunt de m\u00e8todes p\u00fablics d'un objecte s'anomena interf\u00edcie de l'objecte.</p> <p>Exemple</p> CasaMain Java<pre><code>class Casa{\n    private int qPortes;\n    private int qFinestres;\n    private String color; //(1)!\n\n    public Casa(int qPortes, int qFinestres, String color){\n        this.qPortes = qPortes;\n        this.qFinestres = qFinestres;\n        this.color = color;\n    }\n\n    public void pinta (String nouColor){\n        this.color = nouColor;\n    }\n\n    public void creaFinestres (int qFinestresNoves){\n        this.qFinestres += qFinestresNoves;\n    }\n\n    public void llevaFinestres (int qFinestresLlevades){\n        this.qFinestres -= qFinestresLlevades;\n        if(this.qFinestres &lt; 0){\n            this.qFinestres = 0;\n        }\n    }\n}\n</code></pre> <ol> <li>Des de fora no podem accedir directament als atributs privats de la classe Casa. Per a aix\u00f2, la classe Casa proporciona els m\u00e8todes p\u00fablics pinta, creaFinestres i llevaFinestres.</li> </ol> Java<pre><code>public class Main{\n    public static void main(String[] args){\n        ...\n        Casa macasa = new Casa(1, 3, \"blanc\");\n        ...\n        macasa.qfinestres = 2; //(1)!\n        macasa.creaFinestres(2);\n    }\n}\n</code></pre> <ol> <li>Aques \u00fas de l'atribut qFinestres donaria error de compilaci\u00f3 ja que \u00e9s privat. Per a accedir a eixe atribut, s'ha de fer a trav\u00e9s dels m\u00e8todes p\u00fablics de la classe Casa.</li> </ol> <p>Per qu\u00e8 usar encapsulament?</p> <p>Un dels motius \u00e9s per a evitar errors posteriors. Si don\u00e0rem perm\u00eds per a accedir directament als atributs, podria donar-se el cas que, per exemple, llev\u00e0rem m\u00e9s finestres de les que t\u00e9 la casa.</p> <p>Per tant, s\u00f3n els m\u00e8todes dels objectes qui controlen els errors. Podr\u00edem dir que els m\u00e8todes s\u00f3n \"professionals\" en crear finestres, llevar-les... Aix\u00ed, els usuaris de l'objecte no s'han de preocupar de comprovar si hi ha suficients finestres o no abans de tancar-les.</p>"},{"location":"PRG09/#52-getters-i-setters","title":"5.2. Getters i setters","text":"<p>Com hem vist, conv\u00e9 que els atributs siguen privats. Per tant, per cada atribut necessitem 2 m\u00e8todes: un per a modificar el seu valor i un altre per a consultar-lo.</p> <p>Els m\u00e8todes destinats a donar un valor a un atribut s'anomenen setters, mentre que els destinats a consultar el valor de l'atribut s'anomenen getters.</p> <p>Per simplificar la tasca dels programadors, hi ha una convenci\u00f3 pel que fa als noms dels setters i getters: sempre els anomenarem amb les lletres get o set m\u00e9s el nom de l'atribut (amb la primera lletra en maj\u00fascula). Per exemple, per a l'atribut edat de la classe Alumne tindrem els m\u00e8todes setEdat i getEdat:</p> AlumneMain Java<pre><code>public class Alumne{\n    private int edat;\n\n    public void setEdat(int e){ //(1)!\n        this.edat = e;\n    }\n\n    public int getEdat(){ //(2)!\n        return this.edat;\n    }\n}\n</code></pre> <ol> <li>Al setter de l'atribut edat li passem un par\u00e0metre e que ser\u00e0 el nou valor de l'atribut.</li> <li>El getter de l'atribut edat no necessita cap par\u00e0metre i retorna el valor de l'atribut.</li> </ol> Java<pre><code>public class Main{\n    public static void main(String[] args){\n        Alumne a1 = new Alumne();\n\n        System.out.println(\"Edat:\");\n        a1.setEdat(teclat.nextInt()); //(1)!\n        ...\n        System.out.println(\"En complir\u00e0 \" + (a1.getEdat()+1)); //(2)!\n    }\n}\n</code></pre> <ol> <li>Invoquem al setter d'edat de l'objecte a1.</li> <li>Invoquem al getter d'edat de l'objecte a1.</li> </ol> Exercici 14. Encapsulament <p>Encapsula els atributs color i preu de la classe Cotxe: posa'ls com a privats i crea els setters i getters corresponents. Modifica el programa principal per a que use els m\u00e8todes setters i getters per a accedir als atributs.</p>"},{"location":"PRG09/#521-construccio-automatica-de-getters-i-setters","title":"5.2.1. Construcci\u00f3 autom\u00e0tica de getters i setters","text":"<p>Per generar getters i setters de forma autom\u00e0tica en IntelliJ IDEA, segueix aquests passos:</p> <ol> <li>Obre la classe on vols afegir els getters i setters.</li> <li>Situa el cursor dins de la classe (a qualsevol lloc).</li> <li>Accedeix al men\u00fa de generaci\u00f3:<ol> <li>M\u00e8tode 1: Clic dret \u2192 Generate (o b\u00e9 <code>Alt + Insert</code> a Windows/Linux, <code>Cmd + N</code> a macOS).</li> <li>M\u00e8tode 2: Men\u00fa superior \u2192 Code \u2192 Generate.</li> </ol> </li> <li>Selecciona \"Getter and Setter\". Es mostrar\u00e0 un di\u00e0leg amb tots els atributs de la classe.</li> <li>Tria els atributs per als quals vols generar m\u00e8todes:</li> </ol> Exercici 15. Encapsulament autom\u00e0tic <p>Encapsula els atributs numBastidor, matr\u00edcula, marca i model de la classe Cotxe. Fes-ho amb la inserci\u00f3 autom\u00e0tica que ofereix el teu IDE.</p>"},{"location":"PRG09/#6-herencia","title":"6. Her\u00e8ncia","text":"<p>L'her\u00e8ncia \u00e9s un dels principals avantatges de la POO. Ens permet establir una jerarquia de classes. Podrem definir classes espec\u00edfiques a partir d'una altra m\u00e9s general, afegint-hi atributs i m\u00e8todes nous o sobreescriure els ja existents.</p> <p><pre><code>    flowchart TD\n        A[Animal] --&gt; B[Mam\u00edfer]\n        A --&gt; C[R\u00e8ptil]\n        A --&gt; D[Au]\n        B --&gt; E[Can\u00ed]\n        B --&gt; F[Fel\u00ed]\n        E --&gt; G[Gos]\n        E --&gt; H[Llop]\n        F --&gt; I[Gat]</code></pre></p> <p>La classe m\u00e9s general (Animal) es diu classe pare o superclasse. Les classes m\u00e9s espec\u00edfiques (Mam\u00edfer, R\u00e8ptil, Au) es diuen classes filles o subclasses.</p>"},{"location":"PRG09/#61-propietats-de-lherencia","title":"6.1. Propietats de l'her\u00e8ncia","text":"<ul> <li>La subclasse hereta els atributs i m\u00e8todes de la superclasse.</li> <li>La subclasse pot afegir nous atributs i m\u00e8todes.</li> <li>La subclasse pot redefinir m\u00e8todes de la superclasse (per exemple, un mateix m\u00e8tode pot tindre una implementaci\u00f3 diferent en la superclasse i en la subclasse).</li> </ul>"},{"location":"PRG09/#62-avantatges","title":"6.2. Avantatges","text":"<ul> <li>Reusabilitat o reutilitzaci\u00f3 del codi: una subclasse pot aprofitar el codi d'una superclasse ja existent, modificant-lo m\u00ednimament per a que s'adapte a les seues necessitats.</li> <li>Els canvis en una classe general (nous m\u00e8todes, atributs...) es propaguen a les seues subclasses.</li> </ul> Exemples <p>L'her\u00e8ncia \u00e9s la forma natural de definir objectes en la vida real. Per exemple, podr\u00edem definir un xalet com una casa per\u00f2 amb jard\u00ed. Per tant, un xalet \u00e9s un tipus de casa: xalet ser\u00e0 una classe filla de casa</p> <p><pre><code>    flowchart TD\n        A[Casa] --&gt; B[Xalet]\n        A --&gt; C[Pis]\n        A --&gt; D[Adossat]</code></pre></p> <p>Vegem les propietats de l'her\u00e8ncia en este exemple de xalet:</p> <ul> <li>El xalet (com a casa que \u00e9s) tamb\u00e9 tindr\u00e0 els atributs de la casa (portes, finestres, color...) i els m\u00e8todes de la casa (contruir, printar...).</li> <li>El xalet tindr\u00e0 nous atributs (color de la tanca, jard\u00ed, metres de la piscina, quantitat d'arbres...) i nous m\u00e8todes (plantar un arbre, netejar piscina...).</li> <li>A m\u00e9s, amb la propietat de polimorfisme (que veurem m\u00e9s endavant), podr\u00edem redefinir m\u00e8todes de la casa en el xalet (per exemple, el m\u00e8tode printar, a m\u00e9s de fer el que feia, que pinte tamb\u00e9 la tanca).</li> </ul> <p>IMPLEMENTACI\u00d3</p> Superclasse<pre><code>public class Casa{\n    int amlple;\n    int llarg;\n    void netejar(){\n        System.out.println(\"Casa neta\");\n    }\n    int area(){\n        return this.ample * this.llarg;\n    }\n}\n</code></pre> Subclasse<pre><code>public class Xalet extends Casa{ //(1)!\n    int m2Jardi;\n\n    void tallarGespa(){\n        System.out.println(\"Gespa tallada\");\n    }\n\n    int area(){ //(2)!\n        int areaCasa = super.area(); //(3)!\n        return areaCasa + this.m2Jardi;\n    }\n}\n</code></pre> <ol> <li>L'her\u00e8ncia s'indica amb la paraula extends.</li> <li>El m\u00e8tode area de la subclasse Xalet sobreescriu el m\u00e8tode area de la superclasse Casa.</li> <li>Amb super. podem accedir als m\u00e8todes de la superclasse.</li> </ol> Main<pre><code>public class Main{\n    public static void main(String[] args){\n        Casa casa1 = new Casa();\n        Xalet xalet1 = new Xalet();\n\n        xalet1.ample = 10;\n        xalet1.llarg = 15;\n        xalet1.m2Jardi = 50; //(1)!\n        ...\n        xalet1.netejar();\n        xalet1.tallarGespa(); //(2)!\n\n        System.out.println(xalet1.area()); //(3)!\n        System.out.println(casa1.area()); //(4)!\n    }\n}\n</code></pre> <ol> <li>Un xalet pot usar tant els seus atributs com els heretats de la casa.</li> <li>Un xalet pot usar tant els seus m\u00e8todes com els heretats de la casa.</li> <li>El xalet1 invocar\u00e0 el m\u00e8tode area() de Xalet.</li> <li>La casa1 invocar\u00e0 el m\u00e8tode area() de Casa.</li> </ol>"},{"location":"PRG09/#63-que-es-el-override","title":"6.3. Qu\u00e8 \u00e9s el @Override?","text":"<p>Quan estem sobreescrivint un m\u00e8tode, alguns IDEs ens avisen amb un missatge semblant al seg\u00fcent:</p> <p></p> <p>No \u00e9s un error. Simplement ens avisa que el m\u00e8tode mostrar() de la classe Cotxe ja l'hem definit en la classe mare Vehicle i, per tant, l'oculta. \u00c9s a dir: abans de sobreescriure el m\u00e8tode, si un objecte de la classe Cotxe cridava a mostrar() s'executa el de la classe pare Vehicle, per\u00f2 ara ja no podrem invocar-lo en objectes de la classe Cotxe ja que estarem invocant al mostrar() de la classe Cotxe.</p> <p>Si fem clic en els avisos se'ns recomana escriure @Override abans del m\u00e8tode que estem sobreescribint.</p> <p>El funcionament ser\u00e0 el mateix per\u00f2 t\u00e9 distintes utilitats:</p> <ul> <li>Indica al programador que eixe m\u00e8tode \"substitueix\" l'altre en el fill (que \"oculta\" el m\u00e8tode del pare).</li> <li>Si volem sobreescriure un m\u00e8tode i posem @Override per\u00f2 ens hem equivocat amb el nom del m\u00e8tode en alguna lletra, ens avisar\u00e0, ja que no hi ha cap m\u00e8tode a sobreescriure.</li> <li>Si m\u00e9s endavant elimin\u00e0rem el m\u00e8tode mostrar() de la classe pare o li canvi\u00e0rem el nom, el compilador avisaria, ja que el m\u00e8tode corresponent en la classe filla deixaria d'estar sobreescrit.</li> </ul>"},{"location":"PRG09/#64-el-constructor-de-la-subclasse","title":"6.4. El constructor de la subclasse","text":"<p>Observem el funcionament dels constructors de la subclasse amb el mateix exemeple del Xalet:</p> <p>Exemple</p> SuperclasseSubclasseMain Superclasse<pre><code>public class Casa{\n    ...\n    Casa(int ample, int llarg){\n        this.ample = ample;\n        this.llarg = llarg;\n        System.out.println(\"Casa creada\");\n    }\n}\n</code></pre> Subclasse<pre><code>public class Xalet extends Casa{\n    ...\n    Xalet(int ample, int llarg, int m2Jardi){\n        super(ample, llarg); //(1)!\n        this.m2Jardi = m2Jardi;\n        System.out.println(\"Xalet creat\");\n    }\n}\n</code></pre> <ol> <li>Crida al constructor de la superclasse (sempre en la 1a instrucci\u00f3). Si no estiguera eixa crida, estaria super() per defecte. Per tant, donaria error perqu\u00e8 no existeix el constructor de la superclasse sense par\u00e0metres.</li> </ol> Main<pre><code>public class Main{\n    public static void main(String[] args){\n        Casa casa1 = new Casa(5, 15); //(1)!\n        Xalet xalet1 = new Xalet(10, 15, 50); //(2)!\n    }\n}\n</code></pre> <ol> <li>Crida al constructor de Casa. Mostrar\u00e0 \"Casa creada\".</li> <li>Crida al constructor de Xalet. Mostrar\u00e0 \"Casa creada\" i \"Xalet creat\".</li> </ol>"},{"location":"PRG09/#65-pasos-a-fer-per-a-crear-una-subclasse","title":"6.5. Pasos a fer per a crear una subclasse","text":"<p>Quan definim una subclasse no hem de copiar atributs i m\u00e8todes ja que podrem usar-los encara que no estiguen f\u00edsicament. Nom\u00e9s farem el seg\u00fcent:</p> <p></p> Exercici 16. Her\u00e8ncia <p>Crea, en un altre fitxer, la classe Cotxe2aMa.</p> <ol> <li>Fes que siga subclasse de Cotxe.</li> <li>Posa en Cotxe2aMa un atribut nou, kms (enter), i encapsula'l (fes-lo privat i crea els seus m\u00e8todes getter i setter).</li> <li>Sobreescriu mostrarDades() perqu\u00e8 tamb\u00e9 mostre els kms. Per\u00f2 no faces un copiar i pegar del codi de Cotxe sin\u00f3 que crida al m\u00e8tode mostrarDades() de la superclasse i despr\u00e9s mostra els kms.</li> <li>Comprova que si en la classe Cotxe eliminares el constructor sense par\u00e0metres, tindries un error de compilaci\u00f3 en la classe Cotxe2aMa. Pensa per qu\u00e8.</li> <li>Fes un contructor de la classe Cotxe2aMa que agafe com a par\u00e0metres el bastidor, marca, model, matr\u00edcula i kms. Este constructor haur\u00e0 de cridar al constructor adequat de la superclasse amb els par\u00e0metres corresponents i inicialitzar la resta d'atributs.</li> </ol> Exercici 17 <p>En el main fes el seg\u00fcent:</p> <ol> <li>Crea l'objecte cotxeAntic de la classe Cotxe2aMa passant-li al constructor els par\u00e0metres necessaris (inventa'ls).</li> <li>Crea l'objecte cotxeNou de la classe Cotxe. Mostra per pantalla les dades dels dos cotxes amb crides a mostrarDades(). Comprova que no trauen la mateixa informaci\u00f3. Podr\u00edem invocar el mostrarDades() de la classe Cotxe amb l'objecte cotxeAntic?</li> </ol> Exemple resum de l'us de this, this (...) super. i super(...) PersonaEstudiant Persona<pre><code>public class Persona{\n    String nom;\n\n    public void hola(){\n        System.out.println(\"Hola, \" + this.nom);\n    }\n\n    public void soc(){\n        System.out.println(\"S\u00f3c persona\");\n    }\n\n    public Persona(String nom){\n        this.nom = nom;\n    }\n}\n</code></pre> Estudiant<pre><code>public class Estudiant extends Persona{\n    String curs;\n\n    @Override\n    public void soc(){\n        System.out.println(\"S\u00f3c estudiant\");\n    }\n\n    public Estudiant(String nom){\n        this(nom, \"\"); //(1)!\n    }\n\n    public Estudiant(String nom, String curs){\n        super(nom); //(2)!\n        this.curs = curs;\n    }\n\n    public void proves(){\n        System.out.println(curs);\n        System.out.println(this.curs); //(3)!\n\n        System.out.println(nom);\n        System.out.println(this.nom);\n        System.out.println(super.nom); //(4)!\n\n        soc();\n        this.soc(); //(5)!\n\n        hola();\n        this.hola();\n        super.hola(); //(6)!\n    }\n}\n</code></pre> <ol> <li>Acc\u00e9s a un altre constructor de la mateixa classe.</li> <li>Acc\u00e9s al constructor de la superclasse.</li> <li>Acc\u00e9s a l'atribut de la mateixa classe.</li> <li>Acc\u00e9s a l'atribut de la superclasse.</li> <li>Acc\u00e9s a un m\u00e8tode de la mateixa classe.</li> <li>Acc\u00e9s a un m\u00e8tode de la superclasse.</li> </ol> <p>CONSELL: usa sempre this. Quan no siga possible, usa super.</p> Exercici 18. \u00das de this i super <p>Crea un projecte nou i escriu en ell estes classes:</p> Classe Veh\u00edcleClasse Cotxe Java<pre><code>public class Vehicle{\n    String matr;\n    int any;\n\n    public void mostrarDades(){\n        System.out.println(this.matr);\n        System.out.println(this.any);\n    }\n}\n</code></pre> Java<pre><code>public class Cotxe extends Vehicle{\n    int portes;\n    int any; // COMPTE! Atribut sobreescrit\n\n    @Override\n    public void mostrarDades(){ // M\u00e8tode sobreescrit\n        super.mostrarDades();\n        System.out.println(this.portes);\n        System.out.println(this.any);\n    }\n\n    public void proves(){\n        System.out.println(\"matr = \" + matr);\n        System.out.println(\"this.matr = \" + this.matr);\n        System.out.println(\"super.matr = \" + super.matr);\n        System.out.println(\"any = \" + any);\n        System.out.println(\"this.any = \" + this.any);\n        System.out.println(\"super.any = \" + super.any);\n        System.out.println(\"mostrarDades():\"); mostrarDades();\n        System.out.println(\"this.mostrarDades():\"); this.mostrarDades();\n        System.out.println(\"super.mostrarDades():\"); super.mostrarDades();\n    }\n}\n</code></pre> <p>Qu\u00e8 creus que mostraria el m\u00e8tode proves()? Per a comprovar-lo, des del main, crea un objecte de la classe Cotxe, dona-li valor a la matr\u00edcula, any i portes, i fes una crida al m\u00e8tode proves() d'eixe objecte. Digues si \u00e9s vertader o fals:</p> <ol> <li>Si no hi ha conflicte ---&gt; Per accedir al pare puc posar this, super o res.</li> <li>Si hi ha conflicte ---&gt; this agafa el fill; super agafa el pare; res agafa el fill.</li> <li>Si una variable est\u00e0 en pare i fill, cadascuna pot guardar un valor diferent.</li> </ol>"},{"location":"PRG09/#66-metodes-abstractes-i-classes-abstractes","title":"6.6. M\u00e8todes abstractes i classes abstractes","text":"<p>En una jerarquia de classes podem fer que una classe tinga algun m\u00e8tode declarat per\u00f2 no implementat. Per exemple:</p> Figura. Classe AbstractaCercle Java<pre><code>public abstract class Figura{\n    private String color;\n    public String getColor(){ return color; }\n    public void setColor(String color){ this.color = color; }\n\n    public abstract float area(); //(1)!\n}\n</code></pre> <ol> <li>M\u00e8tode abstracte: definit per\u00f2 no implementat. Per tant, no podrem crear objectes de la classe Figura (per aix\u00f2 \u00e9s tamb\u00e9 abstracta), sin\u00f3 que nom\u00e9s podrem crear objectes d'alguna classe filla de Figura que s\u00ed que implemente eixe m\u00e8tode abstracte.</li> </ol> Java<pre><code>class Cercle extends Figura{\n    int radi;\n\n    @Override\n    public float area(){ //(1)!\n        return (float) (Math.PI * Math.pow(radi, 2));\n    }\n}\n</code></pre> <ol> <li>Com la classe Cercle \u00e9s filla de Figura, est\u00e0 obligada a implementar el m\u00e8tode area() per a aix\u00ed poder crear objectes de la classe Cercle.</li> </ol> <p>Ara b\u00e9, si en la classe Cercle no volgu\u00e9rem implementar el m\u00e8tode area(), haur\u00edem de declarar tamb\u00e9 la classe Cercle com a abstracta. En eixe cas, no podr\u00edem crear objectes de la classe Cercle sin\u00f3 que haur\u00edem de crear objectes d'una classe filla de Cercle que s\u00ed que implemente el m\u00e8tode area().</p> <p>Per tant, tenim que:</p> <ul> <li>M\u00e8tode abstracte: m\u00e8tode declarat per\u00f2 no implementat. Les classes que hereten d'una classe amb m\u00e8todes abstractes han de sobreescriure eixos m\u00e8todes.</li> <li>Classe abstracta: classe que cont\u00e9 almenys un m\u00e8tode abstracte. No es poden crear objectes d'una classe abstracta (sin\u00f3 que s'han de crear objectes de les seues classes filles que s\u00ed que implementen eixos m\u00e8todes).</li> </ul> Exercici 19. M\u00e8todes i classe abstractes <p>Practica amb els m\u00e8todes i classes abstractes amb l'exemple anterior. Concretament, segueix els passos seg\u00fcents:</p> <ol> <li>Crea la classe Figura amb el m\u00e8tode area() com est\u00e0 en els apunts per\u00f2 sense posar el abstract (ni en el m\u00e8tode ni en la classe).</li> <li>Et donar\u00e0 error en el m\u00e8tode. Llig l'error i intenta comprendre el per qu\u00e8. Caldr\u00e0 declarar el m\u00e8tode com a abstracte.</li> <li>Et donar\u00e0 error la classe. Llig l'error i intenta comprendre el per qu\u00e8. Caldr\u00e0 declarar la classe com a abstracta.</li> <li>En el main intenta crear un objecte de la classe Figura. No et deixar\u00e0. Per qu\u00e8?</li> <li>Crea la classe Cercle de l'enunciat per\u00f2 sense posar el m\u00e8tode area(). Et donar\u00e0 un error. Llig i intenta entendre el per qu\u00e8. Implementa els m\u00e8todes abstractes del pare.</li> <li>Posa el cos que cal al m\u00e8tode area() de Cercle.</li> <li>Prova a crear un objecte de Cercle en el main. Ara s\u00ed que et deixar\u00e0, ja que la classe no \u00e9s abstracta i ja s'ha implementat el m\u00e8tode abstracte.</li> </ol>"},{"location":"PRG09/#7-polimorfisme","title":"7. Polimorfisme","text":"<p>Acabem de vore que pot haver diferents m\u00e8todes amb el mateix nom per\u00f2 que fan coses diferents. Aix\u00f2 \u00e9s el polimorfisme.</p> <p>Una paraula polis\u00e8mica \u00e9s aquella que t\u00e9 distints significats, segons el context. Igual passa amb el polimorfisme en la POO: un nom de m\u00e8tode pot tindre distintes implementacions i s'invocar\u00e0 a un o altre segons el context.</p> <p>Tipus de polimorfisme:</p> <ul> <li>Sobrec\u00e0rrega basada en els par\u00e0metres: m\u00e8todes amb el mateix nom en una mateixa classe per\u00f2 amb diferents par\u00e0metres. S'executar\u00e0 un m\u00e8tode o altre depenent dels par\u00e0metres.</li> <li>Sobreescriptura: m\u00e8todes amb el mateix nom i mateixos par\u00e0metres en classes distintes per\u00f2 amb relacions d'her\u00e8ncia entre ells. S'executar\u00e0 un m\u00e8tode o altre depenent de la classe de l'objecte que fa la crida.</li> <li>Sobrec\u00e0rrega basada en l'\u00e0mbit: m\u00e8todes amb el mateix nom en diferents classes sense relacions d'her\u00e8ncia entre ells. S'executar\u00e0 un m\u00e8tode o altre depenent de la classe de l'objecte que fa la crida.</li> <li>Variables polim\u00f2rfiques: \u00c9s el prolimorfisme pr\u00f2piament dit. Ens permet que un objecte definit sobre una superclasse puga ser instanciat en qualsevol de les seues subclasses.</li> </ul> <p>Nota</p> <p>Alguns autors solen diferenciar sobrec\u00e0rrrega de polimorfisme per\u00f2 nosaltres vorem la sobrec\u00e0rrega com un tipus de polimorfisme.</p> <p>Veiem detalladament els 4 tipus de polimorfisme amb l'ajuda d'exemples.</p>"},{"location":"PRG09/#71-sobrecarrega-basada-en-els-parametres","title":"7.1. Sobrec\u00e0rrega basada en els par\u00e0metres","text":"<p>En una classe poden haver distints m\u00e8todes amb el mateix nom, sempre que tinguen distints par\u00e0metres d'entrada (no importa el par\u00e0metre d'eixida).</p> <p>En temps de compilaci\u00f3 ja se sap el m\u00e8tode que s'invocar\u00e0 en cada crida: segons els par\u00e0metres.</p> <p>Exemples</p> Exemple 1Exemple 2 <p>Podem tindre en una classe distints m\u00e8todes per a mostrar dades per pantalla, una per a cada tipus de par\u00e0metre.</p> Java<pre><code>public class Eixida{\n    public static void imprimir(int x){ //(1)!\n        System.out.println(x);\n    }\n\n    public static void imprimir(int[] v){ //(2)!\n        for(int i = 0; i &lt; v.length; i++){\n            System.out.print(v[i] + \" \");\n        }\n        System.out.println();\n    }\n}\n</code></pre> <ol> <li>Este m\u00e8tode s'executar\u00e0 quan invoquem imprimir amb un enter com a par\u00e0metre.</li> <li>Este m\u00e8tode s'executar\u00e0 quan invoquem imprimir amb un vector d'enters com a par\u00e0metre.</li> </ol> <p>Una classe pot tindre distints constructors (amb el mateix nom, clar), sempre que tinguen distints par\u00e0metres.</p> Java<pre><code>public class Casa{\n    ...\n    public Casa(int qp, int qf, String col){ //(1)!\n        this.qPortes = qp;\n        this.qFinestres = qf;\n        this.color = col;\n    }\n\n    public Casa(){ //(2)!\n        this.qPortes = 0;\n        this.qFinestres = 0;\n        this.color = \"\";\n    }\n}\n</code></pre> <ol> <li>S'executar\u00e0 quan creem un objecte de la classe Casa amb 3 par\u00e0metres: 2 enters i una cadena. Casa casa1 = new Casa(2, 4, \"blanc\");</li> <li>S'executar\u00e0 quan creem un objecte de la classe Casa sense par\u00e0metres. Casa casa2 = new Casa();</li> </ol>"},{"location":"PRG09/#72-sobreescriptura","title":"7.2. Sobreescriptura","text":"<p>\u00c9s el tipus de polimorfisme que hem vist en l'her\u00e8ncia: m\u00e8todes amb el mateix nom i mateixos par\u00e0metres en classes distintes per\u00f2 amb relacions d'her\u00e8ncia entre elles. Se sol dir que la sobreescritura \u00e9s el polimorfisme pr\u00f2piament dit.</p> <p></p> <p>Quan s'invoque un m\u00e8tode sobreescrit s'executar\u00e0 el de la casse de l'objecte que ha fet la crida:</p> <p></p> <p>Recordem que, si una subclasse sobreescriu un m\u00e8tode per\u00f2 en eixa subclasse volem invocar la implementaci\u00f3 de la superclasse, ho farem amb super.</p>"},{"location":"PRG09/#73-sobrecarrega-basada-en-lambit","title":"7.3. Sobrec\u00e0rrega basada en l'\u00e0mbit","text":"<p>M\u00e8todes amb el mateix nom en diferents classes sense relacions d'her\u00e8ncia entre ells.</p> <p></p> <p>El m\u00e8tode mostrarNom() est\u00e0 sobrecarregat en base a l'\u00e0mbit en les classe Profe, Conserge i Cotxe. El mostrarNom() de Profe i el de Conserge no tenen res a vore, ja que no estan sobreescrint el m\u00e8tode, ja que no existeix en la classe pare.</p> <p></p> <p>No hi ha conflicte. En cadascuna de les crides anteriors cridar\u00e0 al mostrarNom() corresponent de la classe de cada objecte.</p> <p>En temps de compilaci\u00f3 ja se sap quin m\u00e8tode s'invocar\u00e0. Per aix\u00f2 donar\u00e0 error de compilaci\u00f3 la instrucci\u00f3 per.mostrarNom(), ja que la classe Persona no t\u00e9 eixe m\u00e8tode.</p>"},{"location":"PRG09/#74-variables-polimorfiques","title":"7.4. Variables polim\u00f2rfiques","text":"<p>Donada esta jerarquia de classes, si tinc un objecte definit com a Persona, puc instanciar-lo a un objecte d'eixa classe... o a qualsevol descendent d'eixa classe.</p> <p><pre><code>    flowchart TD\n        A[Persona] --&gt; B[Alumne]\n        A --&gt; C[Professor]\n        C --&gt; D[Inter\u00ed]\n        C --&gt; E[Definitiu]</code></pre></p> <p>Per exemple</p> Java<pre><code>Persona p;\np = new Persona();\np = new Alumne(); //(1)!\np = new Profe();\np = new Definitiu();\n</code></pre> <ol> <li>En una persona puc posar un alumne, un profe... (qualsevol descendent)</li> </ol> <p>En eixe cas diguem que p \u00e9s una variable polim\u00f2rfica, ja que admet distints tipus d'objectes (Persona, Alumne, Professor, Definitiu...), no nom\u00e9s 1.</p> <p>Cal tindre en compte que no t\u00e9 sentit fer coses com:</p> Java<pre><code>Alumne a;\na = new Profe(); //(1)!\na = new Persona(); //(2)!\n</code></pre> <ol> <li>En un alumne no t\u00e9 sentit posar un professor.</li> <li>En un alumne no podem posar una persona (ja que podria ser un professor).</li> </ol> <p>\u00c9s a dir: una variable polim\u00f2rfica \u00e9s un objecte que est\u00e0 definit sobre una classe per\u00f2 instanciat a una classe descendent:</p> <p><code>ClasseMare obj = new ClasseDescendent();</code></p>"},{"location":"PRG09/#741-algunes-utilitats","title":"7.4.1. Algunes utilitats","text":"<p>Tindre una llista d'objectes descendents d'una mateixa classe. Per exemple, puc voler guardar en una mateixa lista tant alumnes com professors (persones en general).</p> Java<pre><code>Persona[] llista = new Persona[N]; //(1)!\n\nllista[0] = new Profe();\nllista[1] = new Alumne(); //(2)!\nllista[2] = new Persona();\n</code></pre> <ol> <li>Vector d'objectes de la classe Persona.</li> <li>En cada component del vector est\u00e0 definit un objecte de Persona per\u00f2 es pot instanciar a Profe o a Alumne. Per tant, cada component del vector \u00e9s una variable polim\u00f2rfica.</li> </ol> <p>Tindre una funci\u00f3 que puga rebre objectes d'una classe o de filles seues. Per exemple, vull un procediment que accepte qualsevol tipus de persones: tant alumnes com professors:</p> Java<pre><code>public class Main{\n    static void mostrar(Persona p){ //(1)!\n        System.out.println(\"----------\");\n        p.mostrarNom();\n        System.out.println(\"----------\");\n    }\n\n    public static void main(String args[]){\n        Alumne alu = new Alumne();\n        mostrar(alu); //(2)!\n    }\n}\n</code></pre> <ol> <li>Objecte de la classe Persona per\u00f2 accepta tant persones com alumnes i profes. Per tant, p \u00e9s una variable polim\u00f2rfica.</li> <li>Quan es fa\u00e7a eixa crida, el par\u00e0metre p (de la funci\u00f3 mostrar()), que estava definit com a Persona, estar\u00e0 apuntant a un objecte de la classe Alumne. Per tant, p ser\u00e0 una variable polim\u00f2rfica.</li> </ol>"},{"location":"PRG09/#742-acces-als-metodes-i-atributs-duna-variable-polimorfica","title":"7.4.2. Acc\u00e9s als m\u00e8todes i atributs d'una variable polim\u00f2rfica","text":"<p>Suposem que tenim aquesta jerarquia de classes:</p> <p></p> <p></p> <p>Per tant, veiem que:</p> <ul> <li>En temps de compilaci\u00f3: es comprova en la classe de definici\u00f3 de l'objecte.</li> <li>En temps d'execuci\u00f3: s'executa en la classe que ha fet el new.</li> </ul> <p>Per\u00f2 veiem qu\u00e8 passa en estos casos:</p> <p></p> <p>Per\u00f2 cal anar en compte, ja que el c\u00e0sting pot donar error d'execuci\u00f3:</p> <p></p> <p>Soluci\u00f3 a l'error del c\u00e0sting</p> <p>Nom\u00e9s farem el c\u00e0sting si es pot fer. \u00c9s a dir: nom\u00e9s voldrem fer el c\u00e0sting a Alumne, si l'objecte en q\u00fcesti\u00f3 est\u00e0 instanciat a Alumne.</p> <p>Veiem distintes formes de comprovar a quina classe est\u00e0 instanciat un objecte:</p>"},{"location":"PRG09/#743-formes-de-comprovar-a-quina-classe-sha-instanciat-fet-el-new-un-objecte","title":"7.4.3. Formes de comprovar a quina classe s'ha instanciat (fet el new) un objecte","text":"<ol> <li> <p>Saber si un objecte est\u00e0 instanciat a una determinada classe. Usarem el m\u00e8tode getClass() de l'objecte i l'atribut class de la classe que volem comprovar:</p> Java<pre><code>static void mostra (Persona per){\n    ...\n    if(per.getClass() == Alumne.class){\n        ((Alumne)per).mostraCurs();\n    }\n    else{\n        System.out.println(\"No \u00e9s \" + Alumne.class.getName() + \" sin\u00f3 \" + \n        per.getClass().getName()); //(1)!\n    }\n    ...\n}\n</code></pre> <ol> <li>Si necessit\u00e0rem mostrar el nom de la classe podem fer-ho amb el m\u00e8tode getName() del class. Si per est\u00e0 instanciat a Profe, mostraria: No \u00e9s Alumne sin\u00f3 Profe.</li> </ol> </li> <li> <p>Saber si un objecte \u00e9s una inst\u00e0ncia d'una classe o descendent d'ella. Usarem l'operador instanceof:</p> Java<pre><code>static void mostra (Persona per){\n    ...\n    if(per instanceof Alumne){ //(1)!\n        ((Alumne)per).mostraCurs();\n    }\n    ...\n}\n</code></pre> <ol> <li>Si per est\u00e0 instanciat a una classe filla d'Alumne (com podria ser AlumneESO), tamb\u00e9 es compliria la condici\u00f3.</li> </ol> </li> <li> <p>Tamb\u00e9 podem  fer un c\u00e0sting sense comprovar la classe instanciada. Usarem un try-catch:</p> Java<pre><code>static void mostra (Persona per){\n    ...\n    try{\n        ((Alumne)per).mostraCurs();\n    }\n    catch(ClassCastException e){ } //(1)!\n    ...\n}\n</code></pre> <ol> <li>No estem obligats a posar alguna instrucci\u00f3 en el bloc del catch.</li> </ol> </li> </ol>"},{"location":"PRG09/#744-esquema-resum-dels-distints-tipus-de-polimorfisme","title":"7.4.4. Esquema resum dels distints tipus de polimorfisme","text":"Tipus Sobrec\u00e0rrega basada en par\u00e0metres Sobrec\u00e0rrega (Override) Sobrec\u00e0rrega basada en l'\u00e0mbit Variables polim\u00f2rfiques De m\u00e8tode o de variable M\u00e8tode M\u00e8tode M\u00e8tode Variable On est\u00e0 el polimorfisme? En la mateixa classe En classes distintes amb her\u00e8ncia En classes distintes sense her\u00e8ncia En objectes definits en certa classe per\u00f2 instanciats a una filla Poden tenir els mateixos par\u00e0metres? No S\u00ed S\u00ed - Usos freq\u00fcents - Classe amb m\u00e9s d\u2019un constructor - Subclasses que volen modificar el comportament d\u2019un m\u00e8tode de la superclasse - M\u00e8todes amb un nom com\u00fa per\u00f2 que tenen poc a veure - Llista que accepta objectes de distintes subclasses Quan s'invoca un m\u00e8tode, quin s'executa? El que concorda amb els par\u00e0metres d'entrada El de la classe de l'objecte que fa la crida. Si no existeix, el de la superclasse. El de la classe de l'objecte que fa la crida - Si el m\u00e8tode (o atribut) est\u00e0 en pare i fill, agafa el del fill. - Si nom\u00e9s en pare, agafa el del classe. - Si nom\u00e9s en fill, cal fer el c\u00e0sting per a agafar-lo (si no, error de compilaci\u00f3) Se sap a qui invoca en temps de... Compilaci\u00f3 Compilaci\u00f3 Compilaci\u00f3 Execuci\u00f3 {.center} Exercici 20. Polimorfisme <p>El m\u00e8tode mostrarDades() t\u00e9 polimorfisme de sobreescriptura, ja que est\u00e0 implementat en distintes classes amb relaci\u00f3 d'her\u00e8ncia (Cotxe i Cotxe2aMa). Modifica el m\u00e8tode mostrarDades() de la subclasse: fes \u00fas de \"super.\" per a accedir al mostrarDades() de la superclasse.</p> Exercici 21 <p>Anem a sobrecarregar el m\u00e8tode revisar en la classe Cotxe. Crea en la classe Cotxe altre m\u00e8tode revisar per\u00f2 que reba un vector de 5 booleans. El m\u00e8tode haur\u00e0 de copiar les components del vector d'entrada en les components de l'atribut revisions.</p> Exercici 22 <p>En el programa principal:</p> <ol> <li>Crea un cotxe i fes diverses crides al m\u00e8tode revisar() de forma que s'executen les 2 implementacions d'eixe m\u00e8tode.</li> <li>Crea un array de cotxes i posa en ell cotxes nous i de 2a m\u00e0. Recorre tot l'array per a cridar al mostrarDades() de cada objectes de la llista.</li> <li>Dins de la classe principal (la que t\u00e9 el main) crea el m\u00e8tode mostrarKms() de forma que accepte com a par\u00e0metre un cotxe de segona m\u00e0 o normal (per tant, el par\u00e0metre ser\u00e0 de la casse pare: Cotxe) i que mostre per pantalla la quantitat de kms que t\u00e9.<ul> <li>Problema: Vor\u00e0s que et d\u00f3na error al compilar ja que la classe Cotxe t\u00e9 l'atribut dels kms.</li> <li>Soluci\u00f3: Fes un c\u00e0sting de l'objecte cotxe per a accedir als kms.</li> </ul> </li> <li>Crida al m\u00e8tode anterior passant-li com a par\u00e0metre un objecte de la classe Cotxe2aMa i una altra crida passant-li un objecte de la classe Cotxe.<ul> <li>Problema: Vor\u00e0s que d\u00f3na error d'execuci\u00f3 en el moment de passar-li com a par\u00e0metre un objecte de la classe Cotxe. El motiu \u00e9s que no pot fer el c\u00e0sting a Cotxe2aMa, ja que nom\u00e9s podem fer c\u00e0sting a una classe ascendent.</li> <li>Soluci\u00f3: Modifica el m\u00e8tode mostrarKms() per a que si el par\u00e0metre \u00e9s una inst\u00e0ncia de Cotxe2aMa, que mostre els kms; si no, que mostre el text \"Cotxe nou, amb 0 kms\". Prova diverses solucions (instanceof, getClass o try-catch).</li> </ul> </li> </ol> Exercici 23 <p>Llistat de persones de l'institut.</p> <ol> <li>Crea l'aplicaci\u00f3 PersonesInstitut, amb les seg\u00fcents classes:</li> </ol> <p><pre><code>classDiagram\nclass Persona {\n    String nom\n    + mostraNom()\n}\n\nclass Profe {\n    + mostraNom()\n}\n\nclass Alumne {\n    String curs\n    + mostraCurs()\n}\n\nPersona &lt;|-- Profe\nPersona &lt;|-- Alumne</code></pre></p> <ol> <li>En el main crea una llista (vector de 100 persones o un ArrayList) on guardarem tot el personal de l'institut (profes, alumnes o qualsevol altre tipus de persones).</li> <li>Assigna un professor en el 1r element de la llista; un alumne en el 2n; i una persona en el 3r. Posa dades qualsevol a les 3 persones. Si vols, crea els constructors que necessites.</li> <li>Utilitzant el m\u00e8tode mostraNom(), mostra els 3 objectes que tens (usa un for de tipus foreach). Executa-ho per comprovar a quina implementaci\u00f3 de mostrarNom() s'ha invocat en cada cas.</li> <li>Amb un altre for, mostrar els cursos dels 3 objectes de la llista (invocant el m\u00e8tode mostraCurs()). Et donar\u00e0 error de compilaci\u00f3 ja que la llista \u00e9s de persones per\u00f2 la classe Persona no t\u00e9 eixe m\u00e8tode, sin\u00f3 que \u00e9s nom\u00e9s de la classe Alumne. Fes \u00fas del c\u00e0sting per a solucionar-ho.</li> <li>Executa el programa. T'eixir\u00e0 un error quan intente fer el c\u00e0sting del professor, ja que un Professor no pot \"convertir-se\" en Alumne. Arregla-ho per a que no done eixe error: fes que nom\u00e9s es cride a mostrarCurs() si l'objecte \u00e9s un Alumne (usa instanceof, getClass o try-catch).</li> </ol>"},{"location":"PRG09/#8-atributs-i-metodes-estatics","title":"8. Atributs i m\u00e8todes est\u00e0tics","text":""},{"location":"PRG09/#81-atributs-estatics","title":"8.1. Atributs est\u00e0tics","text":"<p>Els atributs que hem vist fins ara en una classe es diuen \"atributs d'objecte\" per\u00f2 tamb\u00e9 hi ha els \"atributs de classe\" o \"est\u00e0tics\".</p> <ul> <li>Atributs d'objecte. S\u00f3n els que hem vist fins ara. Un atribut d'objecte pot tindre un valor diferent per cada objecte de la classe.</li> <li>Atributs de classe (est\u00e0tics). Un atribut de classe o est\u00e0tic t\u00e9 nom\u00e9s un \u00fanic valor, independentpment dels objectes que es creen de la classe.</li> </ul> <p>Si recordem l'analogia de classe i objectes amb el full original i les fotoc\u00f2pies, ara podem dir que els atributs est\u00e0tics estarien a la part de darrere del full original i, per tant, no es fotocopien. \u00c9s a dir, pertanyen nom\u00e9s a la classe, no als objectes.</p> <p></p> <p>Exemple d'atributs est\u00e0tics</p> <p>La quantitat de clients creats (quantes fotoc\u00f2pies), la data del 1r client, el percentatge de descompte (igual per a tots els clients), el deute total dels clients...</p>"},{"location":"PRG09/#811-declaracio-i-us-dels-atributs-estatics","title":"8.1.1. Declaraci\u00f3 i \u00fas dels atributs est\u00e0tics","text":"<p>Veiem-ho amb un exemple:</p> <p></p>"},{"location":"PRG09/#812-utilitats-dels-atributs-estatics","title":"8.1.2. Utilitats dels atributs est\u00e0tics","text":"<p>Els atributs est\u00e0tics solen utilitzar-se per a:</p> <ul> <li>Definir constants</li> <li>Definir variables amb el mateix valor per a tots els objectes de la classe</li> <li>Fer un comptador d'objectes de la classe</li> </ul> Exercici 24. Atributs est\u00e0tics <p>Afig a la classe Cotxe l'atribut est\u00e0tic quantitat (enter), on guardarem la quantitat de cotxes que tenim (quantitat d'objectes creats de la classe Cotxe)</p> Exercici 25 <p>Modifica la classe Cotxe per a que s'actualitze el nou atribut quantitat quan calga. Com que \u00e9s un comptador, caldr\u00e0 inicialitzar-lo i incrementar-lo.</p> Exercici 26 <p>Fes proves creant diversos cotxes, tamb\u00e9 de segona m\u00e0. Posteriorment mostra el valor de l'atribut quantitat per comprovar que funciona correctament.</p>"},{"location":"PRG09/#82-metodes-estatics","title":"8.2. M\u00e8todes est\u00e0tics","text":"<p>Son les funcions i procediments que us\u00e0vem abans de vore la POO (recorda que els pos\u00e0vem static davant).</p> <p>Els m\u00e8todes est\u00e0tics pertanyen a tota la classe, no a cap objecte en particular. Per aix\u00f2 s'invoquen sense prosar el nom de cap objecte davant.</p>"},{"location":"PRG09/#821-declaracio-i-invocacio-de-metodes-estatics","title":"8.2.1. Declaraci\u00f3 i invocaci\u00f3 de m\u00e8todes est\u00e0tics","text":""},{"location":"PRG09/#822-utilitats-dels-metodes-estatics","title":"8.2.2. Utilitats dels m\u00e8todes est\u00e0tics","text":"<p>Alguns exemples (que ja hav\u00edem usat abans de vore la POO) podrien ser:</p> Java<pre><code>public class Main {\n    public static void main(String args[]){\n\n        // M\u00e8todes nostres\n\n        float f = areaTrinagle(10, 5);  // C\u00e0lcul \u00e0rea d'un triangle\n        imprimir(vectorNotes);          // Imprimir un vector d'enters\n        int j = llegirEnter();          // Llegir un enter de teclat\n\n        // M\u00e8todes existents en Java\n\n        System.out.println(\"Hola, m\u00f3n!\");   // Imprimir un text en pantalla\n        int i = Integer.parseInt(\"10\");     // Convertir una cadena a un enter\n    }\n}\n</code></pre> Exercici 27. M\u00e8todes est\u00e0tics <p>Fes que l'atribut est\u00e0tic quantitat que has creat en la classe Cotxe siga privat. Per tant, caldr\u00e0 un m\u00e8tode per a consultar el seu valor: crea el m\u00e8tode getQuantitat que retorne la quantitat de cotxes creats. Tin en compte que ha de ser un m\u00e8tode est\u00e0tic, ja que no s'aplica a cap objecte en concret. Finalment, mostra la quantitat de cotxes creats, usant el nou m\u00e8tode getQuantitat.</p>"},{"location":"PRG09/#9-metodes-de-la-classe-object","title":"9. M\u00e8todes de la classe Object","text":"<p>En Java hi ha moltes classes existents. De fet, hi ha una jerarquia de classes on, la classe mare de totes les classes \u00e9s Object.</p> <p></p> <p>Algunes classes que hem vist tamb\u00e9 estan en eixa jerarquia: String, Integer, Float, ArrayList, Exception, ArrayIndexOutOfBoundsException, NullPointerException...</p> <p>I les classes que defineix el programador tamb\u00e9 s\u00f3n filles d'Object (encara que no posem l'extends).</p> <p>La classe Object t\u00e9 diversos m\u00e8todes. En vorem dos que s\u00f3n molt importants ja que ens serviran de molta ajuda en les nostres classes:</p> <ul> <li>El m\u00e8tode toString(): retornar\u00e0 l'estat de l'objecte en forma de String.</li> <li>El m\u00e8tode equals(...): retornar\u00e0 un boole\u00e0 per vore si 2 objectes s\u00f3n iguals.</li> </ul> <p>Per\u00f2 no ens servir\u00e0 de molt en les nostres classes si no els sobreescrivim posant el codi al nostre gust.</p> <p>Anem a vore els 2 m\u00e8todes.</p>"},{"location":"PRG09/#91-el-metode-tostring","title":"9.1. El m\u00e8tode toString()","text":"<p>Serveix per a retornar en una cadena les dades d'un objecte. Com hem dit abans, \u00e9s un m\u00e8tode de la classe Object, per tant, sense implementar-lo el podem usar, per\u00f2 no ens servir\u00e0 de molt, ja que ens retornar\u00e0 l'adre\u00e7a de mem\u00f2ria (en hexadecimal) d'on est\u00e0 l'objecte.</p> <p><code>System.out.println(alu1.toString());</code> ens mostrar\u00e0 alguna cosa com: <code>Alumne@7852e922</code></p> <p>Per tant, hem de sobreescriure eixe m\u00e8tode en la nostra classe i posar els atributs que volem i en el format que volem. Per exemple:</p> Java<pre><code>class Alumne{\n    String nom;\n    int edat;\n\n    @Override\n    public String toStrig(){\n        return \"(\" + \"Nom: \" + nom + \", Edat: \" + edat + \")\";\n    }\n}\n</code></pre> <p><code>System.out.println(alu1.toString());</code> Ara ens mostrar\u00e0 les dades d'alu1: <code>(Nom: Pep, Edat: 50)</code></p> <p>De fet, en la crida a println, no cal ni posar el toString() ja que si el println rep un objecte, crida autom\u00e0ticament al toString d'eixe objecte.</p> <p><code>System.out.println(alu1);</code> --&gt; <code>(Nom: Pep, Edat: 50)</code></p> <p>La classe ArrayList tamb\u00e9 t\u00e9 la seua implementaci\u00f3 del toString, de forma que si fem un println d'un ArrayList d'alumnes, el println retornar\u00e0 una cadena amb la concatenaci\u00f3 dels resultats dels toString de cada alumne de l'ArrayList:</p> Java<pre><code>ArrayList &lt;Alumne&gt; alumnes = new ArrayList();\n...\nSystem.out.println(alumnes); //(1)!\n</code></pre> <ol> <li>Mostrar\u00e0: <code>[(Nom: Pep, Edat: 50), (Nom: Pepa, Edat: 20), (Nom: Pepet, Edat: 30)]</code></li> </ol> Exercici 28. Sobre el m\u00e8tode toString() <ul> <li>a. Crea el toString() de la classe Cotxe per a que retorne una cadena amb este format:</li> </ul> <p></p> <ul> <li>b. Fes crides des del main per a mostrar amb este format les dades de 2 cotxes. En un d'ells enviant a println la cadena que retorna el toString(); en l'altre envia a println el cotxe directament.</li> <li>c. Mostra les dades de l'array de cotxesAparador, amb este format. Caldr\u00e0 rec\u00f2rrer el vector.</li> <li>d. Crea un ArrayList de cotxes (llistaCotxes). Posa'n alguns i mostra'ls tots, sense cap bucle per a rec\u00f2rrer l'ArrayList.</li> </ul> Exercici 29 <ul> <li>a. Crea el toString(...) de la classe Cotxe2aMa per tal que retorne una cadena amb totes les seues dades (tamb\u00e9 els kms). Caldr\u00e0 invocar el toString(...) de *Cotxe (no faces copiar i enganxar).</li> <li>b. Mostra les dades del cotxeAntic, amb este format.</li> <li>c. Afig a l'ArrayList de cotxes (llistaCotxes) algun cotxe de 2a m\u00e0 (per exemple, el cotxeAntic) i torna a mostrar tots els cotxes de la llista. Fixa't que per a cada cotxe de la llista l'int\u00e8rpret de Java ha sabut invocar al toString(...) de Cotxe o al de Cotxe2aMa.</li> </ul>"},{"location":"PRG09/#92-els-metodes-equals-i-hashcode","title":"9.2. Els m\u00e8todes equals(...) i hashCode()","text":""},{"location":"PRG09/#921-el-metode-equals","title":"9.2.1. El m\u00e8tode equals()","text":"<p>Com ja sabem, per saber si 2 objectes s\u00f3n iguals no podem usar <code>==</code> ja que ens comparar\u00e0 les adreces de mem\u00f2ria. Per tant, hem de fer servir el m\u00e8tode equals() de la classe Object.</p> <p>Exemple d'\u00fas</p> Java<pre><code>Alumne alu1 = new Alumne();\nAlumne alu2 = new Alumne();\n...\nif(alu1.equals(alu2)){...} //(1)!\n</code></pre> <ol> <li>Comprova si alu1 \u00e9s igual a alu2.</li> </ol> <p>Ara b\u00e9: el m\u00e8tode equals de la classe Object no pot saber quan 2 alumnes s\u00f3n iguals, i per aix\u00f2 nom\u00e9s diu que 2 objectes s\u00f3n iguals si s\u00f3n el mateix objecte (mateixa adre\u00e7a de mem\u00f2ria).</p> <p>Per tant, en la nostra classe Alumne hem de sobreescriure el m\u00e8tode equals per a que compare els atributs de 2 objectes i ens diga si s\u00f3n iguals o no. Haurem de definir les condicions de quan 2 objectes s\u00f3n iguals (per exemple, si tenen el mateix nom i edat).</p> <p>I no podr\u00edem dir-li d'una altra forma (en compte d'equals)? La resposta \u00e9s no. \u00c9s important que reimplemente el m\u00e8tode equals() de la classe Object, ja que eixe m\u00e8tode \u00e9s invocat per certs m\u00e8todes d'altes classes de Java (com contains() de ArrayList o containsKey() de HashMap).</p> <p>Exemple</p> Java<pre><code>ArrayList &lt;Alumne&gt; alumnes = new ArrayList();\n...\nif (alumnes.contains(alu1)){...} //(1)!\nint posicio = alumnes.indexOf(alu1); //(2)!\nalumnes.remove(alumne1); //(3)!\n</code></pre> <ol> <li>Comprova si en la llista alumnes hi ha un alumne igual a alu1.</li> <li>Retorna la posici\u00f3 de la llista alumnes on est\u00e0 el primer alumne igual a alu1.</li> <li>Esborra de la llista d'alumnes el primer alumne que trobe que siga igual a alu1.</li> </ol> <p>L'estructura d'un m\u00e8tode equals sol ser la seg\u00fcent:</p> <p></p> Exercici 30. equals() <ul> <li>a. Fes el m\u00e8tode equals() de la classe Cotxe tenint en compte que 2 cotxes s\u00f3n iguals si tenen la mateixa matr\u00edcula o si tenen el mateix n\u00famero de bastidor.</li> <li>b. Crea 2 cotxes amb les mateixes dades i comprova si s\u00f3n iguals.</li> <li>c. Posa un d'eixos cotxes en l'ArrayList llistaCotxes i comprova (amb el contains) si eixe cotxe est\u00e0 o no en la llisa.</li> </ul> Exercici 31 <p>Fes l'equals() de Cotxe2aMa de forma que 2 cotxes de 2a m\u00e0 s\u00f3n igual si, a m\u00e9s de tindre el mateix bastidor o matr\u00edcula, tenen els mateixos kms. L'equals de Cotxe2aMa haur\u00e0 d'invocar l'equals de Cotxe. Comprova des del main que 2 cotxes de 2a m\u00e0 s\u00f3n iguals.</p>"},{"location":"PRG09/#922-el-metode-hashcode","title":"9.2.2. El m\u00e8tode hashCode()","text":"<p>Este m\u00e8tode complementa l'equals(...), i serveix per a buscar elements iguals en estructures tipus HashSet o HashMap de forma m\u00e9s eficient. Per tant, nom\u00e9s caldr\u00e0 sobreescriure'l si volem usar eixes estructures (i estar\u00edem obligats a fer-ho).</p> <p>Com funciona el hashCode()? Per exemple, cada vegada que intentem inserir un element en un HashSet, el m\u00e8tode add necessita saber si ja hi ha un objecte igual en la llista (ja que no poden estar repetits). Com ha de rec\u00f3rrer tots els elements, amb l'equals() aniria molt lent. La idea \u00e9s associar a cada element un n\u00famero i aix\u00ed tindre el HashSet ordenat per eixe n\u00famero per fer la recerca m\u00e9s r\u00e0pida.</p> <p>Exemple de hashCode() que genera intelliJ des del men\u00fa Generate per a la classe Cotxe:</p> <p></p> <p>Altres IDEs generen un hashCode diferent, per\u00f2 la idea \u00e9s la mateixa. El que fa \u00e9s combinar els atributs de l'objecte i generar un n\u00famero.</p> <p>Per exemple, el Netbeans per a la nostra classe Alumne generaria un hashCode com el seg\u00fcent:</p> Java<pre><code>@Override\npublic int hashCode(){ //(1)!\n    int hash = 3;\n    hash = 53 * hash + Objects.hashCode(this.nom);\n    hash = 89 * hash + this.edat; //(2)!\n    return hash;\n}\n</code></pre> <ol> <li> <p>Este m\u00e8tode retorna el n\u00famero associat a l'objecte. No l'hem d'invocar nosaltres, sin\u00f3 que ho far\u00e0 el contains, indexOf o remove de les estructures HashSet i HashMap.</p> </li> <li> <p>No intentes entendre el per qu\u00e8 de les f\u00f3rmules. Es tracta de fer correspondre un n\u00famero a les dades de l'objecte, de la millor forma possible per tal de minimitzar les col\u00b7lisions.</p> </li> </ol> <p>No passa res si hi ha col\u00b7lisions, (que els objectes diferents tinguen el mateix n\u00famero de hashCode()), ja que , per a saber si un objecte \u00e9s igual a un altre, primer es mira si els dos tenen el mateix n\u00famero de hashCode(). Si \u00e9s diferent, els objectes s\u00f3n diferents. Si \u00e9s el mateix, llavors es mira si s\u00f3n iguals amb el m\u00e8tode equals().</p> <p>Si no sobreescrivim el hashCode() d'Object, no funcionarien els m\u00e8todes add, remove i contains del HashSet i HashMap, ja que el hashCode() de la classe Object retorna la posici\u00f3 de mem\u00f2ria (en sistema decimal) de l'objcete. Per tant, encara que els objectes tinguen les mateixes dades, sempre consideraria que s\u00f3n diferents (si no tenen la mateixa adre\u00e7a de mem\u00f2ria).</p>"},{"location":"PRG09/#10-la-classe-arraylist","title":"10. La classe ArrayList","text":"<p>Al llarg del curs ja hem usat els ArrayList per\u00f2 els hem vist un poc per damunt. Ara els vorem m\u00e9s detalladament ja que, a m\u00e9s, ara tindrem ArrayList d'objectes, no nom\u00e9s de tipus b\u00e0sics.</p> <p>Com ja sabem, la classe ArrayList permet guardar dades en mem\u00f2ria de manera similar als arrays convencionals, per\u00f2 amb avantatges com:</p> <ul> <li>No s'indica la grand\u00e0ria sin\u00f3 que s'assigna de forma din\u00e0mica.</li> <li>Disposen d'un conjunt de m\u00e8todes que permeten consultar, eliminar, introduir elements, etc de forma autom\u00e0tica.</li> </ul> <p>Per a usar eixa classe cal importar el paquet: java.util.ArrayList</p>"},{"location":"PRG09/#101-declaracio-dun-objecte-arraylist","title":"10.1. Declaraci\u00f3 d'un objecte ArrayList","text":"<p><code>ArrayList &lt;nomClasse&gt; nomLlista = new ArrayList();</code></p> <ul> <li>Podr\u00e0 guardar elements d'eixa classe o d'una classe o de subclasses. Si no es posa <code>&lt;nomClasse&gt;</code> admetr\u00e0 objectes de qualsevol classe per\u00f2, com vorem, despr\u00e9s caldr\u00e0 fer c\u00e0stings per a accedir als atributs.</li> <li>En cas de guardar dades d'un tipus b\u00e0sic de Java com char, int, double, etc, s'ha d'especificar el nom de la classe associada: Character, Integer, Double, etc.</li> </ul> <p>Exemples</p> Java<pre><code>ArrayList &lt;String&gt; paisos = new ArrayList();\nArrayList &lt;Integer&gt; edats = new ArrayList();\nArrayList &lt;Alumne&gt; alumnes = new ArrayList();\nArrayList coses = new ArrayList();\n</code></pre>"},{"location":"PRG09/#102-metodes-darraylist","title":"10.2. M\u00e8todes d'ArrayList","text":"boolean add void add Object set Object remove boolean remove Object get int indexOf boolean contains void clear boolean isEmpty Object clone Object [] toArray int size Exercici 32. ArrayList de Strings <ul> <li>Crea un ArrayList de Strings anomenat pobles.</li> <li>Afig a la llista 4 pobles: Tavernes, Sueca, Sollana i Cullera.</li> <li>Afig en la primera posici\u00f3: Gandia.</li> <li>Canvia el poble de la posici\u00f3 n\u00famero 2 per Cullera (un altre Cullera al que ja hi havia) i guarda el poble que s'ha canviat en la variable PobleCanviat.</li> <li>Esborra el poble de la posici\u00f3 3 de la llista i guarda el poble esborrat en la variable PobleEsborrat.</li> <li>Esborra Sueca (no sabem en quina posici\u00f3 est\u00e0) i mostra el resultat.</li> <li>Mostra per pantalla el poble de la posici\u00f3 2.</li> <li>Mostra per pantalla la primera posici\u00f3 de Cullera i l'\u00faltima.</li> <li>Mostra tots els pobles de la llista (cadascun en una l\u00ednia).</li> <li>Mostra per pantalla si la llista est\u00e0 buida o no.</li> </ul> Exercici 33. ArrayList d'objectes <p>Volem guardar les dades de cada alumne i les de cada grup, aix\u00ed com quins alumnes pertanyen a cada grup. Per a fer aix\u00f2, crearem la classe Alumne i la classe Grup. Esta \u00faltima tindr\u00e0, com a un altre atribut, un vector d\u2019alumnes on estaran tots els alumnes de cada grup. \u00c9s a dir, crea en una aplicaci\u00f3 nova:</p> <ul> <li>La classe Alumne:<ul> <li>Atributs (privats): dni, nom, cognoms, edat, poble.</li> <li>M\u00e8todes:<ul> <li>Constructor amb par\u00e0metres: dni, nom, cognoms, edat, poble.</li> <li>Getters i setters.</li> <li>toString. Retornar una cadena amb les dades. Per exemple: \"12999999 Pep Garcia, 21 anys (Sueca)\"</li> </ul> </li> </ul> </li> <li>La classe Grup:<ul> <li>Atributs (privats): codi, curs, cicle, alumnes.<ul> <li>L'atribut alumnes ha de ser un ArrayList d'alumnes (no de noms d'alumnes, sin\u00f3 d'objectes de la classe Alumne).</li> </ul> </li> <li>M\u00e8todes:<ul> <li>Constructor amb par\u00e0metres: codi, curs, cicle.</li> <li>Getters i setters de codi, curs i cicle (per\u00f2 no de la llista alumnes).</li> <li>afegirAlumne: Per a afegir un alumne al grup. Li passem com a par\u00e0metre un Alumne. En un grup no podran haver m\u00e9s de 20 alumnes. Si cap l'alumne, l'inserir\u00e0 i retornar\u00e0 la quantitat d'alumnes que encara caben. Si ja estava posat, retornar\u00e0 -1. Si no cap, retornar\u00e0 -2.</li> <li>llevarAlumne. Per a llevar un alumne del grup. Li passem com a par\u00e0metre un alumne. Si estava, el llevar\u00e0 del grup i retornar\u00e0 true. Si no, false.</li> <li>llevarAlumne. Per a llevar un alumne del grup. Li passem com a par\u00e0metre el dni de l\u2019alumne. Retornar\u00e0 true si l\u2019alumne estava en el grup. Si no, false.</li> <li>quantitat. Retornar\u00e0 la quantitat d\u2019alumnes del grup.</li> <li>getAlumne. Li passem com a par\u00e0metre el dni i ha de retornar l\u2019Alumne corresponent (no el nom). Si no est\u00e0, retornar\u00e0 null.</li> <li>toString. Retornar\u00e0 una cadena amb les dades del grup i dels alumnes:<ul> <li>GRUP: 1DAM Curs: 1 Cicle: Desenv.Aplic.Inform\u00e0tiques</li> <li>12999999 Pep Garcia Garcia, 21 anys (Sueca)</li> <li>86444368 Pepa Garcia Garcia, 23 anys (Sueca)</li> <li>94577544 Pepet Manyes Garcia, 18 anys (Simat)</li> </ul> </li> <li>Crea altres m\u00e8todes que cregues convenients</li> </ul> </li> </ul> </li> <li>La classe Main. En el m\u00e8tode main:<ul> <li>Crea un ArrayList de grups (anomenat grupsInsti) on estaran tots els grups de l'institut.</li> <li>Crea un ArrayList d'alumnes (anomenat alumnesInsti) on estaran tots els alumnes de l'institut.</li> <li>Fes proves per a utilitzar eixos ArrayList i utilitzar els m\u00e8todes de les classes fetes anteriorment. O, millor, un bucle amb el seg\u00fcent men\u00fa:<ul> <li>Crear grup.</li> <li>Crear alumne.</li> <li>Afegir alumne a grup.</li> <li>Llevar alumne de grup.</li> <li>etc.</li> </ul> </li> </ul> </li> </ul>"},{"location":"PRG09/#11-annex-i-diagrames-de-classes","title":"11. Annex I. Diagrames de classes","text":"<p>Els diagrames de classes s\u00f3n una representaci\u00f3 gr\u00e0fica de les classes, els seus atributs i m\u00e8todes, i les relacions entre elles en un sistema orientat a objectes. S\u00f3n una part fonamental del llenguatge de modelatge unificat (UML), que s'utilitza per a dissenyar i documentar sistemes inform\u00e0tics de manera clara i entenedora. Els diagrames de classes ajuden a visualitzar l'arquitectura del sistema i les interaccions entre els diferents components (clases) d'una aplicaci\u00f3.</p>"},{"location":"PRG09/#111-components-dun-diagrama-de-classe","title":"11.1. Components d'un Diagrama de Classe","text":"<p>Un diagrama de classe cont\u00e9 diversos components que ajuden a definir clarament la relaci\u00f3 entre les classes i les seves caracter\u00edstiques. Alguns dels components m\u00e9s comuns s\u00f3n:</p> <ol> <li> <p>Classes: Cada classe s'ofereix com un rectangle que es divideix en tres seccions:</p> <ul> <li>El nom de la classe.</li> <li>Els atributs de la classe.</li> <li>Els m\u00e8todes de la classe.</li> </ul> </li> <li> <p>Visibilitat: Els atributs i m\u00e8todes poden tenir visibilitat, indicada mitjan\u00e7ant s\u00edmbols:</p> <ul> <li>+ P\u00fablic (accessible des de qualsevol classe).</li> <li>- Privat (nom\u00e9s accessible dins de la classe).</li> <li># Protegit (accessible a la classe i les seves subclases).</li> </ul> </li> <li> <p>Relacions:</p> <ul> <li>Her\u00e8ncia: Representa la relaci\u00f3 d'her\u00e8ncia entre classes, mostrada amb una fletxa amb un triangle ple a l'extrem.</li> <li>Associaci\u00f3: Una l\u00ednia simple entre classes que indica que les dues tenen algun tipus de relaci\u00f3.</li> <li>Composici\u00f3: Representada per una l\u00ednia amb un diamant ple en l'extrem, indicant que una classe \"cont\u00e9\" a una altra i dep\u00e8n de la seva exist\u00e8ncia.</li> <li>Agregaci\u00f3: Similar a la composici\u00f3, per\u00f2 amb un diamant buit, la qual cosa indica que les inst\u00e0ncies de les classes associades poden existir de manera independent.</li> </ul> </li> </ol>"},{"location":"PRG09/#112-exemples-de-diagrames-de-classes","title":"11.2. Exemples de Diagrames de Classes","text":"Her\u00e8ncia entre Classes <p>En aquest exemple, tenim una classe <code>Persona</code> que t\u00e9 atributs i m\u00e8todes comuns. Les classes <code>Profe</code> i <code>Alumne</code> hereten de la classe <code>Persona</code>, afegint els seus propis m\u00e8todes.</p> <p><pre><code>classDiagram\n    class Persona {\n        - String nom\n        + mostraNom()\n    }\n\n    class Profe {\n        + mostraNom()\n    }\n\n    class Alumne {\n        - String curs\n        + mostraCurs()\n    }\n\n    Persona &lt;|-- Profe\n    Persona &lt;|-- Alumne</code></pre></p> <p>En aquest cas, <code>Profe</code> i <code>Alumne</code> hereten la classe <code>Persona</code>, per\u00f2 cada una t\u00e9 els seus propis m\u00e8todes, com <code>mostraNom</code> i <code>mostraCurs</code>.</p> Relaci\u00f3 d'Associaci\u00f3 <p>En aquest cas, dues classes <code>Client</code> i <code>CompteBancari</code> estan associades. Un client pot tenir m\u00faltiples comptes bancaris.</p> <p><pre><code>classDiagram\n    class Client {\n        - String nom\n        + obtenirNom()\n    }\n\n    class CompteBancari {\n        - String numeroCompte\n        + obtenirSaldo()\n    }\n\n    Client \"1\" -- \"0..*\" CompteBancari : t\u00e9</code></pre></p> <p>Aquest diagrama mostra que un <code>Client</code> pot tenir diversos <code>CompteBancari</code>, representant una relaci\u00f3 d'associaci\u00f3 entre les dues classes.</p> Composici\u00f3 <p>En aquest exemple, es mostra una relaci\u00f3 de composici\u00f3, on una classe <code>CistellaCompra</code> cont\u00e9 diverses inst\u00e0ncies de la classe <code>Producte</code>. Si es destrueix la <code>CistellaCompra</code>, tamb\u00e9 es destrueixen els <code>Productes</code> dins d'ella.</p> <p><pre><code>classDiagram\n    class CistellaCompra {\n        + afegirProducte()\n    }\n\n    class Producte {\n        - String nom\n        + obtenirPreu()\n    }\n\n    CistellaCompra \"1\" *-- \"0..*\" Producte : cont\u00e9</code></pre></p> <p>En aquest diagrama, la relaci\u00f3 de composici\u00f3 es representa amb un diamant ple a l'extrem de la l\u00ednia, indicant que la vida de <code>Producte</code> dep\u00e8n de la de <code>CistellaCompra</code>.</p>"},{"location":"PRG09/#12-annex-ii-funiojava","title":"12. Annex II: <code>funIO.java</code>","text":"<p>Arribats a aquest punt, hem actualitzat el fitxer de <code>funcionsIO</code> amb noves funcions que ens ajudaran a simplificar la lectura de dades per teclat i la sortida de dades per pantalla. Com algunes funcions s'han reanomenat, el nou fitxer de <code>funcionsIO</code> actualitzat s'anomena <code>funIO.java</code> i el teniu disponible per a descarregar:</p> <p> funIO.java</p>"},{"location":"PRG10/","title":"UD10. Interf\u00edcies","text":""},{"location":"PRG10/#1-introduccio-a-les-interficies","title":"1. Introducci\u00f3 a les interf\u00edcies","text":"<p>En un videojoc de marcianets hi ha molts personatges (objectes) per la pantalla.</p> <p>Tots seran de la classe Personatge, per\u00f2 s\u00f3n de tipus (subclasses) diferents.</p> <p></p> <p>Per\u00f2 ara volem completar-ho fent que algunes de les classes tinguen un comportament en com\u00fa.</p> <ul> <li> <p>Per exemple, si volem que la classe Nau i la classe Au puguen volar, voldrem que les dos implementen tots els m\u00e8todes que ha de tindre un personatges \"volador\": pujar i baixar.</p> </li> <li> <p>O b\u00e9, si volem que les classes Nau, Hum\u00e0 i Alien puguen usar armes, voldrem que les tres implementen tots els m\u00e8todes que ha de tindre un personatge \"disparador\": disparar i defendre.</p> </li> </ul> <p>Podr\u00edem pensar en fer una classe Volador amb eixos m\u00e8todes per\u00f2 sense implementar-los (serien abstractes) sin\u00f3 que els implementarien les classes filles. Igualment far\u00edem una classe Disparador. Per\u00f2 en Java una classe nom\u00e9s pot ser filla d'1 sola classe. Per a aix\u00f2 estan les interf\u00edcies.</p> <p>Podr\u00edem dir que una interf\u00edcie \u00e9s un \"conjunt d'operacions que sabem qu\u00e8 han de fer per\u00f2 nom com\". Eixe com estar\u00e0 definit en cada classe que vullga tindre eixe comportament. \u00c9s a dir, en cada classe que implemente eixa interf\u00edcie.</p> <p></p> <p>Veiem que caldr\u00e0 una interf\u00edcie Volador (i altra Disparador), on posarem els m\u00e8todes que hauran d'implementar les classes \"voladores\" (i \"disparadores\", respectivament). Aix\u00ed com els noms de les classes solen ser substantius (Cotxe, Alumne, Alien...), els noms de les interf\u00edcies solen ser adjectius, ja que descriuen el seu comportament (Volador, Disparador, Comparable...).</p> <p>Els m\u00e8todes de les interf\u00edcies estaran \"buits\": nom\u00e9s tindran la cap\u00e7alera dels m\u00e8todes, per\u00f2 no estaran implementades. \u00c9s a dir, seran m\u00e8todes abstractes, encara que no es posa la paraula abstract.</p> <p>Veiem com es creen les interf\u00edcies:</p> Java<pre><code>public interface Disparador{\n    void disparar(); //(1)!\n    void defendre();\n}\n</code></pre> <ol> <li>Els m\u00e8todes no s'implementen en la interf\u00edcie, sin\u00f3 que que els haur\u00e0  d'implementar cada classe que vullga implementar la interf\u00edcie Volador. Encara que no es pose, els m\u00e8todes s\u00f3n public abstract. El nom de les interf\u00edcies conv\u00e9 que tinguen maj\u00fascula inicial (igual que les classes).</li> </ol> Java<pre><code>public interface Volador{\n    int alturaMax = 100; //(1)!\n\n    void pujar();\n    void baixar();\n}\n</code></pre> <ol> <li>En una interf\u00edcie tamb\u00e9 es poden definir constants (sempre seran public static final, encara que no es posa).</li> </ol> <p>I veiem ara com una classe implementa eixes interf\u00edcies:</p> Java<pre><code>public class Nau extends Personatge implements Volador, Disparador{ //(1)!\n    int velocitat;\n\n    // ...\n\n    // Implementaci\u00f3 dels m\u00e8todes de Volador\n    @Override\n    public void pujar(){\n        this.posY += 3;\n        if (this.posY &gt; Volador.alturaMax) this.posY = Volador.alturaMax;\n        this.velocitat++;\n    }\n\n    @Override\n    public void baixar(){\n        this.posY -= 3;\n        if (this.posY &lt; 0) this.posY = 0;\n        this.velocitat--;\n        if (this.velocitat &lt; 0) this.velocitat = 0;\n    }\n\n    // Implementaci\u00f3 dels m\u00e8todes de Disparador\n    @Override\n    public void disparar(){\n        System.out.println(\"Pinyou, pinyou!\");\n    }\n\n    @Override\n    public void defendre(){\n        System.out.println(\"Augh!\");\n    }\n}\n</code></pre> <ol> <li>La classe Nau \u00e9s filla de Personatge. Per\u00f2 tamb\u00e9 implementa les interf\u00edcies Volador i Disparador. Per tant, haur\u00e0 d'implementar tots els m\u00e8todes de les interf\u00edcies. Si no ho fem, donar\u00e0 error de compilaci\u00f3.</li> </ol> <p>En el main tamb\u00e9 podem definir objectes \"voladors\" o \"disparadors\" per\u00f2 hauran de ser instanciats a una classe, mai a una interf\u00edcie.</p> Java<pre><code>public class Main{\n    public static void main(String[] args){\n        // Objecte de la classe Nau\n        Nau n1 = new Nau();\n        Volador v1 = new Nau(); //(1)!\n        Volador v2 = new Au();\n        ArrayList&lt;Volador&gt; llistaVoladors = new ArrayList(); //(2)!\n        llistaVoladors.add(v1);\n        llistaVoladors.add(v2);\n        ...\n    }\n}\n</code></pre> <ol> <li>Puc definir un objecte a partir d'una interf\u00edcie, per\u00f2 l'he d'instanciar a partir d'una classe. Igual que en les classes abstractes.</li> <li>D'igual forma puc fer una llista de \"voladors\", on podr\u00e9 posar tant objectes Nau com Au.</li> </ol>"},{"location":"PRG10/#2-concepte-dinterficie","title":"2. Concepte d'interf\u00edcie","text":"<p>Una interf\u00edcie \u00e9s una col\u00b7lecci\u00f3 de m\u00e8todes abstractes (i atributs constants). Les classes que implementen una interf\u00edcie hauran de donar cos als m\u00e8todes de la interf\u00edcie.</p> <p>Recordem que una classe nom\u00e9s pot ser filla (extends) d'una sola classe, per\u00f2 pot implementar moltes interf\u00edcies:</p> <pre><code>classDiagram\n    Classe &lt;|-- SubClasse : extends\n    Interf\u00edcie1 &lt;|.. SubClasse : implements\n    Interf\u00edcie2 &lt;|.. SubClasse : implements</code></pre> <p>A m\u00e9s, una interf\u00edcie pot ser filla (extends) de moltes interf\u00edcies:</p> <pre><code>classDiagram\n    Interf\u00edcie1 &lt;|.. Interf\u00edcie3 : extends\n    Interf\u00edcie2 &lt;|.. Interf\u00edcie3 : extends</code></pre> <p>Utilitat de les interf\u00edcies</p> <ul> <li>Simular her\u00e8ncia m\u00faltiple (una classe pot ser filla d'una sola classe, per\u00f2 pot implementar moltes interf\u00edcies).</li> <li>Obligar a que certes classes utilitzen els mateixos m\u00e8todes (per exemple, per a poder ser comparades entre elles) sense estar obligades a tindre una relaci\u00f3 d'her\u00e8ncia.</li> <li>Sabent que una classe implementa una determinada interf\u00edcie, podrem usar els seus m\u00e8todes perqu\u00e8 ja sabrem qu\u00e8 fan (ens d\u00f3na igual com estiguen implementats).</li> <li>Definir un conjunt de constants disponibles per a totes les classes que implementen la interf\u00edcie (per exemple, per a definir constants d'estat d'un objecte).</li> </ul>"},{"location":"PRG10/#21-metodes-per-defecte-en-interficies","title":"2.1. M\u00e8todes per defecte en interf\u00edcies","text":"<p>A partir de Java 8 podem posar cos als m\u00e8todes en la pr\u00f2pia interf\u00edcie.</p> <p>En eixos casos caldr\u00e0 indicar, amb default, que eixa \u00e9s la implementaci\u00f3 per defecte per a aquelles classes que implementen la interf\u00edcie i que no donen cos a eixos m\u00e8todes.</p> <p>Exemple d'interf\u00edcie amb m\u00e8todes per defecte</p> DisparadorNauAlien Java<pre><code>public interface Disparador{\n    default void disparar(){ //(1)!\n        System.out.println(\"Bang bang\");\n    }\n\n    void defendre();\n}\n</code></pre> <ol> <li>Les classes que implementen la interf\u00edcie Disparador no estaran obligades a implementar el m\u00e8tode disparar() (ja que t\u00e9 una implementaci\u00f3 per defecte).</li> </ol> Java<pre><code>public class Nau implements Disparador{\n    // ...\n\n    @Override\n    public void disparar(){ //(1)!\n        System.out.println(\"Pinyou, pinyou!\");\n    }\n\n    @Override\n    public void defendre(){\n        System.out.println(\"Augh!\");\n    }\n}\n</code></pre> <ol> <li>La classe Nau implementa els 2 m\u00e8todes de la interf\u00edcie, per\u00f2 no \u00e9s obligatori. Podria no implementar el m\u00e8tode disparar() i utilitzar el que t\u00e9 per defecte en la interf\u00edcie.</li> </ol> Java<pre><code>public class Alien implements Disparador{\n    // ...\n\n    @Override\n    public void defendre(){ //(1)!\n        System.out.println(\"Augh!\");\n    }\n}\n</code></pre> <ol> <li>La classe Alien no implementa el m\u00e8tode disparar(), per tant, utilitzar\u00e0 el que t\u00e9 per defecte en la interf\u00edcie.</li> </ol>"},{"location":"PRG10/#3-diferencies-entre-interficies-i-classes","title":"3. Difer\u00e8ncies entre interf\u00edcies i classes","text":""},{"location":"PRG10/#31-interficies-vs-classes","title":"3.1. Interf\u00edcies vs classes","text":""},{"location":"PRG10/#32-interficies-vs-classes-abstractes","title":"3.2. Interf\u00edcies VS classes abstractes","text":"Exercici 1. Interf\u00edcies <p>Crea el projecte ProvesInterficies. L'objectiu d'este exercici \u00e9s poder fer c\u00e0lculs estad\u00edstics (m\u00ednim, m\u00e0xim i suma) de llistes de n\u00fameros, independentment de com estiguen implementades eixes llistes.</p> <ul> <li> <p>Crea esta interf\u00edcie:</p> Java<pre><code>public interface Estadistiques{\n    double minim();\n    double maxim();\n    double suma();\n}\n</code></pre> </li> <li> <p>Crea la classe ArrayListEstad que tinga un ArrayList de doubles (nomenat numeros) i que implemente la interf\u00edcie Estadistiques. NOTA: quan escrigues l'implements, vor\u00e0s que dona error. \u00c9s degut a que encara no has implementat els m\u00e8todes de la interf\u00edcie. Implementa'ls.</p> </li> <li> <p>Crea la classe ArrayEstad, amb un array (un vector, no ArrayList) de doubles (anomenat numeros), que implemente la interf\u00edcie Estadistiques. NOTA: Quan poses l'implements, clica en la icona de l'error i fes que l'IDE t'implemente els m\u00e8todes de la interf\u00edcie. Despr\u00e9s posa el cos dels m\u00e8todes.</p> </li> <li> <p>En el main defineix un objecte de cadascuna de les classes anteriors, afegeix valors a les seues llistes i usa els m\u00e8todes de la interf\u00edcie per a mostrar els respectius m\u00ednims, m\u00e0xims i sumes dels seus elements.</p> </li> </ul> Exercici 2 <p>Si volem que els objectes d\u2019una classe es puguen comparar, eixa classe hauria de definir els m\u00e8todes esMajor, esMenor i esIgual. En compte d\u2019implementar-los en eixa classe, l\u2019objectiu \u00e9s definir-los en una interf\u00edcie i fer que cada classe que necessite poder comparar els seus objectes implemente eixa interf\u00edcie.</p> <ul> <li>En el projecte provesInterficies construeix la interf\u00edcie EsComparable amb els m\u00e8todes esMajor, esMenor i esIgual, als quals se\u2019ls passa com a par\u00e0metre un objecte i retornaran un boole\u00e0 (true si this \u00e9s major/menor/igual que l\u2019objecte del par\u00e0metre). Com sabr\u00e0s, en la interf\u00edcie no s\u2019implementen, sin\u00f3 que nom\u00e9s es posa la cap\u00e7alera dels m\u00e8todes. Posa tamb\u00e9 un comentari en Javadoc de qu\u00e8 fa cada m\u00e8tode.</li> <li>Crea la classe Cotxe (amb matr\u00edcula i preu) i que implemente la interf\u00edcie EsComparable. Un cotxe ser\u00e0 menor que un altre si el preu \u00e9s menor.</li> <li>En el main mostra el m\u00e9s gran de 2 cotxes qualsevol.</li> </ul>"},{"location":"PRG10/#4-les-interficies-comparable-i-comparator","title":"4. Les interf\u00edcies Comparable i Comparator","text":""},{"location":"PRG10/#41-introduccio","title":"4.1. Introducci\u00f3","text":"<p>Per a ordenar un un array d'enters, podem usar el m\u00e8tode sort de la classe Arrays (caldr\u00e0 importar java.util.Arrays):</p> Java<pre><code>int[] edats = {23, 45, 12, 67, 34};\n\nArrays.sort(edats);\n\nfor(int e : edats){\n    System.out.print(e + \" \");\n}\n</code></pre> <p>Si el que volem \u00e9s ordenar un ArrayList d'enters podem usar el m\u00e8tode sort de la classe Collections (caldr\u00e0 importar java.util.Collections):</p> Java<pre><code>ArrayList&lt;Integer&gt; edats2 = new ArrayList();\nedats2.add(23);\nedats2.add(45);\nedats2.add(12);\n...\nCollections.sort(edats2);\n\nSystem.out.println(edats2);\n</code></pre> <p>D'igual forma podr\u00edem ordenar una llista (array, ArrayList...) de String, de float, etc. Per\u00f2 qu\u00e8 passa si volem ordenar una llista d'elements que no s\u00f3n directament ordenables (comparables), com pot ser una llista de cotxes, alumnes...? Si li aplic\u00e0rem el m\u00e8tode sort, ens donaria error, ja que la m\u00e0quina virtual \"no sap\" com comparar eixos objectes.</p> <p>Per a fer que els objectes d'una classe puguen ser comparats, hem d'indicar un criteri de comparaci\u00f3. \u00c9s a dir, cal definir quan un objecte de la classe que volem \u00e9s menor que un altre, quan \u00e9s major i quan \u00e9s igual. La interf\u00edcie EsComparable que hem fet en l'exercici de l'apartat anterior no calia perqu\u00e8 Java ja t\u00e9 unes interf\u00edcies semblants, que s\u00f3n les que cal usar, ja que el sort (entre altres) usa els m\u00e8todes d'eixes interf\u00edcies.</p> <p>Si volem establir un \u00fanic criteri d'ordenaci\u00f3, usarem la interf\u00edcie Comparable per\u00f2 si volem establir diferents criteris d'ordenaci\u00f3 usarem la interf\u00edcie Comparator.</p>"},{"location":"PRG10/#42-la-interficie-comparable","title":"4.2. La interf\u00edcie Comparable","text":"<p>L'han d'implementar les classes que vulguen establir un criteri de comparaci\u00f3 dels seus objectes (i nom\u00e9s un). Esta classe no t\u00e9 m\u00e8todes com esMajor, esMenor, esIgual, sin\u00f3 que l'\u00fanic m\u00e8tode que cal implementar \u00e9s el m\u00e8tode compareTo.</p> Java<pre><code>public interface Comparable&lt;T&gt;{ //(1)!\n    int compareTo(T obj);\n}\n</code></pre> <ol> <li>No hem de crear la interf\u00edcie, ja que ja est\u00e0 inclosa en Java. Vorem que la &lt; T &gt; indica que podrem usar el que s'anomen tipus gen\u00e8rics.</li> </ol> <p>Este m\u00e8tode haur\u00e0 de retornar un n\u00famero negatiu si this \u00e9s menor que obj, un n\u00famero positiu si this \u00e9s major que obj i 0 si s\u00f3n iguals. Per tant, el m\u00e8tode ha de retornar un enter. Ens servir\u00e0 per a comparar dos objectes pel criteri que volem.</p> <p>Exemple</p> <p>Suposem que volem comparar (o ordenar) alumnes. Si volem que l'ordre natural dels alumnes \u00e9s per la seua edat, farem:</p> Java<pre><code>public class Alumne implements Comparable{\n    int codi;\n    String nom;\n    int edat;\n    String curs;\n\n    @Override\n    public int compareTo(Object obj){\n        if (this.edat &lt; ((Alumne)obj).edat) return -1;\n        else if (this.edat &gt; ((Alumne)obj).edat) return 1;\n        else return 0;\n    }\n}\n</code></pre> <p>O b\u00e9, per a no fer el c\u00e0sting en el compareTo, podem implementar la interf\u00edcie Comparable indicant que el seu tipus gen\u00e8ric ser\u00e0 : Java<pre><code>public class Alumne implements Comparable&lt;Alumne&gt;{\n    int codi;\n    String nom;\n    int edat;\n    String curs;\n\n    @Override\n    public int compareTo(Alumne alu){\n        return this.edat - alu.edat; //(1)!\n    }\n}\n</code></pre> <ol> <li>Un truquet: si el criteri per a comparar \u00e9s un enter (edat en este cas), el n\u00famero que retorna compareTo es pot calcular com eixa resta, ja que estarem retornant un n\u00famero negatiu si this &lt; alu, un n\u00famero positiu si this &gt; alu i 0 si s\u00f3n iguals. A banda, podem veure com ara ja no cal fer el c\u00e0sting, ja que el par\u00e0metre del m\u00e8tode compareTo \u00e9s de tipus Alumne.</li> </ol> <p>Ara podrem comparar dos objectes de la classe Alumne:</p> <p><code>if (alu1.compareTo(alu2) &lt; 0) System.out.println(\"L'alumne 1 \u00e9s menor que l'alumne 2\");</code></p> <p>O b\u00e9, ordenar una llista d'alumnes (array o ArrayList) amb el sort, com abans:</p> Java<pre><code>ArrayList&lt;Alumne&gt; llistaAlumnes = new ArrayList();\nAlumne[] vectorAlumnes = new Alumne[10];\n...\nCollections.sort(llistaAlumnes); //(1)!\nArrays.sort(vectorAlumnes);\n</code></pre> <ol> <li>Ara el sort (tan de Collections com d'Arrays) s\u00ed que saben com ordenar alumnes, ja que la classe Alumne implementa la interf\u00edcie Comparable.</li> </ol> <p>\u00c9s un altre motiu de l'\u00fas d'interf\u00edcies: mitjan\u00e7ant la implementaci\u00f3 d'interf\u00edcies tots els programadors fan servir el mateix nom de m\u00e8tode (compareTo, sort...) per a fer una mateixa acci\u00f3 (com comparar objectes).</p> <p>Imagina't que est\u00e0s treballant en un equip de programadors i has d'utilitzar una classe que ha codificat un altre programador. Si vols comparar dos objectes d'eixa classe, nom\u00e9s veient que implementa la interf\u00edcie Comparable, ja saps quins m\u00e8todes pots usar sense saber com est\u00e0 implementat.</p> <p>Aix\u00f2 facilita el desenvolupament de programes i ajuda a comprendre'ls, sobretot quan intervenen centenars de classe diferents.</p> Exercici 3. Interf\u00edcie Comparable <p>Abans has creat la interf\u00edcie EsComparable amb 3 m\u00e8todes per\u00f2, com acabem de vore, ja existeix una interf\u00edcie pareguda a l'API de Java: Comparable.</p> <ul> <li>Fes que la classe Cotxe implemente la interf\u00edcie Comparable. Implementa el m\u00e8tode compareTo fent que un Cotxe siga m\u00e9s xicotet que altre si la matr\u00edcula \u00e9s menor alfab\u00e8ticament (caldr\u00e0 criar al compareTo de la classe String).En cas d'igualtat, ser\u00e0 m\u00e9s xicotet el de menor preu.</li> <li>Modificia els m\u00e8todes de Cotxe que implementen la interf\u00edcie EsComparable per a que ara es basen en invocacions al m\u00e8tode compareTo.</li> </ul> Exercici 4 <p>En el main mostra una llista de cotxes. Per a aix\u00f2, crea el toString de Cotxe, i aix\u00ed ser\u00e0 suficient amb System.out.println(llistaCotxes). Ordena la llista i torna-la a mostrar. Comprova que s'ha ordenat b\u00e9.</p>"},{"location":"PRG10/#43-la-interficie-comparator","title":"4.3. La interf\u00edcie Comparator","text":"<p>Amb la interf\u00edcie Comparable pod\u00edem comparar (ordenar) alumnes per un criteri establert: el codi de l'alumne. Per\u00f2 de vegades, en un mateix programa, voldrem establir diferents criteris  d'ordenaci\u00f3: ara pel nom, ara pel curs...</p> <p>Per a fer que els objectes d'una classe puguen ser comparats per diversos criteris, per cada criteri caldr\u00e0 crear una classe especial que implemente una interf\u00edcie anomenada Comparator, on definirem el m\u00e8tode compare (no compareTo), al qual se li passen com a par\u00e0metre els dos objectes a comparar i retornar\u00e0 un valor negatiu, zero o positiu, igual que el compareTo de la interf\u00edcie Comparable.</p> Java<pre><code>interface Comparator&lt;T&gt;{ //(1)!\n    int compare(T obj1, T obj2);\n}\n</code></pre> <ol> <li>No l'hem de crear ja que \u00e9s una interf\u00edcie inclosa en Java.</li> </ol> <p>Exemple</p> <p>Volem establir 3 criteris d'ordenaci\u00f3. Per tant, farem 3 comparadors. \u00c9s a dir, 3 classes que implementen Comparator per a implementar 3 voltes el compare:</p> Java<pre><code>import java.util.Comparator;\npublic class ComparadorAlumnePerEdat implements Comparator&lt;Alumne&gt;{\n    @Override\n    public int compare(Alumne a1, Alumne a2){\n        return a1.getEdat() - a2.getEdat();\n    }\n}\n</code></pre> Java<pre><code>import java.util.Comparator;\npublic class ComparadorAlumnePerNom implements Comparator&lt;Alumne&gt;{\n    @Override\n    public int compare(Alumne a1, Alumne a2){\n        return a1.getNom().compareTo(a2.getNom()); //(1)!\n    }\n}\n</code></pre> <ol> <li>Podem comparar cadenes amb el compareTo de la classe String (ja que String implementa Comparable).</li> </ol> Java<pre><code>import java.util.Comparator;\npublic class ComparadorAlumnePerCursEdat implements Comparator&lt;Alumne&gt;{\n    @Override\n    public int compare(Alumne a1, Alumne a2){\n        int cmpCurs = a1.getCurs().compareTo(a2.getCurs());\n        return (cmpCurs != 0 ? cmpCurs : a1.getEdat() - a2.getEdat()); //(1)!\n    }\n}\n</code></pre> <ol> <li>Ordenar\u00e0 alumnes segons el curs. Si foren del mateix els ordenaria per l'edat.</li> </ol> <p>Ara, si tenim dos objectes alu1 i alu2, de la classe Alumne, podem comparar-los pel criteri que vullgam. Ho farem creant un objecte de la classe que t\u00e9 el criteri que volem. Aix\u00ed:</p> Java<pre><code>ComparadorAlumnePerCursEdat cace = new ComparadorAlumnePerCursEdat();\n\nif(cace.compare(alu1, alu2) &lt; 0){\n    System.out.println(alu1 + \" \u00e9s menor que \" + alu2 + \" segons curs i edat.\");\n}\n</code></pre> <p>O b\u00e9, podrem ordenar una llista d'alumnes (array, ArrayList...) amb el criteri que vullgam, tamb\u00e9 amb el sort, per\u00f2 passant-li com a segon par\u00e0metre un comparador. \u00c9s a dir: un objecte de la classe que t\u00e9 el criteri que volem:</p> Java<pre><code>...\nCollections.sort(llistaAlumnes, cace); //(1)!\nSystem.out.println(llistaAlumnes);\n...\n</code></pre> <ol> <li>Si al sort nom\u00e9s li passem la llista, l'ordena pel criteri per defecte (usa el compareTo() de la classe Alumne). Per\u00f2 si li passem tamb\u00e9 un comparador, ho ordena per eixe criteri (usa el compare() del comparador). En este cas, per curs i edat.</li> </ol>"},{"location":"PRG10/#44-ordenant-una-llista-a-la-inversa","title":"4.4. Ordenant una llista a la inversa","text":"<p>Podem ordenar una llista en sentit invers a l'actual:</p> Java<pre><code>Collections.reverse(llista);\n</code></pre> <p>Tamb\u00e9 podem ordenar la llista en sentit invers al del compareTo():</p> Java<pre><code>Comparator ordreInvers = Collections.reverseOrder();\nCollections.sort(llista, ordreInvers);\n</code></pre> <p>I tamb\u00e9 podem ordenar la llista en sentit invers al d'un comparador:</p> Java<pre><code>ComparadorAlumnesPerNom ordreNom = new ComparadorAlumnesPerNom();\nComparator ordreNomInvers = Collections.reverseOrder(ordreNom);\nCollections.sort(llista, ordreNomInvers);\n</code></pre>"},{"location":"PRG10/#45-esquema-resum-dus-de-les-interficies-comparable-i-comparator","title":"4.5. Esquema resum d'\u00fas de les interf\u00edcies Comparable i Comparator","text":"<p>Una volta tenim aix\u00f2, podrem:</p> <ul> <li>Comparar 2 objectes pel criteri per defecte o pel comparador que indiquem.</li> <li>Ordenar una llista pel criteri per defecte o pel comparador que indiquem.</li> </ul> Java<pre><code>...\nAlumne a1 = new Alumne(...);\nAlumne a2 = new Alumne(...); //(1)!\n\nArrayList&lt;Alumne&gt; alumnes = new ArrayList(); //(2)!\nalumnes.add(a1);\nalumnes.add(a2);\n...\nalumnes.add(...);\n\nCompAluEdat caEdat = new CompAluEdat();\nCompAluNota caNota = new CompAluNota();\nCompAluNom caNom = new CompAluNom(); //(3)!\n\nif(a1.compareTo(a2) &lt; 0) {...} //(4)!\nif(caEdat.compare(a1, a2) &lt; 0) {...}\nif(caNota.compare(a1, a2) &lt; 0) {...}\nif(caNom.compare(a1, a2) &lt; 0) {...} //(5)!\n\nCollections.sort(alumnes); //(6)!\nCollections.sort(alumnes, caEdat);\nCollections.sort(alumnes, caNota);\nCollections.sort(alumnes, caNom); //(7)!\n</code></pre> <ol> <li>Tenim 2 alumnes qualsevol que voldrem comparar.</li> <li>Tenim una llista d'alumnes que voldrem ordenar.</li> <li>Creem un comparador per cada criteri de comparaci\u00f3 que necessitem.</li> <li>Comparem 2 alumnes pel criteri per defecte.</li> <li>Comparem 2 alumnes pel criteri que indiquem.</li> <li>Ordenem la llista pel criteri per defecte.</li> <li>Ordenem la llista pel criteri que indiquem.</li> </ol> Exercici 5 <p>Volem tindre una llista de factures i poder-les ordenar per diferents criteris.</p> <ul> <li> <p>Crea la class Factura amb els seg\u00fcents atributs, constructor i toString:</p> Java<pre><code>public class Factura{\n    int numero;\n    LocalDate data; //(1)!\n    float importTotal;\n}\n</code></pre> <ol> <li>Cal importar java.time.LocalDate. No t\u00e9 constructor. Exemple d'\u00fas: data = LocalDade.of(2024, 12, 31);</li> </ol> </li> <li> <p>Fes que el criteri d'ordenaci\u00f3 per defecte siga pel n\u00famero de factura. \u00c9s a dir, fes que a classe Factura implemente la interf\u00edcie Comparable.</p> </li> <li>Fes altres 2 criteris d'ordenaci\u00f3. \u00c9s a dir, crea 2 classes que implementen la interf\u00edcie Comparator:<ul> <li>Per l'import i, en cas d'igualtat, pel n\u00famero de la factura.</li> <li>Per la data i, en cas d'igualtat, per l'import.</li> </ul> </li> <li>Crea dos factures i mostra la major segons els 3 criteris.</li> <li>Crea un ArrayList de factures, posa-li'n unes quantes i mostra la llista.</li> <li>Ordena la llista (i mostra-la) per estos criteris:<ul> <li>Ordre invers a l'actual.</li> <li>Per n\u00famero de factura ascendent.</li> <li>Per n\u00famero de factura descendent.</li> <li>Per import i n\u00famero de factura, ascendent.</li> <li>Per import i n\u00famero de factura, descendent.</li> <li>Per data i import, ascendent.</li> <li>Per data i import, descendent.</li> </ul> </li> </ul>"},{"location":"PRG10/#5-la-interficie-cloneable","title":"5. La interf\u00edcie Cloneable","text":"<p>Si volem copiar un objecte a un altre hi ha diferents maneres:</p>"},{"location":"PRG10/#51-formes-de-copiar-objectes","title":"5.1. Formes de copiar objectes","text":""},{"location":"PRG10/#511-copia-amb-loperador","title":"5.1.1. C\u00f2pia amb l'operador =","text":"<p>Recordem que amb <code>alu1 = alu2</code> no estem creant una c\u00f2pia sin\u00f3 que seran 2 variables que apunten al mateix objecte:</p> <p></p> <p>En compte d'aix\u00f2, potser volem fer una clonaci\u00f3: una nova zona de mem\u00f2ria per a alu2, on copiem el valor de cada atribut. Segons com ho fem, tindrem 2 possibilitats d'obtindre eixe clon: amb una c\u00f2pia superficial o amb una c\u00f2pia profunda:</p>"},{"location":"PRG10/#512-copia-superficial-shallow-copy","title":"5.1.2. C\u00f2pia superficial (shallow copy)","text":""},{"location":"PRG10/#513-copia-profunda-deep-copy","title":"5.1.3. C\u00f2pia profunda (deep copy)","text":""},{"location":"PRG10/#52-formes-de-fer-la-copia-superficial-shallow-copy","title":"5.2. Formes de fer la c\u00f2pia superficial (shallow copy)","text":"<p>Veiem les diferents formes de clonar un objecte, a partir de l'exemple anterior.</p> <p>Suposem que tenim esta classe Alumne (i la classe PC):</p> Java<pre><code>class PC {\n    int nSerie;\n    String carac;\n}\n\npublic class Alumne {\n    int num;\n    int edat;\n    String nom; //(1)!\n    int[] notes = new int[4];\n    PC pc = new PC(); //(2)!\n\n    public Alumne(int num, int edat, String nom) {\n        this.num = num;\n        this.edat = edat;\n        this.nom = nom;\n    }\n}\n</code></pre> <ol> <li>Atributs primitius</li> <li>Atributs referenciats</li> </ol>"},{"location":"PRG10/#521-clonant-amb-un-constructor","title":"5.2.1. Clonant amb un constructor:","text":"Java<pre><code>public class Alumne {\n    ...\n\n    public Alumne(Alumne aluOri){ //(1)!\n        this.num = aluOri.num;\n        this.edat = aluOri.edat;\n        this.nom = aluOri.nom; //(2)!\n        this.notes = aluOri.notes; //(3)!\n        this.pc = aluOri.pc;\n    }\n}\n</code></pre> <ol> <li>Creem un constructor de forma que no li passem com a par\u00e0metre els atributs, sin\u00f3 tot l'objecte Alumne origen a copiar.</li> <li>O b\u00e9: this(aluOri.num, aluOri.edat, aluOri.nom);</li> <li>Ac\u00ed estem fent c\u00f2pia superficial.</li> </ol> <p>La forma de crear el clon seria:</p> Java<pre><code>public class ProvesClons{\n    public static void main(String[] args){\n        Alumne a1 = new Alumne(6, 22, \"Pep\");\n        Alumne a2 = new Alumne(a1);\n    }\n}\n</code></pre>"},{"location":"PRG10/#522-clonant-amb-un-metode-que-retorne-un-objecte-clonat","title":"5.2.2. Clonant amb un m\u00e8tode que retorne un objecte clonat:","text":"Java<pre><code>public class Alumne{\n    ...\n\n    public Alumne clone(){ //(1)!\n        Alumne aluClonat = new Alumne(this.num, this.edat, this.nom);\n        aluClonat.notes = this.notes; //(2)!\n        aluClonat.pc = this.pc;\n        return aluClonat;\n    }\n}\n</code></pre> <ol> <li>Creem un m\u00e8tode que reserva mem\u00f2ria per a un nou objecte, copia component a component i retorna eixe objecte.</li> <li>Tamb\u00e9 estem fent c\u00f2pia superficial.</li> </ol> <p>La forma de crear el clon seria:</p> Java<pre><code>public class ProvesClons{\n    public static void main (String[] args){\n        Alumne a1 = new Alumne(6, 22, \"Pep\");\n        Alumne a2 = new Alumne(a1);\n        Alumne a3 = a1.clone();\n    }\n}\n</code></pre>"},{"location":"PRG10/#523-invocant-el-clone-de-la-classe-object-i-implementant-la-interficie-cloneable","title":"5.2.3. Invocant el clone() de la classe Object (i implementant la interf\u00edcie Cloneable)","text":"<p>\u00c9s com el cas anterior (Clonant amb un m\u00e8tode que retorne un objecte clonat) per\u00f2 en compte de copiar atribut a atribut, nom\u00e9s \u00e9s cridar el clone() d'Object. Per\u00f2 per a fer aix\u00f2 cal implementar Cloneable i tractar una exempci\u00f3:</p> Java<pre><code>public class Alumne implements Cloneable { //(1)!\n    @Override\n    public Alumne clone() {\n        Alumne aluClonat;\n        try{\n            aluClonat = (Alumne)super.clone(); //(2)!\n        } catch (CloneNotSupportedException ex) {\n            System.out.println(\"No implementa Cloneable\");\n            aluClonat = null; //(3)!\n        }\n        return aluClonat;\n    }\n}\n</code></pre> <ol> <li>Cal implementar Cloneable.</li> <li>El super.clone() ens fa la c\u00f2pia superficial de l'Alumne, sense haver de fer nosaltres la c\u00f2pia atribut a atribut.</li> <li>Cal tractar eixa excepci\u00f3. Per\u00f2 mai es provocar\u00e0 ja que hem posat implements Cloneable.</li> </ol> <p>Coses a tenir en compte per a usar el clone() d'Object:</p> <ol> <li>Des del main no podem invocar el clone() d'Object, ja que \u00e9s protected. Per tant, caldr\u00e0 invocar-lo des de la mateixa classe on volem clonar (com hem fet abans).</li> <li>El nostre m\u00e8tode que clona podria dir-se com vullgam, per\u00f2 s'aconsella que sobreescrivim el m\u00e8tode clone() d'Object. Quan sobreescrivim un m\u00e8tode:<ul> <li>Podem donar-li els mateixos permisos (protected en este cas) o m\u00e9s permisos (public), per\u00f2 no menys (private o \"res\").</li> <li>I tamb\u00e9 podem fer que retorne un objecte d'eixa classe Alumne, en compte d'Object (com hem fet abans).</li> </ul> </li> <li>Com hem vist, si volem usar el super.clone() cal implementar Cloneable. Ara b\u00e9: la interf\u00edcie Cloneable no t\u00e9 cap m\u00e8tode.<ul> <li>Si no t\u00e9 cap m\u00e8tode, per a qu\u00e8 serveix? Nom\u00e9s serveix per a que el programador siga conscient que amb la crida al super.clone() s'est\u00e0 fent una c\u00f2pia superficial, no profunda. I que, per tant, si el programador vol fer-la profunda, caldr\u00e0 clonar tamb\u00e9 els atributs referenciats que crega convenients (arrays i/o objectes dins de l'objecte).</li> </ul> </li> </ol>"},{"location":"PRG10/#53-formes-de-fer-la-copia-profunda-deep-copy","title":"5.3. Formes de fer la c\u00f2pia profunda (deep copy)","text":"<p>Depenent dels casos, a vegades caldr\u00e0 fer c\u00f2pia superficial, a vegades profunda i a vegades alguns atributs en superficial i altres en profunda. Veiem 2 formes de fer la deep copy, amb este exemple de la classe Alumne:</p>"},{"location":"PRG10/#531-deep-copy-manual","title":"5.3.1. Deep copy \"manual\"","text":"Java<pre><code>public class Alumne implements Cloneable {\n    ...\n    @Override\n    public Alumne clone() {\n        Alumne aluClonat;\n        // C\u00f2pia superficial:\n        try {\n            aluClonat = (Alumne) super.clone(); //(1)!\n        } catch (CloneNotSupportedException ex) {\n            System.out.println(\"No implementa Cloneable\");\n            aluClonat = null;\n        }\n\n        // C\u00f2pia profunda de l'array \"notes\":\n        aluClonat.notes = this.notes.clone(); //(2)!\n\n        // C\u00f2pia profunda de l'objecte \"pc\":\n        aluClonat.pc = this.pc.clone(); //(3)!\n\n        // Retornem el clon:\n        return aluClonat;\n    }\n}\n</code></pre> <ol> <li>El super.clone() d'abans copia atribut a atribut.</li> <li>Els arrays (i els ArrayList) tenen un m\u00e8tode clone().</li> <li>Si la classe PC no tinguera el clone(), far\u00edem: aluClonat.pc = new PC(); aluCLonat.pc.nSerie = this.pc.nSerie; aluClonat.pc.carac = this.pc.carac;</li> </ol> <p>Compte!</p> <p>El clone() de l'array (i el de l'ArrayList) \u00e9s superficial. \u00c9s a dir, si en compte de tindre un array d'enters tingu\u00e9rem un array d'objectes, els components dels 2 arrays estarien apuntant als mateixos objectes.</p>"},{"location":"PRG10/#532-deep-copy-automatic","title":"5.3.2. Deep copy \"autom\u00e0tic\"","text":"<p>Amb esta forma, \"serialitzarem\" l'objecte a clonar. \u00c9s a dir: el convertirem a bytes i despr\u00e9s tornarem a posar eixos bytes en l'altre objecte. Ara b\u00e9:</p> <ul> <li>Es far\u00e0 un deep copy total: de tots els camps i a tots els subnivells. Si volgu\u00e9rem que d'algum atribut es fera c\u00f2pia superficial, esta no serviria.</li> <li>Esta forma no \u00e9s molt recomanable perqu\u00e8 \u00e9s molt m\u00e9s lenta que la \"manual\".</li> </ul> <p>Veiem com seria:</p> Java<pre><code>public class Alumne implements Serializable { //(1)!\n    ...\n    public Object deepClone() {\n        ObjectOutputStream oos = null; //(2)!\n        try {\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n            oos = new ObjectOutputStream(bos);\n            oos.writeObject(this);\n\n            ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());\n            ObjectInputStream ois = new ObjectInputStream(bis);\n            return ois.readObject();\n        } catch (IOException | ClassNotFoundException ex) {\n            System.out.println(\"Error\");\n            return null;\n        }\n    }\n}\n</code></pre> <ol> <li>Cal implementar la interf\u00edcie Serializable (tampoc t\u00e9 cap m\u00e8tode) tant en Alumne com en PC.</li> <li>S'entendr\u00e0 millor quan vejam el tema dels fitxers. De moment, nom\u00e9s dir que amb eixe codi podr\u00edem clonar en profunditat qualsevol objecte.</li> </ol> <p>I clonar\u00edem aix\u00ed:</p> Java<pre><code>public class ProvesClons {\n    public static void main (String[] args) {\n        Alumne a1 = new Alumne(6, 22, \"Pep\");\n        Alumne a2 = new Alumne(a1);\n        Alumne a3 = a1.clone();\n        Alumne a4 = (Alumne)(a1.deepClone());\n    }\n}\n</code></pre> Exercici 6 <p>Volem clonar cotxes en el nostre projecte.</p> <ul> <li>Afig a la classe Cotxe l'array revisions, de 5 booleans. Modifica el toString() per a que tamb\u00e9 mostre les revisions.</li> <li>Crea el m\u00e8tode clone() en la classe Cotxe per a copiar en profunditat (de forma manual).</li> <li>En el main crea un cotxe1 i clona'l a un cotxe2. Mostra el cotxe2.</li> <li>Per vore que s'ha fet b\u00e9 la deep copy: despr\u00e9s de clonar, modifica una revisi\u00f3 del cotxe1 i torna a mostrar el cotxe2 per vore que no ha canviat.</li> </ul> Exercici 7 <p>Crea la classe Propietari amb un nom i un ArrayList de cotxes. Fes el toString().</p> <ul> <li>Crea el clone() de Propietari per a c\u00f2pia en profunditat (de forma manual).</li> <li>En el main crea l'objecte propietari1 (amb un nom i alguns cotxes) i clona'l a un propietari2. Mostra les dades del propietari2.</li> <li>Comprova que s'ha fet b\u00e9 la c\u00f2pia en profunditat: modifica el preu d'un dels cotxes del propietari1 i mostra les dades del propietari2. No hauria d'haver canviat el preu d'eixe cotxe en el propietari2.</li> </ul>"},{"location":"PRG10/#6-les-interficies-iterator-i-iterable","title":"6. Les interf\u00edcies Iterator i Iterable","text":""},{"location":"PRG10/#61-introduccio","title":"6.1. Introducci\u00f3","text":"<p>Per a rec\u00f3rrer una llista es pot fer de diverses maneres. Hi ha dos formes de fer-ho sense usar un comptador: amb un bucle foreach o amb un iterador (usant la interf\u00edcie Iterator). Per exemple, si tenim que llista \u00e9s un ArrayList de strings:</p> <p></p> <p>Veiem que el foreach \u00e9s m\u00e9s senzill per\u00f2 si esborrem un element de la llista mentre la recorrem amb el foreach pot donar error ja que \u00e9s \"com si ens furtaren les rajoles per on caminem\". El m\u00e8tode remove() d'Iterator ho resol. No el remove() de ArrayList, sin\u00f3 el de la interf\u00edcie Iterator:</p> <p></p> <p>Per tant, si volem esborrar algun element de la llista mentre la recorre, haurem de rec\u00f3rrer-la amb un iterador.</p> <p>Veiem-ho detalladament:</p>"},{"location":"PRG10/#62-la-interficie-iterator","title":"6.2. La interf\u00edcie Iterator","text":"<p>La interf\u00edcie Iterator proporciona uns m\u00e8todes per a accedir seq\u00fcencialment als elements d'una col\u00b7lecci\u00f3:</p> Java<pre><code>public interface Iterator {\n    boolean hasNext();      // Si hi ha altre element o no a rec\u00f3rrer\n    Object next();          // Retorna el seg\u00fcent element a rec\u00f3rrer\n    default void remove();  // Elimina l'\u00faltim element obtingut amb el next()\n}\n</code></pre> <p>Com Java t\u00e9 moltes col\u00b7leccions distintes (ArrayList, HashSet, array, Queue...), es pret\u00e9n rec\u00f3rrer de la mateixa forma eixes col\u00b7leccions (o altres que ens fem nosaltres).</p> <p>A. PRIMER CAL DEFINIR-NOS UN ITERADOR SOBRE LA LLISTA</p> <p>Per exemple:</p> <p></p> <p>Sintaxi:</p> <p></p> <p>B. RECORREM LA LLISTA AMB L'ITERADOR</p> <p></p> <p>\u00c9s convenient fer \u00fas d'eixe objecte temporal (<code>e</code>) per a no cometre este error:</p> <p></p> Exercici 8 <p>Crea un ArrayList de cotxes i posa'n alguns. Despr\u00e9s, recorre la llista de forma que, en cada cotxe, despr\u00e9s de mostrar les dades, es preguntar\u00e0 per teclat si volem esborrar eixe cotxe. En cas afirmatiu, l'esborrarem. Caldria fer-ho amb un iterador (si no, hauria de donar error).</p> <p>Hem vist que, amb la interf\u00edcie Iterator, podem rec\u00f3rrer els elements d'un ArrayList (o d'un HashSet...) ja que estes classes ens proporcionen un iterador:</p> Java<pre><code>ArrayList&lt;Empleat&gt; empleats = new ArrayList&lt;Empleat&gt;();\n...\nIterator&lt;Empleat&gt; it = empleats.iterator();\n</code></pre> <p>\u00c9s a dir: la classe ArrayList \"es pot iterar\": ens proporciona un iterador. Per\u00f2 tamb\u00e9 voldr\u00edem fer que una classe nostra, que incloga una llista d'elements (independentment de si est\u00e0 implementada amb un ArrayList, un array, etc), tamb\u00e9 \"puga ser iterada\": que tamb\u00e9 ens proporcione un iterador. Per exemple, una classe Departament pot tindre dins una llista d'empleats, i voldr\u00edem fer:</p> Java<pre><code>Departament dep = new Departament();\n...\nIterator&lt;Empleat&gt; it = dep.iteradorEmpleats();\n</code></pre> <p>I despr\u00e9s treballar amb eixe it com ho hem fet abans (amb hasNext() i next()).</p> <p>Per a poder fer aix\u00f2 caldr\u00e0 fer el seg\u00fcent:</p> Java<pre><code>class Departament {\n    private String nom;\n    private ArrayList&lt;Empleat&gt; empleats = new ArrayList&lt;Empleat&gt;(); //(1)!\n    ...\n    public Iterator&lt;Empleat&gt; iteradorEmpleats() {\n        return empleats.iterator(); //(2)!\n    }\n}\n</code></pre> <ol> <li>La classe Departament tindr\u00e0 una llista d'empleats.</li> <li>La classe Departament proporcionar\u00e0 l'iterador per a poder rec\u00f3rrer la llista dels seus empleats.</li> </ol> <p>Ara podem rec\u00f3rrer la llista dels empleats d'un departament amb eixe iterador, de la mateixa forma que abans (amb hasNext() i next()).</p> Java<pre><code>public static void main(String [] args){\n    Departament dep = new Departament();\n    Iterator&lt;Empleat&gt; it = dep.iteradorEmpleats(); //(1)!\n    while(it.hasNext()){ //(2)!\n        System.out.println(it.next());\n    }\n}\n</code></pre> <ol> <li>El departament ens proporciona l'iterador per a poder rec\u00f3rrer la llista dels seus empleats.</li> <li>Recorrem els empleats amb els m\u00e8todes d'Iterator, sense saber com est\u00e0 implementada la llista d'empleats.</li> </ol> <p>Als exemples anteriors, la llista d'empleats del departament \u00e9s un ArrayList i, per tant, el Departament podia proporcionar l'iterador d'eixe ArrayList. Per\u00f2 si la llista d'empleats \u00e9s un array, este no disposa d'iteradors. Per tant, l'agurem de fer nosaltres. Aix\u00ed:</p> <p></p> <p>I ara vorem que per a rec\u00f3rrer els empleats del Departament implementats amb un array \u00e9s exactament igual que rec\u00f3rrer els empleats implementats amb ArrayList:</p> Java<pre><code>public static void main(String [] args){\n    Departament dep = new Departament();\n    Iterator&lt;Empleat&gt; it = dep.iteradorEmpleats(); //(1)!\n    while(it.hasNext()){ //(2)!\n        System.out.println(it.next());\n    }\n}\n</code></pre> <p>Veiem altre exemple. Ara suposem que un Departament nom\u00e9s puga tindre 3 empleats i que la llista est\u00e0 implementada amb 3 variables. Ara la classe que implemente l'iterador d'empleats hhaur\u00e0 de ser diferent:</p> <p></p> <p>I, des de fora, la forma de rec\u00f3rrer els empleats del departament, seria exactament igual que abans: fent \u00fas de hasNext(), next() i, si cal, remove().</p> <p>Si volgu\u00e9rem rec\u00f3rrer els empleats de la classe Departament de 2 formes distintes (ascendent i descendent, per exemple), haurem d'implementar eixos 2 criteris:</p> <p></p> Java<pre><code>public static void main(String [] args){\n    Departament dep = new Departament();\n    Iterator&lt;Empleat&gt; it;\n\n    it = dep.iteradorEmpleatsAsc();\n    while(it.hasNext()){\n        System.out.println(it.next());\n    }\n\n    it = dep.iteradorEmpleatsDesc();\n    while(it.hasNext()){\n        System.out.println(it.next());\n    }\n}\n</code></pre>"},{"location":"PRG10/#63-la-interficie-iterable","title":"6.3. La interf\u00edcie Iterable","text":"<p>Als exemples anteriors hem fet que eixa classe Departament siga \"iterable\": que proporcione un iterador per a rec\u00f3rrer els seus elements. Per\u00f2 \u00e9s m\u00e9s coherent si eixa classe Departament implementa la interf\u00edcie Iterable (no s'ha de cofondre amb Iterator), que nom\u00e9s t\u00e9 un m\u00e8tode (iterator()) que retorna l'iterador:</p> <p></p> <p>Fent que Departament implemente Iterable, estem dient que, des de fora, podrem obtindre un iterador de la classe invocant el m\u00e8tode iterator(), i que podrem usar els m\u00e8todes hasNext(), next() i remove(), sense la necessitat de saber si la llista d'empleats est\u00e0 implementada com un ArrayList, un array o d'alguna altra forma.</p> <p></p> <p>Resumint:</p> <p>Si volem poder rec\u00f3rrer els elements d'una classe, farem que eixa classe implemente la interf\u00edcie Iterable. Aix\u00f2 ens obligar\u00e0 a implementar el m\u00e8tode iterator(). Este retornar\u00e0 l'iterador d'un ArrayList, etc, o b\u00e9 haurem de crear una classe que implemente la interf\u00edcie Iterator.</p> Exercici 9. Llista d'alumnes <ul> <li> <p>Crea la classe Alumne amb estos atributs i m\u00e8todes:</p> <ul> <li>Atribut nom: nom de l'alumne.</li> <li>Constant QAVA (quantitat avaluacions): 3</li> <li>Constant QEXER (quantitat d'exercicis per avaluaci\u00f3): 5</li> <li>Matriu notes: de QAVA avaluacions per QEXER exercicis.</li> <li>Constructor: se li passa el nom de l'alumne i ha d'inicialitzar cada nota a -1 (significa que no estan posades les notes).</li> <li>M\u00e8tode posaNota, per a posar una nota a l'alumne (par\u00e0metres: n\u00fam. avaluaci\u00f3, n\u00fam. exercici i la nota).</li> </ul> </li> <li> <p>Volem poder rec\u00f3rrer la matriu per avaluacions (per a treure mitjanes, m\u00e0xim...). Per a aix\u00f2 contruirem un iterador de les notes de l'alumne:</p> <ul> <li>Fes que la classe Alumne implemente la interf\u00edcie Iterable.</li> <li>Implementa el m\u00e8tode iterator(), que retornar\u00e0 un objecte iterador a partir d'una classe que t'haur\u00e0s de crear dins d'Alumne.</li> <li>Crea la classe IteradorNotes que implemente Iterator. Caldr\u00e0 implementar el hasNext() i next() tenint en compte que el recorregut el volem per files (avaluacions).</li> </ul> </li> <li> <p>En el main fes el seg\u00fcent:</p> <ul> <li>Crea un alumne.</li> <li>Posa-li algunes notes.</li> <li>Recorre les notes de l'alumne amb un iterador per a obtindre a seua nota mitja, quantes notes t\u00e9 aproevades i quantes suspeses. Mostra-ho per pantalla.</li> </ul> </li> </ul>"}]}